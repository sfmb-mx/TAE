#+TITLE:     Kaggle Competition. 15.071x - The Analytics Edge (Summer 2015).
#+AUTHOR:    Sergio-Feliciano Mendoza-Barrera
#+DRAWERS:    sfmb
#+EMAIL:     smendoza.barrera@gmail.com
#+DATE:     20/07/2015
#+DESCRIPTION:  The Analytics Edge Kaggle competition
#+KEYWORDS:   R, data science, emacs, ESS, org-mode, kaggle, competition
#+LANGUAGE:   en
#+OPTIONS:    H:10 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t d:HIDDEN
#+OPTIONS:    TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:    LaTeX:dvipng
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="dft.css"/>

#+LaTeX_CLASS: IEEEtran
#+LATEX_CLASS_OPTIONS: [letterpaper, 9pt, onecolumn, twoside, technote, final]
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{makeidx}

#+LATEX_HEADER: \usepackage[lining,tabular]{fbb} % so math uses tabular lining figures
#+LATEX_HEADER: \usepackage[scaled=.95,type1]{cabin} % sans serif in style of Gill Sans
#+LATEX_HEADER: \usepackage[varqu,varl]{zi4}% inconsolata typewriter
#+LATEX_HEADER: \usepackage[T1]{fontenc} % LY1 also works
#+LATEX_HEADER: \usepackage[libertine,bigdelims]{newtxmath}
#+LATEX_HEADER: \usepackage[cal=boondoxo,bb=boondox,frak=boondox]{mathalfa}
#+LATEX_HEADER: \useosf % change normal text to use proportional oldstyle figures

#+LATEX_HEADER: \markboth{Kaggle competition, July 2015.}%
#+LATEX_HEADER: {Sergio-Feliciano Mendoza-Barrera}

#+LATEX_HEADER: \newcommand{\degC}{$^\circ$C{}}

#+STYLE: <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>

#+ATTR_HTML: width="500px"

# -*- mode: org; -*-
#+OPTIONS:   toc:2

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+BEGIN_ABSTRACT
This is the document for the Kaggle competition for the Analytics Edge
course from MIT.
#+END_ABSTRACT

* Introduction

** Welcome to the Kaggle Competition!

For the next three weeks, you will be participating in a competition
on Kaggle. You should have already set up a Kaggle account (this was
the last component of Unit 6). When the competition is over, you will
be able to check your grade on the competition by going to your
Progress page.

We have created two R script files to help you get started on this
competition. The first script (on the next page), is intended to help
you get started by building a simple logistic regression model and
preparing the results for submission on Kaggle. The second script (on
the following page), is designed to help you deal with the text data
provided in this competition. We highly recommend that you carefully
go through both of these script files, and refer to them during the
competition.

If you get stuck or have questions, please use the Discussion forum on
the edX site for this class. Remember though that the standard
discussion forum rules apply. You should not ask for answers or give
any answers on the forum.

Once you are ready, go ahead and get started by heading to the
[[https://kaggle.com/join/15071xtheanalyticsedgesummer2015][competition page]] on Kaggle. Note that this competition is a private
competition only for students in 15.071x. Please do not distribute
this link to people who are not enrolled in this class.

Good luck!

** Getting started on Kaggle

If you have never participated in a Kaggle competition before, or if
you just want some help getting started, we have created [[https://courses.edx.org/asset-v1:MITx%2B15.071x_2a%2B2T2015%2Btype@asset%2Bblock/KCompetition_GettingStarted.R][this R script]]
file to help you get started. It shows you how to prepare a submission
file for a simple logistic regression model, and how to get the most
out of the date/time variable in the dataset.

Before going through the script file, please explore the Kaggle
competition by following the link on the previous page. There are
several very important pages in the competition:

- The "*Data*" page of the competition describes the data and gives
 you links to download the data.

- The "*Evaluation*" page is where you will learn how the competition
 is graded and how to make submissions.

- The "*Rules*" page outlines some very important rules for the
 competition. Please keep in mind that all of your submissions should
 reflect the results of your own analytical models, built using the
 data provided on the Kaggle site. While you can use the discussion
 forum to ask questions and get help, the standard rules
 apply. Please do not ask for or give solutions to the
 competition. We will be checking submissions for signs of copying,
 either from your classmates or from outside sources.

- When you are ready to make a submission, the "*Make a Submission*"
 page is where you can submit your solution. Note that you can make
 up to 5 submissions each day, so don't hesitate to get creative and
 try out many different models!

If you have questions about the logistics of the competition, or need
help understanding the provided script file, please go to the
Discussion forum by using the link below.

Remember that this script file is just designed to help you get
started. You will need to build better models to do well in the
competition!

** Dealing with the text data

The data for this competition has a few variables composed of
unstructured text data. You should be comfortable using the *bag of
words* approach on text data from Unit 5, and we want to encourage you
to use this data to improve your predictive models. However, you need
to deal with the text data for this competition in a slightly
different way from how we have dealt with text data in the past,
because it is already split into a training set and a test set.

This [[https://courses.edx.org/asset-v1:MITx%2B15.071x_2a%2B2T2015%2Btype@asset%2Bblock/KCompetition_TextData.R][R script file]] is designed to help you get started working with
some the text data provided in the eBay dataset. If you have any
questions about the approach used in the script file, please go to the
Dicussion forum to get help by following the link below.

Remember that this script file is just designed to help you get
started. You will need to build better models to do well in the
competition!

** Example R script

*** KAGGLE COMPETITION - GETTING STARTED

This script file is intended to help you get started on the Kaggle
platform, and to show you how to make a submission to the
competition.

*** Let's start by reading the data into R

Make sure you have downloaded these files from the Kaggle website,
and have navigated to the directory where you saved the files on
your computer

We are adding in the argument ~stringsAsFactors = FALSE~, since we have
some text fields

#+begin_src R :session :results output :exports all
  eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
  eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
#+end_src

#+RESULTS:

We will just create a simple logistic regression model, to predict
Sold using Price:

#+begin_src R :session :results output :exports all
  SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
#+end_src

#+RESULTS:

And then make predictions on the test set:

#+begin_src R :session :results output :exports all
  PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
#+end_src

#+RESULTS:

We can't compute the ~accuracy~ or ~AUC~ on the test set ourselves,
since we don't have the dependent variable on the test set (you can
compute it on the training set though!).

However, you can submit the file on Kaggle to see how well the
model performs. You can make up to 5 submissions per day, so don't
hesitate to just upload a solution to see how you did.

Let's prepare a submission file for Kaggle (for more about this,
see the "Evaluation" page on the competition site):

#+begin_src R :session :results output :exports all
  MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                             = PredTest)

  write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
            = FALSE)
#+end_src

#+RESULTS:

You should upload the submission ~SubmissionSimpleLog.csv~ on the
Kaggle website to use this as a submission to the competition

This model was just designed to help you get started - to do well
in the competition, you will need to build better models!

* Test your analytics skills by predicting which iPads listed on eBay will be sold

*IMPORTANT NOTE*: This competition is only open to students of the
MITx free, online course 15.071x - The Analytics Edge.

*What makes an eBay listing successful?*

Sellers on online auction websites need to understand the
characteristics of a successful item listing to maximize their
revenue. Buyers might also be interested in understanding which
listings are less attractive so as to score a good deal. In this
competition, we challenge you to develop an analytics model that will
help buyers and sellers predict the sales success of a set of eBay
listings for Apple iPads from spring 2015.

The following screenshot shows an example of iPad listings on eBay:

[[../graphs/ScreenshotEbay.png]]

To download the data and learn how this competition works, please be
sure to read the "Data" page, as well as the "Evaluation" page, which
can both be found in the panel on the left.

** Acknowledgments

This competition is brought to you by MITx and edX.

* Understanding the data

** Download the data sets

In this part we can download the data

#+BEGIN_SRC R :session :results output :exports all
  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
  c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
  "https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
  "https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

  fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  writeLines("\n :: Files downloaded...")
#+END_SRC

#+RESULTS:
:
:  :: Files downloaded...

** File descriptions

The data provided for this competition is split into two files:

- *eBayiPadTrain.csv* = the training data set. It consists of 1861 listings.

- *eBayiPadTest.csv* = the testing data set. It consists of 798 listings.

- We have also provided a sample submission file,
  *SampleSubmission.csv*. This file gives an example of the format of
  submission files (see the Evaluation page for more information). The
  data for this competition comes from eBay.com.

** Data fields or data features available

The dependent variable in this problem is the variable sold, which
labels if an iPad listed on the eBay site was sold (equal to 1 if it
did, and 0 if it did not). The dependent variable is provided in the
training data set, but not the testing dataset. This is an important
difference from what you are used to - you will not be able to see how
well your model does on the test set until you make a submission on
Kaggle.

The independent variables consist of 9 pieces of product data
available at the time the iPad listing is posted, and a unique
identifier:

- *description* = The text description of the product provided by the
  seller.

- *biddable* = Whether this is an auction (biddable=1) or a sale with
  a fixed price (biddable=0).

- *startprice* = The start price (in US Dollars) for the auction (if
  biddable=1) or the sale price (if biddable=0).

- *condition* = The condition of the product (new, used, etc.)

- *cellular* = Whether the iPad has cellular connectivity (cellular=1)
  or not (cellular=0).

- *carrier* = The cellular carrier for which the iPad is equipped (if
  cellular=1); listed as "None" if cellular=0.

- *color* = The color of the iPad.

- *storage* = The iPad's storage capacity (in gigabytes).

- *productline* = The name of the product being sold.

** Load the necessary libraries

#+begin_src R :session :results output :exports all
  writeLines("\n :: Loading the necessary libraries...")
  library(caret)                          # ML interface to many
                                          # functions

  library(ggplot2)                        # Graphical libraries

  library(caTools)                        # Partition data sets

  library(parallel)                       # Parallel computation

  library(mice)                           # Imputation library
#+end_src

#+RESULTS:
:
:  :: Loading the necessary libraries...

** Inspecting the data set

Lets begin researching in the training data set.

#+BEGIN_SRC R :session :results output :exports all
  writeLines("    The structure of the training data set:")
  str(eBayDS)
#+END_SRC

#+RESULTS:
#+begin_example
    The structure of the training data set:
'data.frame':	1861 obs. of  11 variables:
 $ description: chr  "iPad is in 8.5+ out of 10 cosmetic condition!" "Previously used, please read description. May show signs of use such as scratches to the screen and " "" "" ...
 $ biddable   : int  0 1 0 0 0 1 1 0 1 1 ...
 $ startprice : num  159.99 0.99 199.99 235 199.99 ...
 $ condition  : chr  "Used" "Used" "Used" "New other (see details)" ...
 $ cellular   : chr  "0" "1" "0" "0" ...
 $ carrier    : chr  "None" "Verizon" "None" "None" ...
 $ color      : chr  "Black" "Unknown" "White" "Unknown" ...
 $ storage    : chr  "16" "16" "16" "16" ...
 $ productline: chr  "iPad 2" "iPad 2" "iPad 4" "iPad mini 2" ...
 $ sold       : int  0 1 1 0 0 1 1 0 1 1 ...
 $ UniqueID   : int  10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 ...
#+end_example

In this part we can try with different types for the data in order to
have a better understanding of the data and to have the probability to
improve the models. We can assume that some default values must be
changed to the right type.

#+begin_src R :session :results output :exports all
  eBayDS$cellular <- as.integer(eBayDS$cellular)
  eBayDS$storage <- as.integer(eBayDS$storage)

  writeLines("\n :: New structure of the original training set:")
  str(eBayDS)
#+end_src

#+RESULTS:
#+begin_example
Warning message:
NAs introduced by coercion
Warning message:
NAs introduced by coercion

 :: New structure of the original training set:
'data.frame':	1861 obs. of  11 variables:
 $ description: chr  "iPad is in 8.5+ out of 10 cosmetic condition!" "Previously used, please read description. May show signs of use such as scratches to the screen and " "" "" ...
 $ biddable   : int  0 1 0 0 0 1 1 0 1 1 ...
 $ startprice : num  159.99 0.99 199.99 235 199.99 ...
 $ condition  : chr  "Used" "Used" "Used" "New other (see details)" ...
 $ cellular   : int  0 1 0 0 NA 1 0 0 1 0 ...
 $ carrier    : chr  "None" "Verizon" "None" "None" ...
 $ color      : chr  "Black" "Unknown" "White" "Unknown" ...
 $ storage    : int  16 16 16 16 NA 32 16 16 64 32 ...
 $ productline: chr  "iPad 2" "iPad 2" "iPad 4" "iPad mini 2" ...
 $ sold       : int  0 1 1 0 0 1 1 0 1 1 ...
 $ UniqueID   : int  10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 ...
#+end_example

Lets research about the NA values and their impact in the ML road map

#+begin_src R :session :results output :exports all
  writeLines("\n :: Summary of the original training data set:")
  summary(eBayDS)
#+end_src

#+RESULTS:
#+begin_example

 :: Summary of the original training data set:
 description           biddable        startprice      condition
 Length:1861        Min.   :0.0000   Min.   :  0.01   Length:1861
 Class :character   1st Qu.:0.0000   1st Qu.: 80.00   Class :character
 Mode  :character   Median :0.0000   Median :179.99   Mode  :character
                    Mean   :0.4498   Mean   :211.18
                    3rd Qu.:1.0000   3rd Qu.:300.00
                    Max.   :1.0000   Max.   :999.00

    cellular        carrier             color              storage
 Min.   :0.0000   Length:1861        Length:1861        Min.   : 16.00
 1st Qu.:0.0000   Class :character   Class :character   1st Qu.: 16.00
 Median :0.0000   Mode  :character   Mode  :character   Median : 16.00
 Mean   :0.3196                                         Mean   : 34.23
 3rd Qu.:1.0000                                         3rd Qu.: 32.00
 Max.   :1.0000                                         Max.   :128.00
 NA's   :234                                            NA's   :183
 productline             sold           UniqueID
 Length:1861        Min.   :0.0000   Min.   :10001
 Class :character   1st Qu.:0.0000   1st Qu.:10466
 Mode  :character   Median :0.0000   Median :10931
                    Mean   :0.4621   Mean   :10931
                    3rd Qu.:1.0000   3rd Qu.:11396
                    Max.   :1.0000   Max.   :11861
#+end_example

The exist NA values have some serious problems in the CSV generation.

We can work with some imputation algorithms in order to substitute the
NA values.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Multiple imputation")
  eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                         "condition", "storage", "productline")]
  summary(eBaySimple)
#+end_src

#+RESULTS:
#+begin_example

 :: Multiple imputation
    UniqueID        biddable        startprice      condition
 Min.   :10001   Min.   :0.0000   Min.   :  0.01   Length:1861
 1st Qu.:10466   1st Qu.:0.0000   1st Qu.: 80.00   Class :character
 Median :10931   Median :0.0000   Median :179.99   Mode  :character
 Mean   :10931   Mean   :0.4498   Mean   :211.18
 3rd Qu.:11396   3rd Qu.:1.0000   3rd Qu.:300.00
 Max.   :11861   Max.   :1.0000   Max.   :999.00

    storage       productline
 Min.   : 16.00   Length:1861
 1st Qu.: 16.00   Class :character
 Median : 16.00   Mode  :character
 Mean   : 34.23
 3rd Qu.: 32.00
 Max.   :128.00
 NA's   :183
#+end_example

Lets impute the data in order to have a better response.

#+begin_src R :session :results output :exports all
  set.seed(pi)
  imputed <- complete(mice(eBaySimple))
  summary(imputed)
#+end_src

#+RESULTS:
#+begin_example

 iter imp variable
  1   1  storage
  1   2  storage
  1   3  storage
  1   4  storage
  1   5  storage
  2   1  storage
  2   2  storage
  2   3  storage
  2   4  storage
  2   5  storage
  3   1  storage
  3   2  storage
  3   3  storage
  3   4  storage
  3   5  storage
  4   1  storage
  4   2  storage
  4   3  storage
  4   4  storage
  4   5  storage
  5   1  storage
  5   2  storage
  5   3  storage
  5   4  storage
  5   5  storage
    UniqueID        biddable        startprice      condition
 Min.   :10001   Min.   :0.0000   Min.   :  0.01   Length:1861
 1st Qu.:10466   1st Qu.:0.0000   1st Qu.: 80.00   Class :character
 Median :10931   Median :0.0000   Median :179.99   Mode  :character
 Mean   :10931   Mean   :0.4498   Mean   :211.18
 3rd Qu.:11396   3rd Qu.:1.0000   3rd Qu.:300.00
 Max.   :11861   Max.   :1.0000   Max.   :999.00
    storage       productline
 Min.   : 16.00   Length:1861
 1st Qu.: 16.00   Class :character
 Median : 16.00   Mode  :character
 Mean   : 33.94
 3rd Qu.: 32.00
 Max.   :128.00
#+end_example

Lets substitute the imputed values in the original dataframe

#+begin_src R :session :results output :exports all
  writeLines("\n :: Substitute the original values of storage with the imputed values:")
  eBayDS$storage <- imputed$storage
  summary(eBayDS)
#+end_src

#+RESULTS:
#+begin_example

 :: Substitute the original values of storage with the imputed values:
 description           biddable        startprice      condition
 Length:1861        Min.   :0.0000   Min.   :  0.01   Length:1861
 Class :character   1st Qu.:0.0000   1st Qu.: 80.00   Class :character
 Mode  :character   Median :0.0000   Median :179.99   Mode  :character
                    Mean   :0.4498   Mean   :211.18
                    3rd Qu.:1.0000   3rd Qu.:300.00
                    Max.   :1.0000   Max.   :999.00

    cellular        carrier             color              storage
 Min.   :0.0000   Length:1861        Length:1861        Min.   : 16.00
 1st Qu.:0.0000   Class :character   Class :character   1st Qu.: 16.00
 Median :0.0000   Mode  :character   Mode  :character   Median : 16.00
 Mean   :0.3196                                         Mean   : 33.94
 3rd Qu.:1.0000                                         3rd Qu.: 32.00
 Max.   :1.0000                                         Max.   :128.00
 NA's   :234
 productline             sold           UniqueID
 Length:1861        Min.   :0.0000   Min.   :10001
 Class :character   1st Qu.:0.0000   1st Qu.:10466
 Mode  :character   Median :0.0000   Median :10931
                    Mean   :0.4621   Mean   :10931
                    3rd Qu.:1.0000   3rd Qu.:11396
                    Max.   :1.0000   Max.   :11861
#+end_example

** Preprocessing the data

*What are the right steps for the best model generation?*

The problem of the NA existence in the submission CSV file must be
addressed.

*** Partition of the training data set

We need more information about the behavior and performance of the
models, then a reasonable decision is subdivide the training data set
in a new training data set plus a testing set

#+begin_src R :session :results output :exports all
  writeLines("\n :: Split the data:")
  set.seed(pi)

  spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

  eBayTrain <- subset(eBayDS, spl == TRUE)
  eBayTest <- subset(eBayDS, spl == FALSE)

  writeLines("\n :: Dimensions of the training set:")
  dim(eBayTrain)

  writeLines("\n :: Dimensions of the testing set:")
  dim(eBayTest)
#+end_src

#+RESULTS:
:
:  :: Split the data:
:
:  :: Dimensions of the training set:
: [1] 1396   11
:
:  :: Dimensions of the testing set:
: [1] 465  11

** Understanding each type and distribution of the data

#+begin_src R :session :results output :exports all
  writeLines("\n :: Summary of the data:")
  summary(eBayTrain)
#+end_src

#+RESULTS:
#+begin_example

 :: Summary of the data:
 description           biddable        startprice      condition
 Length:1396        Min.   :0.0000   Min.   :  0.01   Length:1396
 Class :character   1st Qu.:0.0000   1st Qu.: 82.97   Class :character
 Mode  :character   Median :0.0000   Median :179.95   Mode  :character
                    Mean   :0.4456   Mean   :211.11
                    3rd Qu.:1.0000   3rd Qu.:300.00
                    Max.   :1.0000   Max.   :948.98

    cellular        carrier             color              storage
 Min.   :0.0000   Length:1396        Length:1396        Min.   : 16.0
 1st Qu.:0.0000   Class :character   Class :character   1st Qu.: 16.0
 Median :0.0000   Mode  :character   Mode  :character   Median : 16.0
 Mean   :0.3139                                         Mean   : 34.3
 3rd Qu.:1.0000                                         3rd Qu.: 32.0
 Max.   :1.0000                                         Max.   :128.0
 NA's   :176
 productline             sold          UniqueID
 Length:1396        Min.   :0.000   Min.   :10001
 Class :character   1st Qu.:0.000   1st Qu.:10453
 Mode  :character   Median :0.000   Median :10906
                    Mean   :0.462   Mean   :10913
                    3rd Qu.:1.000   3rd Qu.:11373
                    Max.   :1.000   Max.   :11861
#+end_example

*** Baseline model

We can plot the dependent variable ~sold~, in order to know their
behavior.

#+begin_src R :session :results output :exports all
  writeLines("\n :: The baseline model:")
  table(eBayTrain$sold)

  writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
  table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
#+end_src

#+RESULTS:
:
:  :: The baseline model:
:
:   0   1
: 751 645
:
:  :: The baseline model accuracy (NOT SOLD) is:
:         0
: 0.5379656

*** Summaries of the probable factor variables

#+begin_src R :session :results output :exports all
  writeLines("\n :: The condition feature summary:")
  table(eBayTrain$condition)

  writeLines("\n :: Any NA values:")
  anyNA(eBayTrain$condition)

  writeLines("\n :: The carrier feature supplier summary:")
  table(eBayTrain$carrier)

  writeLines("\n :: Any NA values:")
  anyNA(eBayTrain$carrier)

  writeLines("\n :: The color of iPads:")
  table(eBayTrain$color)

  writeLines("\n :: Any NA values:")
  anyNA(eBayTrain$color)

  writeLines("\n :: The product line:")
  table(eBayTrain$productline)

  writeLines("\n :: Any NA values:")
  anyNA(eBayTrain$productline)
#+end_src

#+RESULTS:
#+begin_example

 :: The condition feature summary:

For parts or not working Manufacturer refurbished                      New
                     129                       29                      224
 New other (see details)       Seller refurbished                     Used
                      64                       79                      871

 :: Any NA values:
[1] FALSE

 :: The carrier feature supplier summary:

    AT&T     None    Other   Sprint T-Mobile  Unknown  Verizon
     151      840        3       23       12      262      105

 :: Any NA values:
[1] FALSE

 :: The color of iPads:

     Black       Gold Space Gray    Unknown      White
       314         61        150        546        325

 :: Any NA values:
[1] FALSE

 :: The product line:

          iPad 1           iPad 2           iPad 3           iPad 4
             175              222              113              115
          iPad 5         iPad Air       iPad Air 2        iPad mini
               1              127              132              199
     iPad mini 2      iPad mini 3 iPad mini Retina          Unknown
              85               70                5              152

 :: Any NA values:
[1] FALSE
#+end_example

*** What type of deal (auction) is better sold?

#+begin_src R :session :results output :exports all
  writeLines("\n :: Is an auction a better deal for customers?")
  ## biddable as rows and sold as columns
  m <- table(eBayTrain$biddable, eBayTrain$sold)
  m

  writeLines("\n :: The proportion of auctions sold:")
  m[2, 2] / (m[1, 2] + m[2, 2])
#+end_src

#+RESULTS:
:
:  :: Is an auction a better deal for customers?
:
:       0   1
:   0 611 163
:   1 140 482
:
:  :: The proportion of auctions sold:
: [1] 0.7472868

We understand that the auctions have a proportion of $74.4\%$ of
*success in sales*.

*** What is the sold products vs condition?

#+begin_src R :session :results output :exports all
  writeLines("\n :: The condiction of the product vs. the sold outcome:")
  table(eBayTrain$condition, eBayTrain$sold)
#+end_src

#+RESULTS:
#+begin_example

 :: The condiction of the product vs. the sold outcome:

                             0   1
  For parts or not working  56  73
  Manufacturer refurbished  17  12
  New                      157  67
  New other (see details)   36  28
  Seller refurbished        55  24
  Used                     430 441
#+end_example

The most sold product by condition is *used*. Now if we can see what is
the proportion of used products as an auction.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Proportion of used vs auction:")
  table(eBayTrain$condition, eBayTrain$biddable)
#+end_src

#+RESULTS:
#+begin_example

 :: Proportion of used vs auction:

                             0   1
  For parts or not working  55  74
  Manufacturer refurbished  22   7
  New                      163  61
  New other (see details)   40  24
  Seller refurbished        61  18
  Used                     433 438
#+end_example

We can see that the people prefer to sell their products with an fixed
*expected price*. Besides, all the used offers as auctions was *sold*,
and *only 10 non auction offers was sold*.

*** Is the cellular feature important for the customer?

#+begin_src R :session :results output :exports all
  writeLines("\n :: Cellular feature vs. the sold outcome:")
  m <- table(eBayTrain$cellular, eBayTrain$sold)
  m

  writeLines("\n :: The proportion of products with cellular feature sold is:")
  m[2, 2] / (m[2, 1] + m[2, 2])
#+end_src

#+RESULTS:
:
:  :: Cellular feature vs. the sold outcome:
:
:       0   1
:   0 416 421
:   1 225 158
:
:  :: The proportion of products with cellular feature sold is:
: [1] 0.4125326

This result said us that the *cellular feature it is NOT the most
important* feature for customers.

*** Is the color important for the customer?

#+begin_src R :session :results output :exports all
  writeLines("\n :: How much is the importance of the color?")
  table(eBayTrain$color, eBayTrain$sold)
#+end_src

#+RESULTS:
:
:  :: How much is the importance of the color?
:
:                0   1
:   Black      151 163
:   Gold        43  18
:   Space Gray  82  68
:   Unknown    288 258
:   White      187 138

The vast majority prefer products in *black and white or don't care*.

*** Is the capacity an important feature to buy?

#+begin_src R :session :results output :exports all
  writeLines("\n :: Storage capacity vs. sold:")
  m <- table(eBayTrain$storage, eBayTrain$sold)
  m

  writeLines("\n :: The proportion of 16GB storage sold:")
  m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
#+end_src

#+RESULTS:
#+begin_example

 :: Storage capacity vs. sold:

        0   1
  16  409 378
  32  144 123
  64  142 124
  128  56  20

 :: The proportion of 16GB storage sold:
[1] 0.5860465
#+end_example

*The majority of people has bought their equipment with 16GB of ram*.

*** What is the most sold product?

#+begin_src R :session :results output :exports all
  writeLines("\n :: Products sold:")
  table(eBayTrain$productline, eBayTrain$sold)
#+end_src

#+RESULTS:
#+begin_example

 :: Products sold:

                     0   1
  iPad 1            77  98
  iPad 2           111 111
  iPad 3            49  64
  iPad 4            68  47
  iPad 5             0   1
  iPad Air          72  55
  iPad Air 2        74  58
  iPad mini        107  92
  iPad mini 2       47  38
  iPad mini 3       48  22
  iPad mini Retina   4   1
  Unknown           94  58
#+end_example

The best sold product is the *iPad 2*.

** Correlation between variables

#+BEGIN_SRC R :var basename="eBayFeaturePlot" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  featurePlot(x = eBayTrain[, c("biddable", "startprice", "condition",
                                "cellular", "carrier", "color",
                                "storage", "productline")], y =
                                       eBayTrain$sold, plot = "pairs")
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION:  eBay feature plot
#+NAME:     fig:eBayFeaturePlot
#+ATTR_LaTeX: placement: [H]
[[../graphs/eBayFeaturePlot.png]]

For the selected features we can try to understand the behavior vs the
~sold~ feature.

#+BEGIN_SRC R :var basename="eBaySoldVsBiddableCor" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  ggplot(eBayTrain, aes(x = biddable, y = sold, color = productline)) + geom_point()
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION:  Correlation between the sold and biddable features
#+NAME:     fig:eBaySoldVsBiddableCor
#+ATTR_LaTeX: placement: [H]
[[../graphs/eBaySoldVsBiddableCor.png]]

** Logistic regression model

The first logistic regression model

#+begin_src R :session :results output :exports all
  writeLines("\n :: Create a logistic regression model to predict sold using
  all the independent variables:")

  eBayLR01 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                          cellular + carrier + color + storage +
                          productline, data = eBayTrain, family = binomial)

  summary(eBayLR01)
#+end_src

#+RESULTS:
#+begin_example

 :: Create a logistic regression model to predict sold using
all the independent variables:

Call:
glm(formula = sold ~ UniqueID + biddable + startprice + condition +
    cellular + carrier + color + storage + productline, family = binomial,
    data = eBayTrain)

Deviance Residuals:
    Min       1Q   Median       3Q      Max
-2.6488  -0.6806  -0.1348   0.5769   3.0457

Coefficients: (1 not defined because of singularities)
                                    Estimate Std. Error z value Pr(>|z|)
(Intercept)                        4.120e+00  2.108e+00   1.955 0.050631 .
UniqueID                          -4.045e-04  1.763e-04  -2.294 0.021788 *
biddable                           1.283e+00  1.820e-01   7.050 1.79e-12 ***
startprice                        -1.643e-02  1.549e-03 -10.603  < 2e-16 ***
conditionManufacturer refurbished  1.805e+00  6.164e-01   2.929 0.003405 **
conditionNew                       1.914e+00  4.940e-01   3.874 0.000107 ***
conditionNew other (see details)   1.539e+00  5.619e-01   2.738 0.006172 **
conditionSeller refurbished        2.669e-01  4.921e-01   0.542 0.587573
conditionUsed                      8.768e-01  3.609e-01   2.430 0.015116 *
cellular                          -2.504e-01  2.604e-01  -0.962 0.336165
carrierNone                               NA         NA      NA       NA
carrierOther                       1.220e+01  5.354e+02   0.023 0.981827
carrierSprint                      1.062e+00  6.653e-01   1.596 0.110572
carrierT-Mobile                   -1.272e+00  9.098e-01  -1.398 0.162079
carrierUnknown                     2.042e-01  4.261e-01   0.479 0.631867
carrierVerizon                     3.776e-01  3.696e-01   1.022 0.306955
colorGold                         -7.207e-01  5.445e-01  -1.323 0.185678
colorSpace Gray                   -1.227e-01  3.171e-01  -0.387 0.698775
colorUnknown                      -1.602e-01  2.109e-01  -0.760 0.447530
colorWhite                        -1.619e-01  2.304e-01  -0.703 0.482230
storage                            1.665e-02  3.893e-03   4.276 1.90e-05 ***
productlineiPad 2                  7.344e-01  2.933e-01   2.504 0.012289 *
productlineiPad 3                  1.608e+00  3.740e-01   4.298 1.72e-05 ***
productlineiPad 4                  1.745e+00  4.129e-01   4.225 2.39e-05 ***
productlineiPad 5                  3.670e+00  7.572e+02   0.005 0.996133
productlineiPad Air                3.091e+00  4.860e-01   6.359 2.04e-10 ***
productlineiPad Air 2              5.116e+00  6.203e-01   8.248  < 2e-16 ***
productlineiPad mini               9.630e-01  3.194e-01   3.015 0.002571 **
productlineiPad mini 2             2.328e+00  4.530e-01   5.140 2.75e-07 ***
productlineiPad mini 3             2.958e+00  5.954e-01   4.969 6.73e-07 ***
productlineiPad mini Retina        2.680e+00  1.251e+00   2.142 0.032215 *
productlineUnknown                -3.129e-01  5.388e-01  -0.581 0.561397
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1688.1  on 1219  degrees of freedom
Residual deviance: 1009.9  on 1189  degrees of freedom
  (176 observations deleted due to missingness)
AIC: 1071.9

Number of Fisher Scoring iterations: 12
#+end_example

The most important features are:

- ~UniqueID~
- ~biddable~
- ~startprice~
- ~condition~
- ~storage~
- ~productline~

We can rebuild the model only with these variables:

#+begin_src R :session :results output :exports all
  writeLines("\n :: Create a logistic regression model to predict sold using
  the selected independent variables:")

  eBayLR02 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                          storage + productline, data = eBayTrain,
                  family = binomial)
  summary(eBayLR02)
#+end_src

#+RESULTS:
#+begin_example

 :: Create a logistic regression model to predict sold using
the selected independent variables:

Call:
glm(formula = sold ~ UniqueID + biddable + startprice + condition +
    storage + productline, family = binomial, data = eBayTrain)

Deviance Residuals:
    Min       1Q   Median       3Q      Max
-2.3042  -0.7233  -0.2312   0.6140   3.1678

Coefficients:
                                    Estimate Std. Error z value Pr(>|z|)
(Intercept)                        5.749e+00  1.875e+00   3.066 0.002168 **
UniqueID                          -5.397e-04  1.585e-04  -3.406 0.000660 ***
biddable                           1.434e+00  1.581e-01   9.072  < 2e-16 ***
startprice                        -1.172e-02  1.102e-03 -10.637  < 2e-16 ***
conditionManufacturer refurbished  1.047e+00  5.553e-01   1.885 0.059452 .
conditionNew                       5.905e-01  3.713e-01   1.590 0.111722
conditionNew other (see details)   8.191e-01  4.698e-01   1.744 0.081225 .
conditionSeller refurbished       -1.963e-01  4.175e-01  -0.470 0.638277
conditionUsed                      2.471e-01  2.913e-01   0.848 0.396270
storage                            1.045e-02  3.324e-03   3.144 0.001667 **
productlineiPad 2                  4.338e-01  2.587e-01   1.677 0.093631 .
productlineiPad 3                  1.144e+00  3.281e-01   3.489 0.000485 ***
productlineiPad 4                  1.097e+00  3.532e-01   3.107 0.001893 **
productlineiPad 5                  1.371e+01  3.247e+02   0.042 0.966318
productlineiPad Air                2.043e+00  3.850e-01   5.306 1.12e-07 ***
productlineiPad Air 2              3.676e+00  4.848e-01   7.582 3.41e-14 ***
productlineiPad mini               6.096e-01  2.812e-01   2.168 0.030154 *
productlineiPad mini 2             1.571e+00  3.890e-01   4.038 5.40e-05 ***
productlineiPad mini 3             2.226e+00  5.083e-01   4.378 1.20e-05 ***
productlineiPad mini Retina        1.616e+00  1.172e+00   1.378 0.168052
productlineUnknown                 1.252e-01  2.938e-01   0.426 0.670058
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1927.2  on 1395  degrees of freedom
Residual deviance: 1244.9  on 1375  degrees of freedom
AIC: 1286.9

Number of Fisher Scoring iterations: 11
#+end_example

** Testing the model with the new testing data set

We will change the type for the testing set:

#+begin_src R :session :results output :exports all
  writeLines("\n :: Converting data types in the dataframe...")

  eBayTest$cellular <- as.integer(eBayTest$cellular)
  eBayTest$storage <- as.integer(eBayTest$storage)

  writeLines("\n :: eBayTest new structure:")
  str(eBayTest)
#+end_src

#+RESULTS:
#+begin_example

 :: Converting data types in the dataframe...

 :: eBayTest new structure:
'data.frame':	465 obs. of  11 variables:
 $ description: chr  "" "" "\x89\xdbω\xdb\xcfCustomer or Carrier Return. Cosmetic condition is 9.5 of 10.\x89 NOT IN ORIGINAL BOX\x89""| __truncated__ "We are selling good quality iPads that have been fully tested by an Apple Certified Technician. The " ...
 $ biddable   : int  0 0 0 0 0 0 0 0 0 1 ...
 $ startprice : num  235 75 310 300 225 ...
 $ condition  : chr  "New other (see details)" "Used" "New other (see details)" "Seller refurbished" ...
 $ cellular   : int  0 0 0 0 1 0 1 0 0 1 ...
 $ carrier    : chr  "None" "None" "None" "None" ...
 $ color      : chr  "Unknown" "Black" "White" "Unknown" ...
 $ storage    : int  16 16 32 32 32 32 64 32 16 16 ...
 $ productline: chr  "iPad mini 2" "iPad 1" "iPad 4" "iPad Air" ...
 $ sold       : int  0 1 0 0 1 0 1 0 0 1 ...
 $ UniqueID   : int  10004 10014 10029 10033 10037 10038 10045 10047 10053 10064 ...
#+end_example

* Prepare a temporal the CSV file for submission

And then make predictions on the test set. We will change the type for
the testing set:

#+begin_src R :session :results output :exports all
  writeLines("\n :: Converting data types in the dataframe...")

  eBayValidation$cellular <- as.integer(eBayValidation$cellular)
  eBayValidation$storage <- as.integer(eBayValidation$storage)

  writeLines("\n :: eBayValidation new structure:")
  str(eBayValidation)
#+end_src

#+RESULTS:
#+begin_example

 :: Converting data types in the dataframe...
Warning message:
NAs introduced by coercion
Warning message:
NAs introduced by coercion

 :: eBayValidation new structure:
'data.frame':	798 obs. of  10 variables:
 $ description: chr  "like new" "Item is in great shape. I upgraded to the iPad Air 2 and don&#039;t need the mini any longer, even though " "This iPad is working and is tested 100%. It runs great. It is in good condition. Cracked digitizer." "" ...
 $ biddable   : int  0 0 0 1 0 0 0 0 0 1 ...
 $ startprice : num  105 195 220 100 211 ...
 $ condition  : chr  "Used" "Used" "Used" "Used" ...
 $ cellular   : int  1 0 0 0 0 0 0 0 0 0 ...
 $ carrier    : chr  "AT&T" "None" "None" "None" ...
 $ color      : chr  "Unknown" "Unknown" "Unknown" "Unknown" ...
 $ storage    : int  32 16 64 16 32 64 32 16 16 32 ...
 $ productline: chr  "iPad 1" "iPad mini 2" "iPad 3" "iPad mini" ...
 $ UniqueID   : int  11862 11863 11864 11865 11866 11867 11868 11869 11870 11871 ...
#+end_example

Lets impute the data in order to have a better response.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Multiple imputation")
  eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                         "condition", "storage", "productline")]
  summary(eBaySimple)

  set.seed(pi)
  imputed <- complete(mice(eBaySimple))
  ## summary(imputed)

  writeLines("\n :: Substitute the original values of storage with the imputed values:")
  eBayValidation$storage <- imputed$storage
  summary(eBayValidation)
#+end_src

#+RESULTS:
#+begin_example

 :: Multiple imputation
    UniqueID        biddable        startprice       condition
 Min.   :11862   Min.   :0.0000   Min.   :   0.01   Length:798
 1st Qu.:12061   1st Qu.:0.0000   1st Qu.:  89.24   Class :character
 Median :12260   Median :0.0000   Median : 179.00   Mode  :character
 Mean   :12260   Mean   :0.4712   Mean   : 208.64
 3rd Qu.:12460   3rd Qu.:1.0000   3rd Qu.: 289.00
 Max.   :12659   Max.   :1.0000   Max.   : 999.99

    storage       productline
 Min.   : 16.00   Length:798
 1st Qu.: 16.00   Class :character
 Median : 16.00   Mode  :character
 Mean   : 34.86
 3rd Qu.: 64.00
 Max.   :128.00
 NA's   :81

 iter imp variable
  1   1  storage
  1   2  storage
  1   3  storage
  1   4  storage
  1   5  storage
  2   1  storage
  2   2  storage
  2   3  storage
  2   4  storage
  2   5  storage
  3   1  storage
  3   2  storage
  3   3  storage
  3   4  storage
  3   5  storage
  4   1  storage
  4   2  storage
  4   3  storage
  4   4  storage
  4   5  storage
  5   1  storage
  5   2  storage
  5   3  storage
  5   4  storage
  5   5  storage
    UniqueID        biddable        startprice       condition
 Min.   :11862   Min.   :0.0000   Min.   :   0.01   Length:798
 1st Qu.:12061   1st Qu.:0.0000   1st Qu.:  89.24   Class :character
 Median :12260   Median :0.0000   Median : 179.00   Mode  :character
 Mean   :12260   Mean   :0.4712   Mean   : 208.64
 3rd Qu.:12460   3rd Qu.:1.0000   3rd Qu.: 289.00
 Max.   :12659   Max.   :1.0000   Max.   : 999.99
    storage       productline
 Min.   : 16.00   Length:798
 1st Qu.: 16.00   Class :character
 Median : 16.00   Mode  :character
 Mean   : 35.41
 3rd Qu.: 64.00
 Max.   :128.00

 :: Substitute the original values of storage with the imputed values:
 description           biddable        startprice       condition
 Length:798         Min.   :0.0000   Min.   :   0.01   Length:798
 Class :character   1st Qu.:0.0000   1st Qu.:  89.24   Class :character
 Mode  :character   Median :0.0000   Median : 179.00   Mode  :character
                    Mean   :0.4712   Mean   : 208.64
                    3rd Qu.:1.0000   3rd Qu.: 289.00
                    Max.   :1.0000   Max.   : 999.99

    cellular        carrier             color              storage
 Min.   :0.0000   Length:798         Length:798         Min.   : 16.00
 1st Qu.:0.0000   Class :character   Class :character   1st Qu.: 16.00
 Median :0.0000   Mode  :character   Mode  :character   Median : 16.00
 Mean   :0.2938                                         Mean   : 35.41
 3rd Qu.:1.0000                                         3rd Qu.: 64.00
 Max.   :1.0000                                         Max.   :128.00
 NA's   :107
 productline           UniqueID
 Length:798         Min.   :11862
 Class :character   1st Qu.:12061
 Mode  :character   Median :12260
                    Mean   :12260
                    3rd Qu.:12460
                    Max.   :12659
#+end_example

Now we will apply the new model to the validation data

#+begin_src R :session :results output :exports all
  writeLines("\n :: Probabilities test vector generation:")
  PredTest <- predict(eBayLR02, newdata = eBayValidation, type = "response")

  summary(PredTest)
#+end_src

#+RESULTS:
:
:  :: Probabilities test vector generation:
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.
: 0.0000121 0.0970800 0.2313000 0.3615000 0.6364000 0.9969000

Let's prepare a submission file for Kaggle (for more about this, see
the "Evaluation" page on the competition site):

#+begin_src R :session :results output :exports all
  MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                             = PredTest)

  write.csv(MySubmission, "../data/SubmissionLR3.csv", row.names =
                                                               FALSE)

  writeLines("\n :: Submission file generated...")
#+end_src

#+RESULTS:
:
:  :: Submission file generated...
