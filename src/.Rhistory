RunsAllowed <- lm(RA ~ OOBP + OSLG, data = moneyball)
summary(RunsAllowed)
'org_babel_R_eoe'
OBP <- 0.311; SLG <- 0.405
RSTest <- data.frame(OBP, SLG)
predict(RunsReg, newdata = RSTest)
'org_babel_R_eoe'
OOBP <- 0.297; OSLG <- 0.370
RATest <- data.frame(OOBP, OSLG)
predict(RunsAllowed, newdata = RATest)
'org_babel_R_eoe'
OBP <- 0.339; SLG <- 0.430
RS2002 <- data.frame(OBP, SLG)
predict(RunsReg, newdata = RS2002)
'org_babel_R_eoe'
OOBP <- 0.307; OSLG <- 0.373
RA2002 <- data.frame(OOBP, OSLG)
predict(RunsAllowed, newdata = RA2002)
'org_babel_R_eoe'
OBP <- c(0.338, 0.391, 0.369, 0.313, 0.361)
SLG <- c(0.540, 0.450, 0.374, 0.447, 0.500)
PlayerName <- c("Eric Chavez", "Jeremy Giambi", "Frank Menechino",
                "Greg Myers", "Carlos Pena")
Salary <- c(1400000, 1065000, 295000, 800000, 300000)

RSnewPlayers <- data.frame(PlayerName, OBP, SLG, Salary)
RSnewPlayers$RSPred <- predict(RunsReg, newdata = RSnewPlayers)
RSnewPlayers

writeLines("\n :: For the best players with the budget restriction:")
RSnewPlayers$Salary[2] + RSnewPlayers$Salary[5]
'org_babel_R_eoe'
teamRank = c(1, 2, 3, 3, 4, 4, 4, 4, 5, 5)
'org_babel_R_eoe'
wins2012 <- c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
'org_babel_R_eoe'
wins2013 <- c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
'org_babel_R_eoe'
writeLines("\n :: Correlation between teamRank and wins2012")
cor(teamRank, wins2012)
'org_babel_R_eoe'
writeLines("\n :: Correlation between teamRank and wins2013")
cor(teamRank, wins2013)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/NBA_train.csv", "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/NBA_test.csv")

fileName <- c("NBA_train.csv", "NBA_test.csv")

dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the data")
NBA <- read.table("../data/NBA_train.csv", sep = ",", header = TRUE)
str(NBA)
summary(NBA)
'org_babel_R_eoe'
writeLines("\n :: How many wins to make the playoffs?")
head(table(NBA$W, NBA$Playoffs), 15)
'org_babel_R_eoe'
writeLines("\n :: How many wins to make the playoffs?")
tail(table(NBA$W, NBA$Playoffs), 15)
'org_babel_R_eoe'
writeLines("\n ::Compute Points Difference")
NBA$PTSdiff <- NBA$PTS - NBA$oppPTS
'org_babel_R_eoe'
writeLines("\n :: Linear regression model for wins")
WinsReg <- lm(W ~ PTSdiff, data = NBA)
summary(WinsReg)
'org_babel_R_eoe'
writeLines("\n :: Linear regression model for points scored")
PointsReg <- lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + TOV + STL + BLK, data = NBA)
summary(PointsReg)
'org_babel_R_eoe'
writeLines("\n :: Residuals:")
head(PointsReg$residuals, 20)

writeLines("\n :: Sum of Squared Errors:")
SSE <- sum(PointsReg$residuals^2)
SSE
'org_babel_R_eoe'
writeLines("\n :: Root mean squared error")
RMSE <- sqrt(SSE / nrow(NBA))
RMSE
'org_babel_R_eoe'
writeLines("\n :: Average number of points in a season")
mean(NBA$PTS)
'org_babel_R_eoe'
summary(PointsReg)
'org_babel_R_eoe'
PointsReg2 <- lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + DRB + STL +
                         BLK, data = NBA)
summary(PointsReg2)
'org_babel_R_eoe'
PointsReg3 <- lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL + BLK, data
                 = NBA)
summary(PointsReg3)
'org_babel_R_eoe'
PointsReg4 <- lm(PTS ~ X2PA + X3PA + FTA + AST + ORB + STL, data =
                                                                    NBA)
summary(PointsReg4)
'org_babel_R_eoe'
writeLines("\n :: Compute SSE and RMSE for new model")
SSE_4 <- sum(PointsReg4$residuals^2)
RMSE_4 <- sqrt(SSE_4/nrow(NBA))
SSE_4
RMSE_4
'org_babel_R_eoe'
writeLines("\n :: Read the data of the test data set")
NBA_test <- read.table("../data/NBA_test.csv", sep = ",", header = TRUE)
str(NBA_test)
summary(NBA_test)
'org_babel_R_eoe'
writeLines("\n :: Make predictions on test set")
PointsPredictions = predict(PointsReg4, newdata=NBA_test)
'org_babel_R_eoe'
writeLines("\n :: Compute out-of-sample R^2")
SSE <- sum((PointsPredictions - NBA_test$PTS)^2)
SST <- sum((mean(NBA$PTS) - NBA_test$PTS)^2)
R2 <- 1 - (SSE/SST)
R2
'org_babel_R_eoe'
writeLines("\n :: Compute the RMSE")
RMSE <- sqrt(SSE/nrow(NBA_test))
RMSE
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/climate_change.csv")

fileName <- c("climate_change.csv")

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read in data")
climateChange <- read.table("../data/climate_change.csv", sep = ",", header = TRUE)
str(climateChange)
summary(climateChange)
'org_babel_R_eoe'
training <- subset(climateChange, Year <= 2006)

writeLines("\n :: Exploratory data analysis for the training dataframe")
str(training)
summary(training)
'org_babel_R_eoe'
test <- subset(climateChange, Year > 2006)
str(test)
summary(test)
'org_babel_R_eoe'
writeLines("\n :: Linear regression model for Climate Change")
tempReg <- lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI +
                      Aerosols, data = training)
summary(tempReg)
'org_babel_R_eoe'
cor(training, use="complete.obs")
'org_babel_R_eoe'
writeLines("\n :: Linear regression model for Climate Change")
tempReg2 <- lm(Temp ~ MEI + TSI + Aerosols + N2O, data = training)
summary(tempReg2)
'org_babel_R_eoe'
writeLines("\n :: Optimizing the linear regression model for Climate Change")
tempReg3 <- step(tempReg)
summary(tempReg3)
'org_babel_R_eoe'
writeLines("\n :: Make test set predictions")
predictTest <- predict(tempReg3, newdata = test)
predictTest
'org_babel_R_eoe'
writeLines("\n :: Compute out-of-sample R^2")
SSE <- sum((predictTest - test$Temp)^2)
SST <- sum((mean(training$Temp) - test$Temp)^2)
R2 <- 1 - (SSE/SST)
R2
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/pisa2009train.csv", "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/pisa2009test.csv")

fileName <- c("pisa2009train.csv", "pisa2009test.csv")

dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the training data set")
pisaTrain <- read.table("../data/pisa2009train.csv", sep = ",", header = TRUE)
str(pisaTrain)
summary(pisaTrain)

writeLines("\n\n :: Read the test data set: DO NOT SEE THE DATA!")
pisaTest <- read.table("../data/pisa2009test.csv", sep = ",", header = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Number of students in the training data set")
nrow(pisaTrain)
'org_babel_R_eoe'
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
'org_babel_R_eoe'
writeLines("\n :: any NA in the features")
summary(pisaTrain)
'org_babel_R_eoe'
writeLines("\n :: Omiting the non complete observations")
pisaTrain <- na.omit(pisaTrain)
pisaTest <- na.omit(pisaTest)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the training set")
nrow(pisaTrain)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the testing set")
nrow(pisaTest)
'org_babel_R_eoe'
class(pisaTrain$grade)
class(pisaTrain$male)
class(pisaTrain$raceeth)
str(pisaTrain$raceeth)
'org_babel_R_eoe'
class(pisaTrain$raceeth)
str(pisaTrain$raceeth)
summary(pisaTrain$raceeth)
'org_babel_R_eoe'
writeLines("\n :: Exploring the raceeth feature:")
sort(table(pisaTrain$raceeth), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Setting the reference level of the factor to white")
pisaTrain$raceeth <- relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth <- relevel(pisaTest$raceeth, "White")
'org_babel_R_eoe'
lmScore <- lm(readingScore ~ ., data = pisaTrain)
summary(lmScore)
'org_babel_R_eoe'
writeLines("\n :: Sum of Squared Errors")
SSE = sum(lmScore$residuals^2)
SSE

writeLines("\n :: The training-set root-mean squared error (RMSE):")
sqrt(SSE / nrow(pisaTrain))

writeLines("\n :: A alternative way of getting the RMSE value:")
sqrt(mean(lmScore$residuals^2))
'org_babel_R_eoe'
writeLines("\n :: Make test set predictions")
predictRScoreDF <- rbind(pisaTrain[1, ], pisaTrain[1, ])
predictRScoreDF[2, 1] <- 9
predictRScoreDF

predict01 <- predict(lmScore, newdata = predictRScoreDF)
predict01[1] - predict01[2]
'org_babel_R_eoe'
summary(lmScore)
'org_babel_R_eoe'
writeLines("\n :: Make test set predictions")
predTest <- predict(lmScore, newdata = pisaTest)
summary(predTest)
637.7 - 353.2
'org_babel_R_eoe'
writeLines("\n :: Sum of Squared Errors in the testing set")
SSE <- sum((predTest - pisaTest$readingScore)^2)
SSE
'org_babel_R_eoe'
writeLines("\n :: The RMSE of the testing data set is:")
RMSE <- sqrt(SSE / nrow(pisaTest))
RMSE

writeLines("\n :: An alternative for calculation:")
sqrt(mean((predTest-pisaTest$readingScore)^2))
'org_babel_R_eoe'
SSE <- sum((predTest - pisaTest$readingScore)^2)

writeLines("\n :: The predicted test score used in the baseline model:")
mean(pisaTrain$readingScore)

SST <- sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
R2 <- 1 - (SSE/SST)

writeLines("\n :: The SST for the training pisa data set")
SST
'org_babel_R_eoe'
writeLines("\n :: The test-set R-squared value:")
SSE <- sum((predTest - pisaTest$readingScore)^2)
SST <- sum((mean(pisaTrain$readingScore) - pisaTest$readingScore)^2)
R2 <- 1 - (SSE/SST)
R2
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/FluTrain.csv"

fileName <- "FluTrain.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the training data set")
FluTrain <- read.table("../data/FluTrain.csv", sep = ",", header = TRUE)
str(FluTrain)
summary(FluTrain)
'org_babel_R_eoe'
FluTrain[which.max(FluTrain$ILI), ]
'org_babel_R_eoe'
FluTrain[which.max(FluTrain$Queries), ]
'org_babel_R_eoe'
FluTrend1 <- lm(log(ILI) ~ Queries, data = FluTrain)
summary(FluTrend1)
'org_babel_R_eoe'
summary(FluTrend1)
'org_babel_R_eoe'
writeLines("\n :: Relationship between R^2 and Correlation")
Correlation <- cor(log(FluTrain$ILI), FluTrain$Queries)
Correlation^2
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/FluTest.csv"

fileName <- "FluTest.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the testing data set")
FluTest <- read.table("../data/FluTest.csv", sep = ",", header = TRUE)
str(FluTest)
summary(FluTest)
'org_babel_R_eoe'
PredTest1 = exp(predict(FluTrend1, newdata = FluTest))
summary(PredTest1)
'org_babel_R_eoe'
writeLines("\n :: estimate for the percentage of ILI-related physician\nvisits for the week of March 11, 2012:")

FluPredictTest <- cbind(FluTest, PredTest1)
names(FluPredictTest)
FluPredictTest[which(FluPredictTest$Week == "2012-03-11 - 2012-03-17"), 4]
'org_babel_R_eoe'
stmILI <- FluPredictTest[which(FluPredictTest$Week ==
                                       "2012-03-11 - 2012-03-17"), 4]
obsILI <- FluPredictTest[which(FluPredictTest$Week ==
                                       "2012-03-11 - 2012-03-17"), 2]

writeLines("\n :: Relative error for our observation:")
relError <- (obsILI - stmILI) / obsILI
relError
'org_babel_R_eoe'
writeLines("\n :: The RMSE of the testing data set is:")
sqrt(mean((FluPredictTest$PredTest1 - FluPredictTest$ILI)^2))
'org_babel_R_eoe'
library(zoo)
'org_babel_R_eoe'
ILILag2 <- lag(zoo(FluTrain$ILI), -2, na.pad = TRUE)
FluTrain$ILILag2 <- coredata(ILILag2)
'org_babel_R_eoe'
summary(ILILag2)
'org_babel_R_eoe'
FluTrend2 <- lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
summary(FluTrend2)
'org_babel_R_eoe'
ILILag2 <- lag(zoo(FluTest$ILI), -2, na.pad = TRUE)
FluTest$ILILag2 <- coredata(ILILag2)
summary(FluTest$ILILag2)
'org_babel_R_eoe'
tail(FluTrain, 10)
head(FluTest, 10)
'org_babel_R_eoe'
writeLines("\n :: Old values for the FluTest$ILILag2 first two values:")
tail(FluTrain)
head(FluTest)

writeLines("\n :: New first two values for the FluTest$ILILag2:")
FluTest$ILILag2[1] <- FluTrain$ILI[416]
FluTest$ILILag2[2] <- FluTrain$ILI[417]
tail(FluTrain)
head(FluTest)
'org_babel_R_eoe'
PredTest2 <- exp(predict(FluTrend2, newdata = FluTest))
summary(PredTest2)
'org_babel_R_eoe'
writeLines("\n :: The RMSE of the testing data set and the new model is:")
sqrt(mean((PredTest2 - FluTest$ILI)^2))
'org_babel_R_eoe'
data(state)
statedata <- cbind(data.frame(state.x77), state.abb, state.area,
                   state.center, state.division, state.name,
                   state.region)
writeLines("\n :: data set loaded...")
'org_babel_R_eoe'
str(statedata)
'org_babel_R_eoe'
tapply(statedata$HS.Grad, statedata$state.region, mean)
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
'org_babel_R_eoe'
subset(statedata, statedata$state.region ==
                    "Northeast")[which.max(subset(statedata,
                    statedata$state.region == "Northeast")$Murder), ]
'org_babel_R_eoe'
writeLines("\n :: Regression model 1 for life expectancy:")
Life.ExpRM <- lm(Life.Exp ~ Population + Income + Illiteracy + Murder
                 + HS.Grad + Frost + Area, data = statedata)
summary(Life.ExpRM)
'org_babel_R_eoe'
writeLines("\n :: Summary of the model 1")
summary(Life.ExpRM)
'org_babel_R_eoe'
writeLines("\n :: Regression model 2 for life expectancy:")
Life.ExpRM2 <- lm(Life.Exp ~ Population + Income + Illiteracy + Murder
                 + HS.Grad + Frost, data = statedata)
summary(Life.ExpRM2)
'org_babel_R_eoe'
writeLines("\n :: Regression model 3 for life expectancy:")
Life.ExpRM3 <- lm(Life.Exp ~ Population + Income + Murder + HS.Grad +
                          Frost, data = statedata)
summary(Life.ExpRM3)
'org_babel_R_eoe'
writeLines("\n :: Regression model 4 for life expectancy:")
Life.ExpRM4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost,
                  data = statedata)
summary(Life.ExpRM4)
'org_babel_R_eoe'
writeLines("\n :: Prediction data for model 4:")
head(sort(predict(Life.ExpRM4), decreasing = FALSE))
'org_babel_R_eoe'
writeLines("\n :: The state that actually has the lowest life expectancy:")
statedata[which.min(statedata$Life.Exp), 14]
'org_babel_R_eoe'
writeLines("\n :: Prediction data for model 4:")
head(sort(predict(Life.ExpRM4), decreasing = TRUE))
'org_babel_R_eoe'
writeLines("\n :: The state that actually has the lowest life expectancy:")
statedata[which.max(statedata$Life.Exp), 14]
'org_babel_R_eoe'
head(sort(abs(Life.ExpRM4$residuals)))
'org_babel_R_eoe'
head(sort(abs(Life.ExpRM4$residuals), decreasing = TRUE))
'org_babel_R_eoe'
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
names(quality)
head(quality$PoorCare)
plot(quality$OfficeVisits, quality$Narcotics)
q()
n
