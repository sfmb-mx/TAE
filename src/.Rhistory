g <- graph.data.frame(edges, FALSE, users)
g3 <- graph.data.frame(edges, TRUE, users)

writeLines("\n :: Our undirected graph g:")
g
'org_babel_R_eoe'
writeLines("\n :: Calculating the degree of users in the graph:")
sort(degree(g), decreasing = TRUE)

writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
dim(allTweets)
'org_babel_R_eoe'
dim(allTweets)
'org_babel_R_eoe'
names(allTweets)
dim(allTweets)
'org_babel_R_eoe'
q()
n
dim(allTweets)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/edges.csv",
        "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/users.csv")

fileName <- c("edges.csv", "users.csv")
dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the data sets in dataframes...")
edges <- read.csv("../data/edges.csv", na.strings = "")
users <- read.csv("../data/users.csv", na.strings = "")

writeLines("\n :: Revising the edges dataframe structure:")
str(edges)

writeLines("\n :: Revising the users dataframe structure:")
str(users)
'org_babel_R_eoe'
writeLines("\n :: Number of frienship relationships:")
nrow(edges)

writeLines("\n :: Number of users:")
nrow(users)

writeLines("\n :: Average number of friends per user:")
(2 * nrow(edges)) / nrow(users)
'org_babel_R_eoe'
writeLines("\n :: the most common locale for students who listed a school:")
subset(users, users$school == "A" | users$school == "AB")

writeLines("\n :: Other way to answer:")
table(users$locale, users$school)
'org_babel_R_eoe'
writeLines("\n :: Exploratory analysis of the data frame:")
head(users, 20)

writeLines("\n :: Are all students of the same gender in some school?")
table(users$school, users$gender)
'org_babel_R_eoe'
writeLines("\n :: Install new package: igraph ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(igraph)
writeLines("\n :: Library igraph loaded...")
'org_babel_R_eoe'
g <- graph.data.frame(edges, FALSE, users)
g3 <- graph.data.frame(edges, TRUE, users)

writeLines("\n :: Our undirected graph g:")
g
'org_babel_R_eoe'
writeLines("\n :: Calculating the degree of users in the graph:")
sort(degree(g), decreasing = TRUE)

writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
dim(allTweets)
'org_babel_R_eoe'
allTweets[1:15, 1:15]
dim(allTweets)
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:15, 1:15]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:13, 1:13]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Install new package: wordcloud ...")
install.packages('wordcloud', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: wordcloud ...")
## install.packages('wordcloud', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/edges.csv",
        "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/users.csv")

fileName <- c("edges.csv", "users.csv")
dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the data sets in dataframes...")
edges <- read.csv("../data/edges.csv", na.strings = "")
users <- read.csv("../data/users.csv", na.strings = "")

writeLines("\n :: Revising the edges dataframe structure:")
str(edges)

writeLines("\n :: Revising the users dataframe structure:")
str(users)
'org_babel_R_eoe'
writeLines("\n :: Number of frienship relationships:")
nrow(edges)

writeLines("\n :: Number of users:")
nrow(users)

writeLines("\n :: Average number of friends per user:")
(2 * nrow(edges)) / nrow(users)
'org_babel_R_eoe'
writeLines("\n :: the most common locale for students who listed a school:")
subset(users, users$school == "A" | users$school == "AB")

writeLines("\n :: Other way to answer:")
table(users$locale, users$school)
'org_babel_R_eoe'
writeLines("\n :: Exploratory analysis of the data frame:")
head(users, 20)

writeLines("\n :: Are all students of the same gender in some school?")
table(users$school, users$gender)
'org_babel_R_eoe'
writeLines("\n :: Install new package: igraph ...")
## install.packages('igraph', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(igraph)
writeLines("\n :: Library igraph loaded...")
'org_babel_R_eoe'
g <- graph.data.frame(edges, FALSE, users)
## g2 <- graph.data.frame(users, FALSE, edges)
g3 <- graph.data.frame(edges, TRUE, users)
## g4 <- graph.data.frame(users, TRUE, edges)

writeLines("\n :: Our undirected graph g:")
g
'org_babel_R_eoe'
writeLines("\n :: Calculating the degree of users in the graph:")
sort(degree(g), decreasing = TRUE)

writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
## install.packages('rgl', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
## library(SnowballC)
## library(caTools)
## library(rpart)
## library(rpart.plot)
## library(randomForest)
## library(ROCR)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:13, 1:13]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
writeLines("\n :: Install new package: wordcloud ...")
## install.packages('wordcloud', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
head(colnames(allTweets))
'org_babel_R_eoe'
head(colnames(allTweets), 50)
'org_babel_R_eoe'
head(colnames(allTweets), 50)

head(names(allTweets), 50)
'org_babel_R_eoe'
writeLines("\n :: We can pass the column names:")
head(colnames(allTweets), 50)

writeLines("\n :: Is the same as passing the names of the features:")
head(names(allTweets), 50)
'org_babel_R_eoe'
writeLines("\n :: 1) Create a corpus using the Tweet variable...")
corpus <- Corpus(VectorSource(tweets$Tweet))

writeLines("\n :: 2) Convert the corpus to lowercase...")
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)

writeLines("\n :: 3) Remove punctuation from the corpus...")
corpus <- tm_map(corpus, removePunctuation)

writeLines("\n :: 4) Remove all English-language stopwords...")
corpus <- tm_map(corpus, removeWords, c("apple", stopwords("english")))

writeLines("\n :: 5) Build a document-term matrix out of the corpus...")
DocTermMatrix <- DocumentTermMatrix(corpus)

writeLines("\n :: 6) Convert the document-term matrix to a data frame called allTweets...")
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/edges.csv",
        "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/users.csv")

fileName <- c("edges.csv", "users.csv")
dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the data sets in dataframes...")
edges <- read.csv("../data/edges.csv", na.strings = "")
users <- read.csv("../data/users.csv", na.strings = "")

writeLines("\n :: Revising the edges dataframe structure:")
str(edges)

writeLines("\n :: Revising the users dataframe structure:")
str(users)
'org_babel_R_eoe'
writeLines("\n :: Number of frienship relationships:")
nrow(edges)

writeLines("\n :: Number of users:")
nrow(users)

writeLines("\n :: Average number of friends per user:")
(2 * nrow(edges)) / nrow(users)
'org_babel_R_eoe'
writeLines("\n :: the most common locale for students who listed a school:")
subset(users, users$school == "A" | users$school == "AB")

writeLines("\n :: Other way to answer:")
table(users$locale, users$school)
'org_babel_R_eoe'
writeLines("\n :: Exploratory analysis of the data frame:")
head(users, 20)

writeLines("\n :: Are all students of the same gender in some school?")
table(users$school, users$gender)
'org_babel_R_eoe'
writeLines("\n :: Install new package: igraph ...")
## install.packages('igraph', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(igraph)
writeLines("\n :: Library igraph loaded...")
'org_babel_R_eoe'
g <- graph.data.frame(edges, FALSE, users)
## g2 <- graph.data.frame(users, FALSE, edges)
g3 <- graph.data.frame(edges, TRUE, users)
## g4 <- graph.data.frame(users, TRUE, edges)

writeLines("\n :: Our undirected graph g:")
g
'org_babel_R_eoe'
writeLines("\n :: Calculating the degree of users in the graph:")
sort(degree(g), decreasing = TRUE)

writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
## install.packages('rgl', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
## library(SnowballC)
## library(caTools)
## library(rpart)
## library(rpart.plot)
## library(randomForest)
## library(ROCR)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:13, 1:13]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
writeLines("\n :: Install new package: wordcloud ...")
## install.packages('wordcloud', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
writeLines("\n :: We can pass the column names:")
head(colnames(allTweets), 50)

writeLines("\n :: Is the same as passing the names of the features:")
head(names(allTweets), 50)
'org_babel_R_eoe'
colSums(allTweets)
'org_babel_R_eoe'
writeLines("\n :: 1) Create a corpus using the Tweet variable...")
corpus <- Corpus(VectorSource(tweets$Tweet))

writeLines("\n :: 2) Convert the corpus to lowercase...")
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)

writeLines("\n :: 3) Remove punctuation from the corpus...")
corpus <- tm_map(corpus, removePunctuation)

writeLines("\n :: 4) Remove all English-language stopwords...")
corpus <- tm_map(corpus, removeWords, c("apple", stopwords("english")))

writeLines("\n :: 5) Build a document-term matrix out of the corpus...")
DocTermMatrix <- DocumentTermMatrix(corpus)

writeLines("\n :: 6) Convert the document-term matrix to a data frame called allTweets...")
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
head(colSums(allTweets))
'org_babel_R_eoe'
head(colSums(allTweets), 50)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
        c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/edges.csv",
        "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/users.csv")

fileName <- c("edges.csv", "users.csv")
dataPath <- "../data"

for(i in 1:2) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the data sets in dataframes...")
edges <- read.csv("../data/edges.csv", na.strings = "")
users <- read.csv("../data/users.csv", na.strings = "")

writeLines("\n :: Revising the edges dataframe structure:")
str(edges)

writeLines("\n :: Revising the users dataframe structure:")
str(users)
'org_babel_R_eoe'
writeLines("\n :: Number of frienship relationships:")
nrow(edges)

writeLines("\n :: Number of users:")
nrow(users)

writeLines("\n :: Average number of friends per user:")
(2 * nrow(edges)) / nrow(users)
'org_babel_R_eoe'
writeLines("\n :: the most common locale for students who listed a school:")
subset(users, users$school == "A" | users$school == "AB")

writeLines("\n :: Other way to answer:")
table(users$locale, users$school)
'org_babel_R_eoe'
writeLines("\n :: Exploratory analysis of the data frame:")
head(users, 20)

writeLines("\n :: Are all students of the same gender in some school?")
table(users$school, users$gender)
'org_babel_R_eoe'
writeLines("\n :: Install new package: igraph ...")
## install.packages('igraph', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(igraph)
writeLines("\n :: Library igraph loaded...")
'org_babel_R_eoe'
g <- graph.data.frame(edges, FALSE, users)
## g2 <- graph.data.frame(users, FALSE, edges)
g3 <- graph.data.frame(edges, TRUE, users)
## g4 <- graph.data.frame(users, TRUE, edges)

writeLines("\n :: Our undirected graph g:")
g
'org_babel_R_eoe'
writeLines("\n :: Calculating the degree of users in the graph:")
sort(degree(g), decreasing = TRUE)

writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
## install.packages('rgl', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
## library(SnowballC)
## library(caTools)
## library(rpart)
## library(rpart.plot)
## library(randomForest)
## library(ROCR)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:13, 1:13]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
writeLines("\n :: Install new package: wordcloud ...")
## install.packages('wordcloud', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
writeLines("\n :: We can pass the column names:")
head(colnames(allTweets), 50)

writeLines("\n :: Is the same as passing the names of the features:")
head(names(allTweets), 50)
'org_babel_R_eoe'
head(colSums(allTweets), 50)
'org_babel_R_eoe'
writeLines("\n :: 1) Create a corpus using the Tweet variable...")
corpus <- Corpus(VectorSource(tweets$Tweet))

writeLines("\n :: 2) Convert the corpus to lowercase...")
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)

writeLines("\n :: 3) Remove punctuation from the corpus...")
corpus <- tm_map(corpus, removePunctuation)

writeLines("\n :: 4) Remove all English-language stopwords...")
corpus <- tm_map(corpus, removeWords, c("apple", stopwords("english")))

writeLines("\n :: 5) Build a document-term matrix out of the corpus...")
DocTermMatrix <- DocumentTermMatrix(corpus)

writeLines("\n :: 6) Convert the document-term matrix to a data frame called allTweets...")
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
q()
n
