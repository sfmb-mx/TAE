PenaltyMatrix

writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(sum(PenaltyMatrix[1, ]), sum(PenaltyMatrix[2, ]), sum(PenaltyMatrix[3, ]), sum(PenaltyMatrix[4, ]), sum(PenaltyMatrix[5, ]))
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
table(ClaimsTest$bucket2009)
PenaltyMatrix

writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(sum(PenaltyMatrix[1, ]), sum(PenaltyMatrix[2, ]), sum(PenaltyMatrix[3, ]), sum(PenaltyMatrix[4, ]), sum(PenaltyMatrix[5, ]))
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
table(ClaimsTest$bucket2009)
PenaltyMatrix

writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(sum(PenaltyMatrix[1, ]), sum(PenaltyMatrix[2, ]), sum(PenaltyMatrix[3, ]), sum(PenaltyMatrix[4, ]), sum(PenaltyMatrix[5, ]))
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
table(ClaimsTest$bucket2009)
PenaltyMatrix2
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
table(ClaimsTest$bucket2009)
PenaltyMatrix

writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(sum(PenaltyMatrix[1, ]), sum(PenaltyMatrix[2, ]), sum(PenaltyMatrix[3, ]), sum(PenaltyMatrix[4, ]), sum(PenaltyMatrix[5, ]))
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
PenaltyMatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0), byrow=TRUE, nrow=5)
PenaltyMatrix
m = as.matrix(cbind(table(ClaimsTest$bucket2009, p)[,1], rep(0,5), rep(0,5), rep(0,5), rep(0,5)))
sum(m*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Proportion of observations of A:")
A <- 14; B <- 6;
A / (A + B)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/stevens.csv"

fileName <- "stevens.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
stevens <- read.table("../data/stevens.csv", sep = ",", header = TRUE)

str(stevens)
summary(stevens)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
library(caTools)
set.seed(3000)

spl <- sample.split(stevens$Reverse, SplitRatio = 0.7)
Train <- subset(stevens, spl == TRUE)
Test <- subset(stevens, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(Train)

writeLines("\n :: Dimensions of the testing set:")
dim(Test)
'org_babel_R_eoe'
writeLines("\n :: Install new package: rpart ...")

writeLines("\n :: NOTE: Please comment after install once...")

writeLines("\n :: Loading rpart and rpart.plot...")
library(rpart)
library(rpart.plot)

writeLines("\n :: rpart and r.part.plot libraries loaded...")
'org_babel_R_eoe'
writeLines("\n :: CART model DONE...")
StevensTree <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 25)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCART <- predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)

writeLines("\n :: Overall accuracy:")
(41+71)/(41+36+22+71)
'org_babel_R_eoe'
writeLines("\n :: ROC curve:")
library(ROCR)

PredictROC <- predict(StevensTree, newdata = Test)
head(PredictROC)

pred <- prediction(PredictROC[,2], Test$Reverse)
perf <- performance(pred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: The AUC for the CART:")
as.numeric(performance(pred, "auc")@y.values)
'org_babel_R_eoe'
StevensTree2 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 5)

writeLines("\n :: CART model 2 DONE...")
'org_babel_R_eoe'
StevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 100)

writeLines("\n :: CART model 3 DONE...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: randomForest ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(randomForest)
writeLines("\n :: Library randomForest loaded...")
'org_babel_R_eoe'
writeLines("\n :: Build random forest model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Converting outcome to factor...")
Train$Reverse <- as.factor(Train$Reverse)
Test$Reverse <- as.factor(Test$Reverse)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Make predictions in the test set:")
PredictForest <- predict(StevensForest, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest)

writeLines("\n :: Calculate the overall accuracy:")
(40 + 74) / (40 + 37 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest2 <- predict(StevensForest2, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest2)

writeLines("\n :: Calculate the overall accuracy:")
(43 + 74) / (43 + 34 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(200)
StevensForest3 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest3 <- predict(StevensForest3, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest3)

writeLines("\n :: Calculate the overall accuracy:")
(44 + 76) / (44 + 33 + 17 + 76)
'org_babel_R_eoe'
writeLines("\n :: Install new package: Caret and e1071 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(caret)
library(e1071)
writeLines("\n :: Library Caret and e1071 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Define cross-validation experiment:")
numFolds <- trainControl( method = "cv", number = 10 )
cpGrid <- expand.grid(.cp = seq(0.01, 0.5, 0.01))
'org_babel_R_eoe'
writeLines("\n :: Perform the cross validation:")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt
      + Unconst, data = Train, method = "rpart", trControl = numFolds,
      tuneGrid = cpGrid)
'org_babel_R_eoe'
writeLines("\n :: Create a new CART model:")
StevensTreeCV <- rpart(Reverse ~ Circuit + Issue + Petitioner +
                               Respondent + LowerCourt + Unconst, data
                       = Train, method="class", cp = 0.19)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCV <- predict(StevensTreeCV, newdata = Test, type = "class")

table(Test$Reverse, PredictCV)
writeLines("\n :: Calculate the overall accuracy:")
(59 + 64)/(59 + 18 + 29 + 64)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
Claims <- read.table("../data/ClaimsData.csv", sep = ",", header = TRUE)
'org_babel_R_eoe'
writeLines("\n :: The summary of the claims data set:")
str(Claims)
'org_babel_R_eoe'
writeLines("\n :: Percentage of patients in each cost bucket:")
table(Claims$bucket2009)/nrow(Claims)
'org_babel_R_eoe'
writeLines("\n :: Split the data...")
library(caTools)
set.seed(88)

spl <- sample.split(Claims$bucket2009, SplitRatio = 0.6)
ClaimsTrain <- subset(Claims, spl==TRUE)
ClaimsTest <- subset(Claims, spl==FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(ClaimsTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: The average age of the training set is:")
mean(ClaimsTrain$age)
'org_babel_R_eoe'
writeLines("\n :: The proportion of patients that have equal or more than a diabetes code:")
nrow(ClaimsTrain[ClaimsTrain$diabetes == 1, ]) / nrow(ClaimsTrain)
'org_babel_R_eoe'
writeLines("\n :: Baseline method:")
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)

writeLines("\n :: Baseline accuracy:")
(110138 + 10721 + 2774 + 1539 + 104)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: Penalty Matrix:")
PenaltyMatrix <- matrix(c(0, 1, 2, 3, 4, 2, 0, 1, 2, 3, 4, 2, 0, 1, 2,
                         6, 4, 2, 0, 1, 8, 6, 4, 2, 0), byrow = TRUE,
                       nrow = 5)
PenaltyMatrix
'org_babel_R_eoe'
writeLines("\n :: Penalty Error of Baseline Method:")
as.matrix(table(ClaimsTest$bucket2009, ClaimsTest$bucket2008))*PenaltyMatrix
'org_babel_R_eoe'
writeLines("\n :: Overall accuracy of the baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009, ClaimsTest$bucket2008))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: The baseline accuracy is:")
table(ClaimsTest$bucket2009)[1] / nrow(ClaimsTest)
'org_babel_R_eoe'
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
table(ClaimsTest$bucket2009)
PenaltyMatrix

writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(0, 2, 4, 6, 8)
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
PenaltyMatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0), byrow=TRUE, nrow=5)
PenaltyMatrix
m = as.matrix(cbind(table(ClaimsTest$bucket2009, p)[,1], rep(0,5), rep(0,5), rep(0,5), rep(0,5)))
sum(m*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: Penalty Matrix:")
PenaltyMatrix2 <- c(0, 2, 4, 6, 8)
PenaltyMatrix2

writeLines("\n :: The penalty error for the Naive Baseline model:")
sum(as.matrix(table(ClaimsTest$bucket2009)) * PenaltyMatrix2) / nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: Load necessary libraries...")
library(rpart)
library(rpart.plot)
'org_babel_R_eoe'
writeLines("\n :: CART model:")
ClaimsTree <- rpart(bucket2009 ~ age + alzheimers + arthritis + cancer +
                    copd + depression + diabetes + heart.failure +
                              ihd + kidney + osteoporosis + stroke +
                              bucket2008 + reimbursement2008,
                    data = ClaimsTrain, method = "class", cp = 0.00005)
prp(ClaimsTree)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictTest <- predict(ClaimsTree, newdata = ClaimsTest, type = "class")

writeLines("\n :: Building the confusion matrix for the testing set:")
table(ClaimsTest$bucket2009, PredictTest)

writeLines("\n :: Calculate the overall accuracy for the testing set:")
(114141 + 16102 + 118 + 201 + 0)/nrow(ClaimsTest)
'org_babel_R_eoe'
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix

writeLines("\n :: Penalty Error:")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix

writeLines("\n :: Penalty Error:")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix

writeLines("\n :: Penalty Error")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix

writeLines("\n :: The testing set penalty error:")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: New CART model with loss matrix:")
ClaimsTree = rpart(bucket2009 ~ age + alzheimers + arthritis + cancer +
                   copd + depression + diabetes + heart.failure +
                             ihd + kidney + osteoporosis + stroke +
                             bucket2008 + reimbursement2008,
                   data = ClaimsTrain, method = "class", cp = 0.00005,
                   parms = list(loss = PenaltyMatrix))
'org_babel_R_eoe'
PredictTest <- predict(ClaimsTree, newdata = ClaimsTest, type = "class")

table(ClaimsTest$bucket2009, PredictTest)

(94310 + 18942 + 4692 + 636 + 2)/nrow(ClaimsTest)

sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
PredictTest <- predict(ClaimsTree, newdata = ClaimsTest, type = "class")

writeLines("\n :: The classification matrix is:")
table(ClaimsTest$bucket2009, PredictTest)

writeLines("\n :: The overall accuracy is:")
(94310 + 18942 + 4692 + 636 + 2)/nrow(ClaimsTest)

writeLines("\n :: The penalty error is:")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: The penalty matrix:")
PenaltyMatrix
'org_babel_R_eoe'
writeLines("\n :: The penalty matrix:")
PenaltyMatrix
'org_babel_R_eoe'
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/boston.csv"

fileName <- "boston.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
boston <- read.table("../data/boston.csv", sep = ",", header = TRUE)

str(boston)
summary(boston)
'org_babel_R_eoe'
writeLines("\n :: Polution summary:")
summary(boston$NOX)
'org_babel_R_eoe'
writeLines("\n :: The Boston prices summary:")
summary(boston$MEDV)
'org_babel_R_eoe'
writeLines("\n :: Linear Regression using LAT and LON:")
latlonlm <- lm(MEDV ~ LAT + LON, data = boston)
summary(latlonlm)
'org_babel_R_eoe'
writeLines("\n :: The Longitude and Latitude fitted values are:")
latlonlm$fitted.values
'org_babel_R_eoe'
writeLines("\n :: The Longitude and Latitude fitted values are:")
summary(latlonlm$fitted.values)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
summary(latlontree)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
'org_babel_R_eoe'
q()
n
length(stopwords("english"))
q()
n
corpusTitle
corpusAbstract
names(dtmTitle)
names(dtmAbstract)
colnames(dtmTitle)
colnames(dtmTitle)
colnames(dtmAbstract)
colnames(dtmAbstract)
emails[[1]]
class
class(emails)
dim(emails)
names(emails)
emails[1, 1]
head(emails[1, ])
emails[2, 1]
head(emails)
dim(emailsSparse)
names(emailsSparse)
names(emailsSparse[92])
q()
n
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt((v1 - v2)^2)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt((v1 - v2)^2)
d
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
q()
n
