
writeLines("\n :: Other useful way to calculate the degree > 10:")
table(degree(g) >= 10)
'org_babel_R_eoe'
writeLines("\n :: The largest size assigned to a node:")
sort(V(g)$size, decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning red color to gender A...")
V(g)$color[V(g)$gender == "A"] <- "red"

writeLines("\n :: Assigning gray color to gender B...")
V(g)$color[V(g)$gender == "B"] <- "gray"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning blue color to school A...")
V(g)$color[V(g)$school == "A"] <- "blue"

writeLines("\n :: Assigning red color to school AB...")
V(g)$color[V(g)$school == "AB"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Assigning black color to the nodes...")
V(g)$color <- "black"

writeLines("\n :: Assigning green color to locale A...")
V(g)$color[V(g)$locale == "A"] <- "green"

writeLines("\n :: Assigning red color to locale B...")
V(g)$color[V(g)$locale == "B"] <- "red"
'org_babel_R_eoe'
writeLines("\n :: Install new package: rgl ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(rgl)
writeLines("\n :: Library rgl loaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tweets.csv"
fileName <- "tweetsU7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the dataset in a dataframe...")
tweets <- read.csv("../data/tweetsU7.csv", stringsAsFactors = FALSE)
str(tweets)
'org_babel_R_eoe'
library(tm)
'org_babel_R_eoe'
corpus <- Corpus(VectorSource(tweets$Tweet))
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
'org_babel_R_eoe'
corpus <- tm_map(corpus, removePunctuation)
corpus[[1]]
'org_babel_R_eoe'
corpus <- tm_map(corpus, removeWords, stopwords("english"))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
'org_babel_R_eoe'
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
writeLines("\n :: allTweets dataframe matrix portion:")
allTweets[1:13, 1:13]

writeLines("\n :: Unique words across all documents:")
ncol(allTweets)
'org_babel_R_eoe'
writeLines("\n :: Install new package: wordcloud ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(wordcloud)
writeLines("\n :: Library wordcloud loaded...")
'org_babel_R_eoe'
writeLines("\n :: We can pass the column names:")
head(colnames(allTweets), 50)

writeLines("\n :: Is the same as passing the names of the features:")
head(names(allTweets), 50)
'org_babel_R_eoe'
head(colSums(allTweets), 50)
'org_babel_R_eoe'
writeLines("\n :: 1) Create a corpus using the Tweet variable...")
corpus <- Corpus(VectorSource(tweets$Tweet))

writeLines("\n :: 2) Convert the corpus to lowercase...")
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)

writeLines("\n :: 3) Remove punctuation from the corpus...")
corpus <- tm_map(corpus, removePunctuation)

writeLines("\n :: 4) Remove all English-language stopwords...")
corpus <- tm_map(corpus, removeWords, c("apple", stopwords("english")))

writeLines("\n :: 5) Build a document-term matrix out of the corpus...")
DocTermMatrix <- DocumentTermMatrix(corpus)

writeLines("\n :: 6) Convert the document-term matrix to a data frame called allTweets...")
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
DocTermMatrix <- DocumentTermMatrix(corpus)
allTweets <- as.data.frame(as.matrix(DocTermMatrix))
'org_babel_R_eoe'
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayiPadTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayiPadTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayiPadTrain$biddable <- as.integer(eBayiPadTrain$biddable)
eBayiPadTrain$startprice <- as.numeric(eBayiPadTrain$startprice)
eBayiPadTrain$cellular <- as.integer(eBayiPadTrain$cellular)
eBayiPadTrain$storage <- as.integer(eBayiPadTrain$storage)
eBayiPadTrain$sold <- as.integer(eBayiPadTrain$sold)

writeLines("\n :: eBayiPadTrain new structure:")
str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayiPadTrain)
'org_babel_R_eoe'
q()
n
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayiPadTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayiPadTrain$biddable <- as.integer(eBayiPadTrain$biddable)
eBayiPadTrain$startprice <- as.numeric(eBayiPadTrain$startprice)
eBayiPadTrain$cellular <- as.integer(eBayiPadTrain$cellular)
eBayiPadTrain$storage <- as.integer(eBayiPadTrain$storage)
eBayiPadTrain$sold <- as.integer(eBayiPadTrain$sold)

writeLines("\n :: eBayiPadTrain new structure:")
str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayiPadTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayiPadTrain$biddable <- as.integer(eBayiPadTrain$biddable)
eBayiPadTrain$startprice <- as.numeric(eBayiPadTrain$startprice)
eBayiPadTrain$cellular <- as.integer(eBayiPadTrain$cellular)
eBayiPadTrain$storage <- as.integer(eBayiPadTrain$storage)
eBayiPadTrain$sold <- as.integer(eBayiPadTrain$sold)

eBayiPadTrain$condition <- as.factor(eBayiPadTrain$condition)
eBayiPadTrain$carrier <- as.factor(eBayiPadTrain$carrier)

writeLines("\n :: eBayiPadTrain new structure:")
str(eBayiPadTrain)
'org_babel_R_eoe'
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayiPadTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayiPadTrain$biddable <- as.integer(eBayiPadTrain$biddable)
eBayiPadTrain$startprice <- as.numeric(eBayiPadTrain$startprice)
eBayiPadTrain$cellular <- as.integer(eBayiPadTrain$cellular)
eBayiPadTrain$storage <- as.integer(eBayiPadTrain$storage)
eBayiPadTrain$sold <- as.integer(eBayiPadTrain$sold)

eBayiPadTrain$condition <- as.factor(eBayiPadTrain$condition)
eBayiPadTrain$carrier <- as.factor(eBayiPadTrain$carrier)

writeLines("\n :: eBayiPadTrain new structure:")
str(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayiPadTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayiPadTrain$sold)
'org_babel_R_eoe'
ls()
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
eBayTrain
str(eBayTrain)
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

eBayTrain$condition <- as.factor(eBayTrain$condition)
eBayTrain$carrier <- as.factor(eBayTrain$carrier)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)
'org_babel_R_eoe'
q()
n
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

eBayTrain$condition <- as.factor(eBayTrain$condition)
eBayTrain$carrier <- as.factor(eBayTrain$carrier)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)
'org_babel_R_eoe'
q()
n
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

eBayTrain$condition <- as.factor(eBayTrain$condition)
eBayTrain$carrier <- as.factor(eBayTrain$carrier)
eBayTrain$color <- as.factor(eBayTrain$color)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

eBayTrain$condition <- as.factor(eBayTrain$condition)
eBayTrain$carrier <- as.factor(eBayTrain$carrier)
eBayTrain$color <- as.factor(eBayTrain$color)
eBayTrain$productline <- as.factor(eBayTrain$productline)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)$V1
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)[1]
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline accuracy = ")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline accuracy is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

## eBayTrain$condition <- as.factor(eBayTrain$condition)
## eBayTrain$carrier <- as.factor(eBayTrain$carrier)
## eBayTrain$color <- as.factor(eBayTrain$color)
## eBayTrain$productline <- as.factor(eBayTrain$productline)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

## eBayTrain$condition <- as.factor(eBayTrain$condition)
## eBayTrain$carrier <- as.factor(eBayTrain$carrier)
## eBayTrain$color <- as.factor(eBayTrain$color)
## eBayTrain$productline <- as.factor(eBayTrain$productline)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)
'org_babel_R_eoe'
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", colClasses = "character",
                 na.strings = c("", "Unknown", NULL))

str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTrain$biddable <- as.integer(eBayTrain$biddable)
eBayTrain$startprice <- as.numeric(eBayTrain$startprice)
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
eBayTrain$sold <- as.integer(eBayTrain$sold)

## eBayTrain$condition <- as.factor(eBayTrain$condition)
## eBayTrain$carrier <- as.factor(eBayTrain$carrier)
## eBayTrain$color <- as.factor(eBayTrain$color)
## eBayTrain$productline <- as.factor(eBayTrain$productline)

writeLines("\n :: eBayTrain new structure:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
sort(table(eBayTrain$productline, eBayTrain$sold), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[2] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
table(eBayTrain$biddable, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
table(eBayTrain$biddable, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m[1, 1]
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[1, 1]
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 1]
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayTrain$condition, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayTrain$condition, eBayTrain$biddable)
'org_babel_R_eoe'
572 + 586
582 + 576
writeLines("\n :: Cellular feature vs. the sold outcome:")
table(eBayTrain$cellular, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayTrain$cellular, eBayTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayTrain$color, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
table(eBayTrain$storage, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayTrain$storage, eBayTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using\nthe independent all variables:")
eBayLR01 <- glm(sold ~ ., data = eBayTrain, family = binomial)
summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using\nthe independent all variables:")

eBayLR01 <- glm(sold ~ biddable + startprice + condition + cellular +
                        carrier + color + storage + productline, data
                        = eBayTrain, family = binomial)
summary(eBayLR01)
'org_babel_R_eoe'
cor(eBayTrain[c("biddable", "startprice", "cellular", "storage")])
'org_babel_R_eoe'
writeLines("\n :: The correlation matrix:")
cor(eBayTrain[c("biddable", "startprice", "cellular", "storage")], na.rm = TRUE)
'org_babel_R_eoe'
writeLines("\n :: The correlation matrix:")
cor(eBayTrain[c("biddable", "startprice", "cellular", "storage")], na.rm = TRUE)
'org_babel_R_eoe'
writeLines("\n :: The correlation matrix:")
cor(eBayTrain[c("biddable", "startprice", "cellular", "storage")])
'org_babel_R_eoe'
q()
n
