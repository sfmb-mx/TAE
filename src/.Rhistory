 "condition.New.other.see.details", "condition.Seller.refurbished",
 "condition.Used", "cellular", "carrier.ATT", "carrier.None",
 "carrier.Other", "carrier.Sprint", "carrier.T-Mobile",
 "carrier.Unknown", "carrier.Verizon", "color.Black", "color.Gold",
 "color.Space.Gray", "color.Unknown", "color.White", "storage.2",
 "storage.3", "storage.4", "storage.5", "productline.iPad.1",
 "productline.iPad.2", "productline.iPad.3", "productline.iPad.4",
 "productline.iPad.Air",
 "productline.iPad.Air.2", "productline.iPad.mini",
 "productline.iPad.mini.2", "productline.iPad.mini.3",
 "productline.Unknown", "UniqueID")

print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS2$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS2, spl == TRUE)
eBayTest <- subset(eBayDS2, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'sold'
predictorsNames <- names(eBayDS2)[names(eBayDS2) != outcomeName]
predictorsNames
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR4 <- glm(sold ~ ., data = eBayTrain, family = binomial)

writeLines("\n :: Summary of the Logistic Regression model 4:")
summary(eBayLR4)
'org_babel_R_eoe'
writeLines("\n :: Create the logistic regression model 5 to predict sold using
all the independent variables:")

eBayLR5 <- glm(sold ~ biddable + startprice + storage.2 + storage.3 +
                 storage.4 + productline.iPad.3 + productline.iPad.4 + productline.iPad.Air
                 + productline.iPad.Air.2 + productline.iPad.mini.2 +
                 productline.iPad.mini.3 + UniqueID, data = eBayTrain,
                 family = binomial)


writeLines("\n :: Summary of the Logistic Regression model 5:")
summary(eBayLR5)
'org_babel_R_eoe'

'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
PredTestLR4 <- predict(eBayLR4, newdata = eBayTest, type = "response")

ROCRpredLR4 <- prediction(PredTestLR4, eBayTest$sold)
as.numeric(performance(ROCRpredLR4, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")

predictorsNamesLR5 <- c("biddable",
                     "startprice",
                     "productline.iPad.3",
                     "productline.iPad.Air",
                     "productline.iPad.Air.2",
                     "productline.iPad.mini.2",
                     "productline.iPad.mini.3",
                     "UniqueID")
predictorsNamesLR5
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
PredTestLR5 <- predict(eBayLR5, newdata = eBayTest, type = "response")

ROCRpredLR5 <- prediction(PredTestLR5, eBayTest$sold)
as.numeric(performance(ROCRpredLR5, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR4, newdata = eBayValidation2, type = "response")
summary(PredTest)

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "../data/SubmissionLR4.csv", row.names = FALSE)

writeLines("\n :: Submission LR4 file generated...")
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR5, newdata = eBayValidation2, type = "response")
summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR5.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission LR5 file generated...")
'org_babel_R_eoe'
PredTest <- predict(eBayLR4, newdata = eBayValidation2, type = "response")
q()
n
eBayDS1 <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation1 <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS1, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation1, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation1$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
writeLines("\n :: clearing workspace...")
rm(list = ls(all = TRUE))
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions
library(ggplot2)                        # Graphical libraries
library(caTools)                        # Partition data sets
library(parallel)                       # Parallel computation
library(mice)                           # Imputation library
library(ROCR)                           # ROCS for AUC calculation
library(randomForest)                   # Random Forest library
library(pROC)                           # ROC calculations
library(gbm)                            # gbm algorithm
library(parallel)                       # Multicore calculations
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$condition <- as.factor(eBayDS$condition)
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$carrier <- as.factor(eBayDS$carrier)
eBayDS$color <- as.factor(eBayDS$color)
eBayDS$storage <- as.factor(eBayDS$storage)
eBayDS$productline <- as.factor(eBayDS$productline)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
eBayValidation$condition <- as.factor(eBayValidation$condition)
eBayValidation$cellular <- as.integer(eBayValidation$cellular)
eBayValidation$carrier <- as.factor(eBayValidation$carrier)
eBayValidation$color <- as.factor(eBayValidation$color)
eBayValidation$storage <- as.factor(eBayValidation$storage)
eBayValidation$productline <- as.factor(eBayValidation$productline)

writeLines("\n :: New structure of the original training set:")
str(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
eBayDS$cellular <- imputed$cellular
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayValidation$storage <- imputed$storage
eBayValidation$cellular <- imputed$cellular
summary(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayDS$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayDS$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$carrier)

writeLines("\n :: The color of iPads:")
table(eBayDS$color)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$color)

writeLines("\n :: The product line:")
table(eBayDS$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
m <- table(eBayDS$biddable, eBayDS$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayDS$condition, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayDS$condition, eBayDS$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayDS$cellular, eBayDS$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayDS$color, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayDS$storage, eBayDS$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[2, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayDS$productline, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
print(names(eBayDS2))

writeLines("\n :: Re-work the feature names:")
 names(eBayDS2) <- c("biddable", "startprice",
 "condition.For.parts.or.not.working",
 "condition.Manufacturer.refurbished", "condition.New",
 "condition.New.other.see.details", "condition.Seller.refurbished",
 "condition.Used", "cellular", "carrier.ATT", "carrier.None",
 "carrier.Other", "carrier.Sprint", "carrier.T-Mobile",
 "carrier.Unknown", "carrier.Verizon", "color.Black", "color.Gold",
 "color.Space.Gray", "color.Unknown", "color.White", "storage.2",
 "storage.3", "storage.4", "storage.5", "productline.iPad.1",
 "productline.iPad.2", "productline.iPad.3", "productline.iPad.4",
 "productline.iPad.5", "productline.iPad.Air",
 "productline.iPad.Air.2", "productline.iPad.mini",
 "productline.iPad.mini.2", "productline.iPad.mini.3",
 "productline.iPad.mini.Retina", "productline.Unknown", "sold",
 'UniqueID')

print(names(eBayDS2))
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
 names(eBayValidation2) <- c("biddable", "startprice",
 "condition.For.parts.or.not.working",
 "condition.Manufacturer.refurbished", "condition.New",
 "condition.New.other.see.details", "condition.Seller.refurbished",
 "condition.Used", "cellular", "carrier.ATT", "carrier.None",
 "carrier.Other", "carrier.Sprint", "carrier.T-Mobile",
 "carrier.Unknown", "carrier.Verizon", "color.Black", "color.Gold",
 "color.Space.Gray", "color.Unknown", "color.White", "storage.2",
 "storage.3", "storage.4", "storage.5", "productline.iPad.1",
 "productline.iPad.2", "productline.iPad.3", "productline.iPad.4",
 "productline.iPad.Air",
 "productline.iPad.Air.2", "productline.iPad.mini",
 "productline.iPad.mini.2", "productline.iPad.mini.3",
 "productline.Unknown", "UniqueID")

print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS2$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS2, spl == TRUE)
eBayTest <- subset(eBayDS2, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'sold'
predictorsNames <- names(eBayDS2)[names(eBayDS2) != outcomeName]
predictorsNames
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR4 <- glm(sold ~ ., data = eBayTrain, family = binomial)

writeLines("\n :: Summary of the Logistic Regression model 4:")
summary(eBayLR4)
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
PredTestLR4 <- predict(eBayLR4, newdata = eBayTest, type = "response")

ROCRpredLR4 <- prediction(PredTestLR4, eBayTest$sold)
as.numeric(performance(ROCRpredLR4, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: Create the logistic regression model 5 to predict sold using
all the independent variables:")

eBayLR5 <- glm(sold ~ biddable + startprice + storage.2 + storage.3 +
                 storage.4 + productline.iPad.3 + productline.iPad.4 + productline.iPad.Air
                 + productline.iPad.Air.2 + productline.iPad.mini.2 +
                 productline.iPad.mini.3 + UniqueID, data = eBayTrain,
                 family = binomial)


writeLines("\n :: Summary of the Logistic Regression model 5:")
summary(eBayLR5)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")

predictorsNamesLR5 <- c("biddable",
                     "startprice",
                     "productline.iPad.3",
                     "productline.iPad.Air",
                     "productline.iPad.Air.2",
                     "productline.iPad.mini.2",
                     "productline.iPad.mini.3",
                     "UniqueID")
predictorsNamesLR5
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
PredTestLR5 <- predict(eBayLR5, newdata = eBayTest, type = "response")

ROCRpredLR5 <- prediction(PredTestLR5, eBayTest$sold)
as.numeric(performance(ROCRpredLR5, "auc")@y.values)
'org_babel_R_eoe'

'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR4, newdata = eBayValidation2, type = "response")
summary(PredTest)

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "../data/SubmissionLR4.csv", row.names = FALSE)

writeLines("\n :: Submission LR4 file generated...")
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR5, newdata = eBayValidation2, type = "response")
summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR5.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission LR5 file generated...")
'org_babel_R_eoe'
anyNA(eBayTrain)
anyNA(eBayTest)
anyNA(eBayValidation2)
str(eBayValidation2)
summary(eBayValidation2)
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions
library(ggplot2)                        # Graphical libraries
library(caTools)                        # Partition data sets
library(parallel)                       # Parallel computation
library(mice)                           # Imputation library
library(ROCR)                           # ROCS for AUC calculation
library(randomForest)                   # Random Forest library
library(pROC)                           # ROC calculations
library(gbm)                            # gbm algorithm
library(parallel)                       # Multicore calculations
library(corrplot)                       # Correlation matrix plot
'org_babel_R_eoe'
dim(eBayTrain)
cor(eBayTrain)
corrplot(eBayTrain)
corrplot(cor(eBayTrain))
corrplot(cor(eBayTrain))
q()
n
eBayDS1 <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation1 <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS1, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation1, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation1$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
writeLines("\n :: clearing workspace...")
rm(list = ls(all = TRUE))
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions
library(ggplot2)                        # Graphical libraries
library(caTools)                        # Partition data sets
library(parallel)                       # Parallel computation
library(mice)                           # Imputation library
library(ROCR)                           # ROCS for AUC calculation
library(randomForest)                   # Random Forest library
library(pROC)                           # ROC calculations
library(gbm)                            # gbm algorithm
library(parallel)                       # Multicore calculations
library(corrplot)                       # Correlation matrix plot
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$condition <- as.factor(eBayDS$condition)
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$carrier <- as.factor(eBayDS$carrier)
eBayDS$color <- as.factor(eBayDS$color)
eBayDS$storage <- as.factor(eBayDS$storage)
eBayDS$productline <- as.factor(eBayDS$productline)
## eBayDS$sold <- as.factor(eBayDS$sold)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
eBayValidation$condition <- as.factor(eBayValidation$condition)
eBayValidation$cellular <- as.integer(eBayValidation$cellular)
eBayValidation$carrier <- as.factor(eBayValidation$carrier)
eBayValidation$color <- as.factor(eBayValidation$color)
eBayValidation$storage <- as.factor(eBayValidation$storage)
eBayValidation$productline <- as.factor(eBayValidation$productline)
## eBayValidation$sold <- as.factor(eBayValidation$sold)

writeLines("\n :: New structure of the original training set:")
str(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
eBayDS$cellular <- imputed$cellular
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayValidation$storage <- imputed$storage
eBayValidation$cellular <- imputed$cellular
summary(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayDS$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayDS$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$carrier)

writeLines("\n :: The color of iPads:")
table(eBayDS$color)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$color)

writeLines("\n :: The product line:")
table(eBayDS$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayDS$biddable, eBayDS$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayDS$condition, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayDS$condition, eBayDS$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayDS$cellular, eBayDS$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayDS$color, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayDS$storage, eBayDS$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[2, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayDS$productline, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
print(names(eBayDS2))

writeLines("\n :: Re-work the feature names:")
 names(eBayDS2) <- c("biddable", "startprice",
 "condition.For.parts.or.not.working",
 "condition.Manufacturer.refurbished", "condition.New",
 "condition.New.other.see.details", "condition.Seller.refurbished",
 "condition.Used", "cellular", "carrier.ATT", "carrier.None",
 "carrier.Other", "carrier.Sprint", "carrier.T-Mobile",
 "carrier.Unknown", "carrier.Verizon", "color.Black", "color.Gold",
 "color.Space.Gray", "color.Unknown", "color.White", "storage.2",
 "storage.3", "storage.4", "storage.5", "productline.iPad.1",
 "productline.iPad.2", "productline.iPad.3", "productline.iPad.4",
 "productline.iPad.5", "productline.iPad.Air",
 "productline.iPad.Air.2", "productline.iPad.mini",
 "productline.iPad.mini.2", "productline.iPad.mini.3",
 "productline.iPad.mini.Retina", "productline.Unknown", "sold",
 'UniqueID')

print(names(eBayDS2))
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
 names(eBayValidation2) <- c("biddable", "startprice",
 "condition.For.parts.or.not.working",
 "condition.Manufacturer.refurbished", "condition.New",
 "condition.New.other.see.details", "condition.Seller.refurbished",
 "condition.Used", "cellular", "carrier.ATT", "carrier.None",
 "carrier.Other", "carrier.Sprint", "carrier.T-Mobile",
 "carrier.Unknown", "carrier.Verizon", "color.Black", "color.Gold",
 "color.Space.Gray", "color.Unknown", "color.White", "storage.2",
 "storage.3", "storage.4", "storage.5", "productline.iPad.1",
 "productline.iPad.2", "productline.iPad.3", "productline.iPad.4",
 "productline.iPad.Air",
 "productline.iPad.Air.2", "productline.iPad.mini",
 "productline.iPad.mini.2", "productline.iPad.mini.3",
 "productline.Unknown", "UniqueID")

print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS2$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS2, spl == TRUE)
eBayTest <- subset(eBayDS2, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'sold'
predictorsNames <- names(eBayDS2)[names(eBayDS2) != outcomeName]
predictorsNames
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR4 <- glm(sold ~ ., data = eBayTrain, family = binomial)

writeLines("\n :: Summary of the Logistic Regression model 4:")
summary(eBayLR4)
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
PredTestLR4 <- predict(eBayLR4, newdata = eBayTest, type = "response")

ROCRpredLR4 <- prediction(PredTestLR4, eBayTest$sold)
as.numeric(performance(ROCRpredLR4, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: Create the logistic regression model 5 to predict sold using
all the independent variables:")

eBayLR5 <- glm(sold ~ biddable + startprice + storage.2 + storage.3 +
                 storage.4 + productline.iPad.3 + productline.iPad.4 + productline.iPad.Air
                 + productline.iPad.Air.2 + productline.iPad.mini.2 +
                 productline.iPad.mini.3 + UniqueID, data = eBayTrain,
                 family = binomial)

## eBayLR5 <- train(sold ~ biddable + startprice + storage.2 + storage.3
##                  + productline.iPad.3 + productline.iPad.Air +
##                            productline.iPad.Air.2 +
##                            productline.iPad.mini.2 +
##                            productline.iPad.mini.3 + UniqueID, data =
##                            eBayTrain, method = "glm")

writeLines("\n :: Summary of the Logistic Regression model 5:")
summary(eBayLR5)
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")

predictorsNamesLR5 <- c("biddable",
                     "startprice",
                     "productline.iPad.3",
                     "productline.iPad.Air",
                     "productline.iPad.Air.2",
                     "productline.iPad.mini.2",
                     "productline.iPad.mini.3",
                     "UniqueID")
predictorsNamesLR5
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
## PredTestLR5 <- predict(object = eBayLR5, newdata = eBayTest, type = 'prob')
PredTestLR5 <- predict(eBayLR5, newdata = eBayTest, type = "response")

ROCRpredLR5 <- prediction(PredTestLR5, eBayTest$sold)
as.numeric(performance(ROCRpredLR5, "auc")@y.values)
'org_babel_R_eoe'
## writeLines("\n :: Random Forest model:")
## set.seed(pi)
## eBayRF01 <- randomForest(sold ~ UniqueID + biddable + startprice +
##                                  condition + cellular + carrier +
##                                  color + storage + productline, data =
##                     eBayTrain, method = "class", na.action=na.roughfix)

## summary(eBayRF01)
'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR4, newdata = eBayValidation2, type = "response")
summary(PredTest)

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "../data/SubmissionLR4.csv", row.names = FALSE)

writeLines("\n :: Submission LR4 file generated...")
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR5, newdata = eBayValidation2, type = "response")
summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR5.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission LR5 file generated...")
'org_babel_R_eoe'
q()
n
