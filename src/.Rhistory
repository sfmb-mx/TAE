
writeLines("\n :: Sensitivity:")
8/25

writeLines("\n :: Specificity:")
73/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2")
table(qualityTrain$PoorCare, predictTrain > 0.2)

writeLines("\n :: Sensitivity:")
16/25

writeLines("\n :: Specificity:")
54/74
'org_babel_R_eoe'
TP <- 20; TN <- 15; FP <- 10; FN <- 5;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
TP <- 15; TN <- 20; FP <- 5; FN <- 10;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)

writeLines("\n :: The AUC of the test set is:")
auc
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/framingham.csv"

fileName <- "framingham.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
framingham <- read.table("../data/framingham.csv", sep = ",", header = TRUE)
str(framingham)
summary(framingham)
'org_babel_R_eoe'
writeLines("\n :: Load the library caTools")
library(caTools)

writeLines("\n :: Randomly split the data into training and testing sets")
set.seed(1000)
split <- sample.split(framingham$TenYearCHD, SplitRatio = 0.65)

writeLines("\n :: Split up the data using subset")
train <- subset(framingham, split==TRUE)
test <- subset(framingham, split==FALSE)
'org_babel_R_eoe'
writeLines("\n :: Logistic Regression Model")
framinghamLog <- glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
'org_babel_R_eoe'
writeLines("\n :: Predictions on the test set")
predictTest <- predict(framinghamLog, type="response", newdata=test)

writeLines("\n :: Confusion matrix with threshold of 0.5")
table(test$TenYearCHD, predictTest > 0.5)

writeLines("\n :: Accuracy")
(1069 + 11) / (1069 + 6 + 187 + 11)

writeLines("\n :: Baseline accuracy")
(1069 + 6) / (1069 + 6 + 187 + 11)
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
library(ROCR)
ROCRpred <- prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
TN <- 1069; FP <- 6
FN <- 187; TP <- 11

writeLines("\n :: The Sensitivity is:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: The Specificity is:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingData.csv"

fileName <- "PollingData.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingData.csv"

fileName <- "PollingData.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
polling <- read.table("../data/PollingData.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
polling <- read.table("../data/PollingData.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
beta0 <- -1.5; beta1 <- 3; beta2 <- -0.5;
x1 <- 1; x2 <- 5
logit <- beta0 + (beta1 * x1) + (beta2 * x2)
writeLines("\n :: The value of logit is:")
logit
'org_babel_R_eoe'
writeLines("\n :: The value of odds is:")
exp(logit)
'org_babel_R_eoe'
P <- 1 / (1 + exp(-logit))
writeLines("\n :: The probability of P(y = 1) is:")
P
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
writeLines("\n :: Install and load caTools package (Only once)")
library(caTools)

writeLines("\n :: Randomly split data")
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
head(split)
'org_babel_R_eoe'
writeLines("\n :: Create training and testing sets")
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)

writeLines("\n :: The number of observations in the training set")
nrow(qualityTrain)

writeLines("\n :: The number of observations in the testing set")
nrow(qualityTest)
'org_babel_R_eoe'
writeLines("\n :: First Logistic Regression Model")
QualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics,
                  data=qualityTrain, family = binomial)
summary(QualityLog)
'org_babel_R_eoe'
writeLines("\n :: Make predictions on training set")
predictTrain <- predict(QualityLog, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Analyze predictions")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
'org_babel_R_eoe'
writeLines("\n :: create a logistic regression model to predict PoorCare using
the independent variables StartedOnCombination and ProviderCount:")
QualityLog2 <- glm(PoorCare ~ StartedOnCombination + ProviderCount,
                   data = qualityTrain, family = binomial)
summary(QualityLog2)
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(qualityTrain$PoorCare, predictTrain > 0.5)

writeLines("\n :: Sensitivity:")
10/25

writeLines("\n :: Specificity:")
70/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.7")
table(qualityTrain$PoorCare, predictTrain > 0.7)

writeLines("\n :: Sensitivity:")
8/25

writeLines("\n :: Specificity:")
73/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2")
table(qualityTrain$PoorCare, predictTrain > 0.2)

writeLines("\n :: Sensitivity:")
16/25

writeLines("\n :: Specificity:")
54/74
'org_babel_R_eoe'
TP <- 20; TN <- 15; FP <- 10; FN <- 5;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
TP <- 15; TN <- 20; FP <- 5; FN <- 10;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)

writeLines("\n :: The AUC of the test set is:")
auc
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/framingham.csv"

fileName <- "framingham.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
framingham <- read.table("../data/framingham.csv", sep = ",", header = TRUE)
str(framingham)
summary(framingham)
'org_babel_R_eoe'
writeLines("\n :: Load the library caTools")
library(caTools)

writeLines("\n :: Randomly split the data into training and testing sets")
set.seed(1000)
split <- sample.split(framingham$TenYearCHD, SplitRatio = 0.65)

writeLines("\n :: Split up the data using subset")
train <- subset(framingham, split==TRUE)
test <- subset(framingham, split==FALSE)
'org_babel_R_eoe'
writeLines("\n :: Logistic Regression Model")
framinghamLog <- glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
'org_babel_R_eoe'
writeLines("\n :: Predictions on the test set")
predictTest <- predict(framinghamLog, type="response", newdata=test)

writeLines("\n :: Confusion matrix with threshold of 0.5")
table(test$TenYearCHD, predictTest > 0.5)

writeLines("\n :: Accuracy")
(1069 + 11) / (1069 + 6 + 187 + 11)

writeLines("\n :: Baseline accuracy")
(1069 + 6) / (1069 + 6 + 187 + 11)
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
library(ROCR)
ROCRpred <- prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
TN <- 1069; FP <- 6
FN <- 187; TP <- 11

writeLines("\n :: The Sensitivity is:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: The Specificity is:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingData.csv"

fileName <- "PollingData.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
polling <- read.table("../data/PollingData.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Install and load mice package (Only once)")
install.packages('mice', repos='http://cran.rstudio.com/')
library(mice)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Install and load mice package (Only once)")
## install.packages('mice', repos='http://cran.rstudio.com/')
library(mice)
'org_babel_R_eoe'
beta0 <- -1.5; beta1 <- 3; beta2 <- -0.5;
x1 <- 1; x2 <- 5
logit <- beta0 + (beta1 * x1) + (beta2 * x2)
writeLines("\n :: The value of logit is:")
logit
'org_babel_R_eoe'
writeLines("\n :: The value of odds is:")
exp(logit)
'org_babel_R_eoe'
P <- 1 / (1 + exp(-logit))
writeLines("\n :: The probability of P(y = 1) is:")
P
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
writeLines("\n :: Install and load caTools package (Only once)")
## install.packages('caTools', repos='http://cran.rstudio.com/')
library(caTools)

writeLines("\n :: Randomly split data")
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
head(split)
'org_babel_R_eoe'
writeLines("\n :: Create training and testing sets")
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)

writeLines("\n :: The number of observations in the training set")
nrow(qualityTrain)

writeLines("\n :: The number of observations in the testing set")
nrow(qualityTest)
'org_babel_R_eoe'
writeLines("\n :: First Logistic Regression Model")
QualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics,
                  data=qualityTrain, family = binomial)
summary(QualityLog)
'org_babel_R_eoe'
writeLines("\n :: Make predictions on training set")
predictTrain <- predict(QualityLog, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Analyze predictions")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
'org_babel_R_eoe'
writeLines("\n :: create a logistic regression model to predict PoorCare using
the independent variables StartedOnCombination and ProviderCount:")
QualityLog2 <- glm(PoorCare ~ StartedOnCombination + ProviderCount,
                   data = qualityTrain, family = binomial)
summary(QualityLog2)
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(qualityTrain$PoorCare, predictTrain > 0.5)

writeLines("\n :: Sensitivity:")
10/25

writeLines("\n :: Specificity:")
70/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.7")
table(qualityTrain$PoorCare, predictTrain > 0.7)

writeLines("\n :: Sensitivity:")
8/25

writeLines("\n :: Specificity:")
73/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2")
table(qualityTrain$PoorCare, predictTrain > 0.2)

writeLines("\n :: Sensitivity:")
16/25

writeLines("\n :: Specificity:")
54/74
'org_babel_R_eoe'
TP <- 20; TN <- 15; FP <- 10; FN <- 5;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
TP <- 15; TN <- 20; FP <- 5; FN <- 10;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
## install.packages('ROCR', repos='http://cran.rstudio.com/')
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)

writeLines("\n :: The AUC of the test set is:")
auc
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/framingham.csv"

fileName <- "framingham.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
framingham <- read.table("../data/framingham.csv", sep = ",", header = TRUE)
str(framingham)
summary(framingham)
'org_babel_R_eoe'
writeLines("\n :: Load the library caTools")
library(caTools)

writeLines("\n :: Randomly split the data into training and testing sets")
set.seed(1000)
split <- sample.split(framingham$TenYearCHD, SplitRatio = 0.65)

writeLines("\n :: Split up the data using subset")
train <- subset(framingham, split==TRUE)
test <- subset(framingham, split==FALSE)
'org_babel_R_eoe'
writeLines("\n :: Logistic Regression Model")
framinghamLog <- glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
'org_babel_R_eoe'
writeLines("\n :: Predictions on the test set")
predictTest <- predict(framinghamLog, type="response", newdata=test)

writeLines("\n :: Confusion matrix with threshold of 0.5")
table(test$TenYearCHD, predictTest > 0.5)

writeLines("\n :: Accuracy")
(1069 + 11) / (1069 + 6 + 187 + 11)

writeLines("\n :: Baseline accuracy")
(1069 + 6) / (1069 + 6 + 187 + 11)
'org_babel_R_eoe'
writeLines("\n :: Test set AUC ")
library(ROCR)
ROCRpred <- prediction(predictTest, test$TenYearCHD)
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
TN <- 1069; FP <- 6
FN <- 187; TP <- 11

writeLines("\n :: The Sensitivity is:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: The Specificity is:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingData.csv"

fileName <- "PollingData.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
polling <- read.table("../data/PollingData.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Install and load mice package (Only once)")
## install.packages('mice', repos='http://cran.rstudio.com/')
library(mice)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
simple <- polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
'org_babel_R_eoe'
set.seed(144)
imputed <- complete(mice(simple))
summary(imputed)
'org_babel_R_eoe'
polling$Rasmussen <- imputed$Rasmussen
polling$SurveyUSA <- imputed$SurveyUSA
summary(polling)
'org_babel_R_eoe'
q()
n
