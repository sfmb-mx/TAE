
writeLines("\n :: The classification matrix is:")
table(ClaimsTest$bucket2009, PredictTest)

writeLines("\n :: The overall accuracy is:")
(94310 + 18942 + 4692 + 636 + 2)/nrow(ClaimsTest)

writeLines("\n :: The penalty error is:")
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
'org_babel_R_eoe'
writeLines("\n :: The penalty matrix:")
PenaltyMatrix
'org_babel_R_eoe'
writeLines("\n :: The penalty matrix:")
PenaltyMatrix
'org_babel_R_eoe'
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/boston.csv"

fileName <- "boston.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
boston <- read.table("../data/boston.csv", sep = ",", header = TRUE)

str(boston)
summary(boston)
'org_babel_R_eoe'
writeLines("\n :: Polution summary:")
summary(boston$NOX)
'org_babel_R_eoe'
writeLines("\n :: The Boston prices summary:")
summary(boston$MEDV)
'org_babel_R_eoe'
writeLines("\n :: Linear Regression using LAT and LON:")
latlonlm <- lm(MEDV ~ LAT + LON, data = boston)
summary(latlonlm)
'org_babel_R_eoe'
writeLines("\n :: The Longitude and Latitude fitted values are:")
latlonlm$fitted.values
'org_babel_R_eoe'
writeLines("\n :: The Longitude and Latitude fitted values are:")
summary(latlonlm$fitted.values)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
summary(latlontree)
'org_babel_R_eoe'
writeLines("\n :: Load CART packages:")
library(rpart)
library(rpart.plot)

writeLines("\n :: CART model:")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
'org_babel_R_eoe'
q()
n
length(stopwords("english"))
q()
n
corpusTitle
corpusAbstract
names(dtmTitle)
names(dtmAbstract)
colnames(dtmTitle)
colnames(dtmTitle)
colnames(dtmAbstract)
colnames(dtmAbstract)
emails[[1]]
class
class(emails)
dim(emails)
names(emails)
emails[1, 1]
head(emails[1, ])
emails[2, 1]
head(emails)
dim(emailsSparse)
names(emailsSparse)
names(emailsSparse[92])
q()
n
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt((v1 - v2)^2)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt((v1 - v2)^2)
d
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "u-item.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "u-item.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE, sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

str(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
summary(movies$Comedy)
'org_babel_R_eoe'
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Western == 1 & movies$Drama == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances:")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D2")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D2")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Find which cluster Men in Black is in:")
subset(movies, Title == "Men in Black (1997)")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
q()
c
q()
n
