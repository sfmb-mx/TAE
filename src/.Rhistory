'org_babel_R_eoe'
writeLines("\n :: Predicting the maximum probability of a violation:")
predictTest <- predict(ParoleLog1, type = "response", newdata = test)
head(sort(predictTest, decreasing = TRUE), 1)
'org_babel_R_eoe'
predictTest <- predict(ParoleLog1, type = "response", newdata = test)

writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(test$violator, predictTest > 0.5)

TN <- 309; FP <- 5;
FN <- 40; TP <- 19;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
predictTest <- predict(ParoleLog1, type = "response", newdata = test)

writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(test$violator, predictTest > 0.5)

TN <- 309; FP <- 5;
FN <- 40; TP <- 19;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
predictTest <- predict(ParoleLog1, type = "response", newdata = test)

writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(test$violator, predictTest > 0.5)

TN <- 309; FP <- 5;
FN <- 40; TP <- 19;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(test)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
predictTest <- predict(ParoleLog1, type = "response", newdata = test)

writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(test$violator, predictTest > 0.5)

TN <- 167; FP <- 12;
FN <- 11; TP <- 12;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(test)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
predictTest <- predict(ParoleLog1, type = "response", newdata = test)

writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(test$violator, predictTest >= 0.5)

TN <- 167; FP <- 12;
FN <- 11; TP <- 12;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(test)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
writeLines("\n :: Naive Baseline")
table(test$violator)
'org_babel_R_eoe'
writeLines("\n :: Naive Baseline")
table(test$violator)

writeLines("\n :: The accuracy of the simple model:")
179 / (179 + 23)
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2:")
table(test$violator, predictTest >= 0.2)

TN <- 167; FP <- 12;
FN <- 11;  TP <- 12;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(test)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2:")
table(test$violator, predictTest >= 0.2)

TN <- 154; FP <- 25;
FN <- 6;  TP <- 17;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(test)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(test)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTest, test$violator)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTest, test$violator)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTest, test$violator)

writeLines("\n :: The AUC for the prediction function:")
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/loans.csv"

fileName <- "loans.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/loans.csv"

fileName <- "loans.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frames.")
loan <- read.csv("../data/loans.csv")
str(loan)
summary(loan)
'org_babel_R_eoe'
writeLines("\n :: Proportion of not fully paid loans:")
nrow(subset(loan, loan$not.fully.paid == 1)) / nrow(loan)
'org_babel_R_eoe'
writeLines("\n :: Variables with NA instances:")
summary(loan)
'org_babel_R_eoe'
head(loan[!is.na(loan$pub.rec), ])
length(complete.cases(loan))
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
length(complete.cases(loan))
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])

writeLines("\n :: Non complete cases analysis:")
loan$int.rate[!complete.cases(loan)]
'org_babel_R_eoe'
loan[!complete.cases(loan), ]
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])

writeLines("\n :: Non complete cases analysis:")
nrow(loan[!complete.cases(loan), ])
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])

writeLines("\n :: Non complete cases:")
nrow(loan[!complete.cases(loan), ])
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])

writeLines("\n :: Non complete cases:")
nrow(loan[!complete.cases(loan), ])

table(missing$not.fully.paid)
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loan)

writeLines("\n :: Number of observations with complete information:")
nrow(loan[complete.cases(loan), ])

writeLines("\n :: Non complete cases:")
nrow(loan[!complete.cases(loan), ])

table(loan[!complete.cases(loan), ]$not.fully.paid)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/loans_imputed.csv"

fileName <- "loans_imputed.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/loans_imputed.csv"

fileName <- "loans_imputed.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading imputed data into their data frame.")
loans <- read.csv("../data/loans.csv")
str(loans)
summary(loans)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
loans <- read.csv("../data/loans.csv")
str(loans)
summary(loans)
'org_babel_R_eoe'
writeLines("\n :: Proportion of not fully paid loans:")
nrow(subset(loans, loans$not.fully.paid == 1)) / nrow(loans)
'org_babel_R_eoe'
writeLines("\n :: Variables with NA instances:")
summary(loan)
'org_babel_R_eoe'
writeLines("\n :: Variables with NA instances:")
summary(loans)
'org_babel_R_eoe'
rm(loan)
writeLines("\n :: Variables with NA instances:")
summary(loans)
'org_babel_R_eoe'
writeLines("\n :: Number of loans:")
nrow(loans)

writeLines("\n :: Number of observations with complete information:")
nrow(loans[complete.cases(loans), ])

writeLines("\n :: Non complete cases:")
nrow(loans[!complete.cases(loans), ])

table(loans[!complete.cases(loans), ]$not.fully.paid)
'org_babel_R_eoe'
writeLines("\n :: Loading imputed data into their data frame.")
loans <- read.csv("../data/loans_imputed.csv")
str(loans)
summary(loans)
'org_babel_R_eoe'
writeLines("\n :: Loading imputed data into their data frame.")
loans <- read.csv("../data/loans_imputed.csv")
anyNA(loans)
'org_babel_R_eoe'
writeLines("\n :: Loading imputed data into their data frame.")
loans <- read.csv("../data/loans_imputed.csv")

writeLines("\n :: Verifying non NA existance:")
anyNA(loans)
'org_babel_R_eoe'
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
vars.for.imputation
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/loans_imputed.csv"

fileName <- "loans_imputed.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading imputed data into their data frame.")
loans <- read.csv("../data/loans_imputed.csv")

writeLines("\n :: Verifying non NA existance:")
anyNA(loans)
'org_babel_R_eoe'
library(mice)
writeLines("\n :: Split the loans dataset in training and testing datasets:")
set.seed(144)
library(caTools)
split <- sample.split(loans$not.fully.paid, SplitRatio = 0.7)
loansTraining <- subset(loans, split == TRUE)
loansTest <- subset(loans, split == FALSE)
'org_babel_R_eoe'
writeLines("\n :: Split the loans dataset in training and testing datasets:")
set.seed(144)
library(caTools)
split <- sample.split(loans$not.fully.paid, SplitRatio = 0.7)
loansTrain <- subset(loans, split == TRUE)
loansTest <- subset(loans, split == FALSE)
'org_babel_R_eoe'
writeLines("\n :: Building the logistic regression model 1")
LoansLog1 = glm(not.fully.paid ~ ., data = loansTrain, family = binomial)
summary(LoansLog1)
'org_babel_R_eoe'
writeLines("\n :: The value of Logit(A) - Logit(B)")
LogitAMinusLogitB <- -9.317e-03 * (700 - 710)
LogitAMinusLogitB
'org_babel_R_eoe'
writeLines("\n :: The value of O(A) / O(B):")
exp(LogitAMinusLogitB)
'org_babel_R_eoe'
writeLines("\n :: Predicting the probability of the testing set loans not being paid:")
predicted.risk <- predict(LoansLog1, type = "response", newdata = loansTest)
predicted.risk
'org_babel_R_eoe'
writeLines("\n :: Predicting the probability of the testing set loans not being paid:")
predicted.risk <- predict(LoansLog1, type = "response", newdata = loansTest)
loansTest$predicted.risk <- predicted.risk

writeLines("\n :: Calculate the confusion matrix:")
table(loansTest$not.fully.paid, loans$predicted.risk >= 0.5)
'org_babel_R_eoe'
writeLines("\n :: Predicting the probability of the testing set loans not being paid:")
predicted.risk <- predict(LoansLog1, type = "response", newdata = loansTest)
loansTest$predicted.risk <- predicted.risk

writeLines("\n :: Calculate the confusion matrix:")
table(loansTest$not.fully.paid, loansTest$predicted.risk >= 0.5)
'org_babel_R_eoe'
TN <- 2400; FP <- 13;
FN <- 457; TP <- 3;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(SongsTest)
OverallAccuracy
'org_babel_R_eoe'
TN <- 2400; FP <- 13;
FN <- 457; TP <- 3;

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(loansTest)
OverallAccuracy
'org_babel_R_eoe'
writeLines("\n :: Naive Baseline")
table(loansTest$not.fully.paid)

writeLines("\n :: The accuracy of the simple model:")
2413 / (2413 + 460)
'org_babel_R_eoe'
writeLines("\n :: Install package only once:")
## install.packages('ROCR', repos='http://cran.rstudio.com/')
library(ROCR)

writeLines("\n :: Prediction function:")
ROCRpred = prediction(predicted.risk, loansTest$not.fully.paid)

writeLines("\n :: The AUC for the prediction function:")
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: Install package only once:")
## install.packages('ROCR', repos='http://cran.rstudio.com/')
library(ROCR)

writeLines("\n :: Prediction function:")
ROCRpred = prediction(predicted.risk, loansTest$not.fully.paid)

writeLines("\n :: The AUC for the prediction function:")
as.numeric(performance(ROCRpred, "auc")@y.values)
'org_babel_R_eoe'
writeLines("\n :: Building the logistic regression model 2")
LoansLog2 <- glm(not.fully.paid ~ int.rate, data = loansTrain, family = binomial)
summary(LoansLog2)
'org_babel_R_eoe'
writeLines("\n :: Building the logistic regression model 2")
LoansLog2 <- glm(not.fully.paid ~ int.rate, data = loansTrain, family = binomial)
summary(LoansLog2)

writeLines("\n :: Remembering the Model 1: Loanslog1:")
summary(LoansLog1)
'org_babel_R_eoe'
writeLines("\n :: Correlation between int.rate and fico features:")
cor(train$int.rate, train$fico)
'org_babel_R_eoe'
writeLines("\n :: Correlation between int.rate and fico features:")
cor(loansTrain$int.rate, loansTrain$fico)
'org_babel_R_eoe'
q()
n
