StocksModelPredTest <- predict(StocksModel, stocksTest, type = "response")
ct = table(stocksTest$PositiveDec, StocksModelPredTest >= 0.5)

writeLines("\n :: The overall accuracy un the testing set is:")
(ct[1, 1] + ct[2, 2]) / nrow(stocksTest)
'org_babel_R_eoe'
sort(table(stocksTrain$PositiveDec))
writeLines("\n :: The baseline accuracy in the testing set:")
sum(stocksTest$PositiveDec == 1) / nrow(stocksTest)
'org_babel_R_eoe'
writeLines("\n :: Cleaning the outcome feature for clustering purposes...")
limitedTrain <- stocksTrain
limitedTrain$PositiveDec = NULL

limitedTest <- stocksTest
limitedTest$PositiveDec = NULL
'org_babel_R_eoe'
writeLines("\n :: Preprocessing to normalization purposes..")
library(caret)
preproc <- preProcess(limitedTrain)
normTrain <- predict(preproc, limitedTrain)
normTest <- predict(preproc, limitedTest)
'org_babel_R_eoe'
writeLines("\n :: The mean of the ReturnJan feature in the training set:")
mean(normTrain$ReturnJan)
'org_babel_R_eoe'
writeLines("\n :: The mean of the ReturnJan feature in the testing set:")
mean(normTest$ReturnJan)
'org_babel_R_eoe'
set.seed(144)
km <- kmeans(normTrain, 3)
kmClust <- km$cluster
table(kmClust)
'org_babel_R_eoe'
library(flexclust)
km.kcca <- as.kcca(km, normTrain)
clusterTrain <- predict(km.kcca)
clusterTest <- predict(km.kcca, newdata=normTest)

writeLines("\n :: The number of observations in the cluster 2 of the testing set:")
table(clusterTest)
'org_babel_R_eoe'
stocksTrain1 <- subset(stocksTrain, clusterTrain == 1)
stocksTest1  <- subset(stocksTest,  clusterTest == 1)
stocksTrain2 <- subset(stocksTrain, clusterTrain == 2)
stocksTest2  <- subset(stocksTest,  clusterTest == 2)
stocksTrain3 <- subset(stocksTrain, clusterTrain == 3)
stocksTest3  <- subset(stocksTest,  clusterTest == 3)
sort(tapply(stocksTrain$PositiveDec, clusterTrain, mean))
'org_babel_R_eoe'
StocksModel1 <- glm(PositiveDec ~ ., stocksTrain1, family = "binomial")
StocksModel2 <- glm(PositiveDec ~ ., stocksTrain2, family = "binomial")
StocksModel3 <- glm(PositiveDec ~ ., stocksTrain3, family = "binomial")
sort( (StocksModel1$coef > 0 | StocksModel2$coef > 0 |
       StocksModel3$coef > 0) & (StocksModel1$coef < 0 |
                               StocksModel2$coef < 0 |
                               StocksModel3$coef < 0))
'org_babel_R_eoe'
writeLines("\n :: Predicting in the testing set...")
PredictTest1 <- predict(StocksModel1, stocksTest1, type="response")
PredictTest2 <- predict(StocksModel2, stocksTest2, type="response")
PredictTest3 <- predict(StocksModel3, stocksTest3, type="response")

writeLines("\n :: Overall accuracy for each model 1:")
ct1 <- table(stocksTest1$PositiveDec, PredictTest1>=0.5)
(ct1[1,1]+ct1[2,2])/nrow(stocksTest1)

writeLines("\n :: Overall accuracy for each model 2:")
ct2 <- table(stocksTest2$PositiveDec, PredictTest2>=0.5)
(ct2[1,1]+ct2[2,2])/nrow(stocksTest2)

writeLines("\n :: Overall accuracy for each model 3:")
ct3 <- table(stocksTest3$PositiveDec, PredictTest3>=0.5)
(ct3[1,1]+ct3[2,2])/nrow(stocksTest3)
'org_babel_R_eoe'
writeLines("\n :: The overall test-set accuracy of the cluster-then-predict approach:")

AllPredictions <- c(PredictTest1, PredictTest2, PredictTest3)

AllOutcomes <- c(stocksTest1$PositiveDec, stocksTest2$PositiveDec,
                 stocksTest3$PositiveDec)

ct <- table(AllOutcomes, AllPredictions >= 0.5)

(ct[1, 1] + ct[2, 2]) / length(AllPredictions)
'org_babel_R_eoe'
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHO.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.table("../data/WHOu7.csv", header = TRUE)
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.table("../data/WHOu7.csv", header = TRUE)
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.csv("../data/WHOu7.csv")
str(who)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(WHO)
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
install.packages('ggplot2', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Simple linear regression model to predict the percentage\n of the population under 15, using the log of the fertility rate:")
mod <- lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(WHO)
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Simple linear regression model to predict the percentage\n of the population under 15, using the log of the fertility rate:")
mod <- lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
'org_babel_R_eoe'
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvt.csv"
fileName <- "mvt.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvt.csv"
fileName <- "mvt.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvt.csv"
fileName <- "mvt.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files(filePath)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvt.csv"
fileName <- "mvt.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
mvt <- read.table("../data/mvt.csv", header = TRUE)
str(mvt)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
mvt <- read.csv("../data/mvt.csv", stringsAsFactors=FALSE)
str(mvt)
'org_babel_R_eoe'
writeLines("\n :: Convert the Date variable to a format that R will recognize...")
mvt$Date <- strptime(mvt$Date, format = "%m/%d/%y %H:%M")
'org_babel_R_eoe'
writeLines("\n :: Extract the hour and the day of the week...")
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour <- mvt$Date$hour
'org_babel_R_eoe'
writeLines("\n :: Revising the structure of the dataframe mvt:")
str(mvt)
'org_babel_R_eoe'
writeLines("\n :: Need the total number of crimes on each day of the week:")
table(mvt$Weekday)
'org_babel_R_eoe'
writeLines("\n :: Need the total number of crimes on each day of the week:")
sort(table(mvt$Weekday))
'org_babel_R_eoe'
writeLines("\n :: Need the total number of crimes on each day of the week:")
sort(table(mvt$Weekday), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Save this table as a data frame:")
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
'org_babel_R_eoe'
writeLines("\n :: Create a counts table for the weekday and hour:")
table(mvt$Weekday, mvt$Hour)
'org_babel_R_eoe'
writeLines("\n :: Save this to a data frame:")
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
'org_babel_R_eoe'
writeLines("\n :: Convert the second variable, Var2, to numbers and call it Hour...")
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
'org_babel_R_eoe'
writeLines("\n :: Separate the weekends from the weekdays...")
DayHourCounts$Type <- ifelse((DayHourCounts$Var1 == "Sunday") |
                                     (DayHourCounts$Var1 ==
                                              "Saturday"), "Weekend",
                             "Weekday")
'org_babel_R_eoe'
writeLines("\n :: Fix the order of the days...")
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE,
                             levels = c("Monday", "Tuesday",
                                        "Wednesday", "Thursday",
                                        "Friday", "Saturday",
                                        "Sunday"))
'org_babel_R_eoe'
writeLines("\n :: Install new package: maps ...")
install.packages(c('maps', 'ggmap'), repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(maps)
writeLines("\n :: Library maps loaded...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: maps ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(maps)
library(ggmap)
writeLines("\n :: Library maps loaded...")
'org_babel_R_eoe'
writeLines("\n :: Load a map of Chicago into R...")
chicago <- get_map(location = "chicago", zoom = 11)
'org_babel_R_eoe'
writeLines("\n :: Round our latitude and longitude to 2 digits of accuracy,\nand create a crime counts data frame for each area:")
LatLonCounts <- as.data.frame(table(round(mvt$Longitude, 2),
                                    round(mvt$Latitude, 2)))
str(LatLonCounts)
'org_babel_R_eoe'
writeLines("\n :: Convert our Longitude and Latitude variable to numbers...")
LatLonCounts$Long <- as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat <- as.numeric(as.character(LatLonCounts$Var2))
'org_babel_R_eoe'
writeLines("\n :: removing the observations that have Freq = 0...")
str(LatLonCounts)
LatLonCounts2 <- subset(LatLonCounts, LatLonCounts$Freq > 0)
nrow(LatLonCounts) - nrow(LatLonCounts2)
'org_babel_R_eoe'
writeLines("\n :: removing the observations that have Freq = 0...")
str(LatLonCounts)
LatLonCounts2 <- subset(LatLonCounts, LatLonCounts$Freq > 0)

writeLines("\n :: The number of observations removed:")
nrow(LatLonCounts) - nrow(LatLonCounts2)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/murders.csv"
fileName <- "murders.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/murders.csv"
fileName <- "murders.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
murders <- read.csv("murders.csv")
str(murders)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
murders <- read.csv("../data/murders.csv")
str(murders)
'org_babel_R_eoe'
writeLines("\n :: Load the map of the US...")
statesMap <- map_data("state")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: Create a new variable called region with the lowercase names to match the statesMap...")
murders$region <- tolower(murders$State)
'org_babel_R_eoe'
writeLines("\n :: Create a new variable called region with the\nlowercase names to match the statesMap...")
murders$region <- tolower(murders$State)
'org_babel_R_eoe'
writeLines("\n :: Join the statesMap data and the murders data into one dataframe:")
murderMap <- merge(statesMap, murders, by = "region")
str(murderMap)
'org_babel_R_eoe'
writeLines("\n :: Create a new variable that is the number of murders per\n\t100,000 population...")
murderMap$MurderRate <- murderMap$Murders / murderMap$Population * 100000
'org_babel_R_eoe'
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(WHO)
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
## install.packages('ggplot2', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Simple linear regression model to predict the percentage\n of the population under 15, using the log of the fertility rate:")
mod <- lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/mvt.csv"
fileName <- "mvt.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
mvt <- read.csv("../data/mvt.csv", stringsAsFactors=FALSE)
str(mvt)
'org_babel_R_eoe'
writeLines("\n :: Convert the Date variable to a format that R will recognize...")
mvt$Date <- strptime(mvt$Date, format = "%m/%d/%y %H:%M")
'org_babel_R_eoe'
writeLines("\n :: Extract the hour and the day of the week...")
mvt$Weekday <- weekdays(mvt$Date)
mvt$Hour <- mvt$Date$hour
'org_babel_R_eoe'
writeLines("\n :: Revising the structure of the dataframe mvt:")
str(mvt)
'org_babel_R_eoe'
writeLines("\n :: Need the total number of crimes on each day of the week:")
sort(table(mvt$Weekday), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Save this table as a data frame:")
WeekdayCounts <- as.data.frame(table(mvt$Weekday))
str(WeekdayCounts)
'org_babel_R_eoe'
writeLines("\n :: Create a counts table for the weekday and hour:")
table(mvt$Weekday, mvt$Hour)
'org_babel_R_eoe'
writeLines("\n :: Save this to a data frame:")
DayHourCounts <- as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
'org_babel_R_eoe'
writeLines("\n :: Convert the second variable, Var2, to numbers and call it Hour...")
DayHourCounts$Hour <- as.numeric(as.character(DayHourCounts$Var2))
'org_babel_R_eoe'
writeLines("\n :: Separate the weekends from the weekdays...")
DayHourCounts$Type <- ifelse((DayHourCounts$Var1 == "Sunday") |
                                     (DayHourCounts$Var1 ==
                                              "Saturday"), "Weekend",
                             "Weekday")
'org_babel_R_eoe'
writeLines("\n :: Fix the order of the days...")
DayHourCounts$Var1 <- factor(DayHourCounts$Var1, ordered = TRUE,
                             levels = c("Monday", "Tuesday",
                                        "Wednesday", "Thursday",
                                        "Friday", "Saturday",
                                        "Sunday"))
'org_babel_R_eoe'
writeLines("\n :: Install new package: maps ...")
## install.packages(c('maps', 'ggmap'), repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(maps)
library(ggmap)
writeLines("\n :: Library maps loaded...")
'org_babel_R_eoe'
writeLines("\n :: Load a map of Chicago into R...")
chicago <- get_map(location = "chicago", zoom = 11)
'org_babel_R_eoe'
writeLines("\n :: Round our latitude and longitude to 2 digits of accuracy,\nand create a crime counts data frame for each area:")
LatLonCounts <- as.data.frame(table(round(mvt$Longitude, 2),
                                    round(mvt$Latitude, 2)))
str(LatLonCounts)
'org_babel_R_eoe'
writeLines("\n :: Convert our Longitude and Latitude variable to numbers...")
LatLonCounts$Long <- as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat <- as.numeric(as.character(LatLonCounts$Var2))
'org_babel_R_eoe'
writeLines("\n :: removing the observations that have Freq = 0...")
str(LatLonCounts)
LatLonCounts2 <- subset(LatLonCounts, LatLonCounts$Freq > 0)

writeLines("\n :: The number of observations removed:")
nrow(LatLonCounts) - nrow(LatLonCounts2)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/murders.csv"
fileName <- "murders.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
murders <- read.csv("../data/murders.csv")
str(murders)
'org_babel_R_eoe'
writeLines("\n :: Load the map of the US...")
statesMap <- map_data("state")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: Create a new variable called region with the\nlowercase names to match the statesMap...")
murders$region <- tolower(murders$State)
'org_babel_R_eoe'
writeLines("\n :: Join the statesMap data and the murders data into one dataframe:")
murderMap <- merge(statesMap, murders, by = "region")
str(murderMap)
'org_babel_R_eoe'
writeLines("\n :: Create a new variable that is the number of murders per\n\t100,000 population...")
murderMap$MurderRate <- murderMap$Murders / murderMap$Population * 100000
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intl.csv"
fileName <- "intl.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intl.csv"
fileName <- "intl.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intl.csv"
fileName <- "intl.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
        writeLines("\n :: File downloaded...")
}
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intl.csv"
fileName <- "intl.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Load ggplot library...")
library(ggplot2)

writeLines("\n :: Loading data into their data frame.")
# Load our data, which lives in intl.csv
intl <- read.csv("intl.csv")
str(intl)
'org_babel_R_eoe'
writeLines("\n :: Load ggplot library...")
library(ggplot2)

writeLines("\n :: Loading data into their data frame.")
# Load our data, which lives in intl.csv
intl <- read.csv("../data/intl.csv")
str(intl)
'org_babel_R_eoe'
writeLines("\n :: Make Region an ordered factor...")
# We can do this with the re-order command and transform command. 
intl <- transform(intl, Region = reorder(Region, -PercentOfIntl))

writeLines("\n :: Look at the structure:")
str(intl)
'org_babel_R_eoe'
writeLines("\n :: Make the percentages out of 100 instead of fractions...")
intl$PercentOfIntl <- intl$PercentOfIntl * 100
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intlall.csv"
fileName <- "intlall.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intlall.csv"
fileName <- "intlall.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Load the ggmap package...")
library(ggmap)

writeLines("\n :: Load in the international student data...")
intlall <- read.csv("../data/intlall.csv", stringsAsFactors = FALSE)

writeLines("\n :: Lets look at the first few rows:")
head(intlall)
'org_babel_R_eoe'
writeLines("\n :: Those NAs are really 0s, and we can replace them easily...")
intlall[is.na(intlall)] <- 0

writeLines("\n :: Now lets look again:")
head(intlall)
'org_babel_R_eoe'
writeLines("\n :: Load the world map...")
world_map <- map_data("world")
str(world_map)
'org_babel_R_eoe'
writeLines("\n :: Lets merge intlall into world_map using the merge command...")
world_map <- merge(world_map, intlall, by.x ="region", by.y = "Citizenship")
str(world_map)
'org_babel_R_eoe'
writeLines("\n :: Reorder the data...")
world_map <- world_map[order(world_map$group, world_map$order),]
'org_babel_R_eoe'
writeLines("\n :: Lets look for China:")
head(table(intlall$Citizenship), 20)
'org_babel_R_eoe'
writeLines("\n :: Lets "fix" that in the intlall dataset...")
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] <- "China"
'org_babel_R_eoe'
writeLines("\n :: Lets fix that in the intlall dataset...")
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] <- "China"
'org_babel_R_eoe'
writeLines("\n :: We'll repeat our merge and order from before...")
world_map <- merge(map_data("world"), intlall, 
                  by.x ="region",
                  by.y = "Citizenship")
world_map = world_map[order(world_map$group, world_map$order),]
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/households.csv"
fileName <- "households.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/households.csv"
fileName <- "households.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: First, lets make sure we have ggplot2 loaded...")
library(ggplot2)

writeLines("\n :: Now lets load our dataframe:")
households = read.csv("../data/households.csv")
str(households)
'org_babel_R_eoe'
writeLines("\n :: Load reshape2...")
library(reshape2)

writeLines("\n :: Lets look at the first two columns of our households dataframe:")
households[,1:2]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
head(melt(households, id="Year"))

households[,1:3]

melt(households, id="Year")[1:10,3]
melt(households, id="Year")[1:10,]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
head(melt(households, id="Year"))
'org_babel_R_eoe'
writeLines("\n :: Three few rows of our melted households dataframe:")
households[,1:3]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
melt(households, id="Year")[1:10,]
'org_babel_R_eoe'
q()
n
