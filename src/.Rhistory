
fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intlall.csv"
fileName <- "intlall.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/intlall.csv"
fileName <- "intlall.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Load the ggmap package...")
library(ggmap)

writeLines("\n :: Load in the international student data...")
intlall <- read.csv("../data/intlall.csv", stringsAsFactors = FALSE)

writeLines("\n :: Lets look at the first few rows:")
head(intlall)
'org_babel_R_eoe'
writeLines("\n :: Those NAs are really 0s, and we can replace them easily...")
intlall[is.na(intlall)] <- 0

writeLines("\n :: Now lets look again:")
head(intlall)
'org_babel_R_eoe'
writeLines("\n :: Load the world map...")
world_map <- map_data("world")
str(world_map)
'org_babel_R_eoe'
writeLines("\n :: Lets merge intlall into world_map using the merge command...")
world_map <- merge(world_map, intlall, by.x ="region", by.y = "Citizenship")
str(world_map)
'org_babel_R_eoe'
writeLines("\n :: Reorder the data...")
world_map <- world_map[order(world_map$group, world_map$order),]
'org_babel_R_eoe'
writeLines("\n :: Lets look for China:")
head(table(intlall$Citizenship), 20)
'org_babel_R_eoe'
writeLines("\n :: Lets "fix" that in the intlall dataset...")
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] <- "China"
'org_babel_R_eoe'
writeLines("\n :: Lets fix that in the intlall dataset...")
intlall$Citizenship[intlall$Citizenship == "China (People's Republic Of)"] <- "China"
'org_babel_R_eoe'
writeLines("\n :: We'll repeat our merge and order from before...")
world_map <- merge(map_data("world"), intlall, 
                  by.x ="region",
                  by.y = "Citizenship")
world_map = world_map[order(world_map$group, world_map$order),]
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/households.csv"
fileName <- "households.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/households.csv"
fileName <- "households.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("\n :: First, lets make sure we have ggplot2 loaded...")
library(ggplot2)

writeLines("\n :: Now lets load our dataframe:")
households = read.csv("../data/households.csv")
str(households)
'org_babel_R_eoe'
writeLines("\n :: Load reshape2...")
library(reshape2)

writeLines("\n :: Lets look at the first two columns of our households dataframe:")
households[,1:2]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
head(melt(households, id="Year"))

households[,1:3]

melt(households, id="Year")[1:10,3]
melt(households, id="Year")[1:10,]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
head(melt(households, id="Year"))
'org_babel_R_eoe'
writeLines("\n :: Three few rows of our melted households dataframe:")
households[,1:3]
'org_babel_R_eoe'
writeLines("\n :: First few rows of our melted households dataframe:")
melt(households, id="Year")[1:10,]
'org_babel_R_eoe'
q()
n
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
summary(statesMap$group)
'org_babel_R_eoe'
str(statesMap$group)
'org_babel_R_eoe'
as.Factor(statesMap$group)
'org_babel_R_eoe'
factor(statesMap$group)
'org_babel_R_eoe'
str(factor(statesMap$group))
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingData_Imputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
table(predictionDataFrame)
'org_babel_R_eoe'
names(predictionDataFrame)
'org_babel_R_eoe'
table(predictionDataFrame$TestPredictionBinary, predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
convert the Test.State variable to lowercase
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
?merge
dim(statesMap)
dim(predictionDataFrame)
dim(predictionMap)
head(statesMap)
head(predictionDataFrame)
head(statesMap)
head(predictionMap)
dim(predictionDataFrame)
q()
n
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
head(predictionMap)
names(predictionMap)
q()
n
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap$TestPrediction[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Loading the necessary libraries...")
library(ggplot2)
library(maps)
library(ggmap)
'org_babel_R_eoe'
writeLines("\n :: Load the US map in R...")
statesMap <- map_data("state")
'org_babel_R_eoe'
writeLines("\n :: Showing the structure of stateMap:")
str(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The number of groups:")
str(factor(statesMap$group))

writeLines("\n :: Another useful way:")
table(statesMap$group)

writeLines("\n :: Yet another way to calculate:")
length(table(statesMap$group))
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/PollingImputed.csv"
fileName <- "PollingImputed.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

writeLines("\n :: File downloaded...")
'org_babel_R_eoe'
writeLines("    Loading the imputed data into their data frame.")
polling <- read.table("../data/PollingImputed.csv", sep = ",", header = TRUE)
str(polling)
table(polling$Year)
summary(polling)
'org_babel_R_eoe'
writeLines("\n :: Subset data into training set and test set")
Train <- subset(polling, Year == 2004 | Year == 2008)
Test <- subset(polling, Year == 2012)
'org_babel_R_eoe'
writeLines("\n :: Revising the Testing data frame structure:")
str(Test)
'org_babel_R_eoe'
writeLines("\n :: Creating the Logistic Regression model...")
mod2 <- glm(Republican ~ SurveyUSA + DiffCount, data = Train,
            family = "binomial")

writeLines("\n :: Making preditions from Testing data set...")
TestPrediction <- predict(mod2, newdata = Test, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Creting binary preditions with a threshold of 50%...")
TestPredictionBinary <- as.numeric(TestPrediction > 0.5)
'org_babel_R_eoe'
writeLines("\n :: New data frame for plotting purposes...")
predictionDataFrame <- data.frame(TestPrediction,
                                  TestPredictionBinary, Test$State)
'org_babel_R_eoe'
writeLines("\n :: Number of states with TestPredictionbinary == 1:")
nrow(subset(predictionDataFrame, predictionDataFrame$TestPredictionBinary == 1))
'org_babel_R_eoe'
writeLines("\n :: The average predicted probability of our model:")
mean(predictionDataFrame$TestPrediction)
'org_babel_R_eoe'
writeLines("\n :: convert the Test.State variable to lowercase...")
predictionDataFrame$region <- tolower(predictionDataFrame$Test.State)
'org_babel_R_eoe'
writeLines("\n :: Merging the two data frames...")
predictionMap <- merge(statesMap, predictionDataFrame, by = "region")
'org_babel_R_eoe'
writeLines("\n :: Ordering the map data...")
predictionMap <- predictionMap[order(predictionMap$order),]
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the predition map:")
nrow(predictionMap)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the states map:")
nrow(statesMap)
'org_babel_R_eoe'
writeLines("\n :: The predicted probability for Florida:")
head(predictionMap[predictionMap$region == "florida", ], 1)
'org_babel_R_eoe'
q()
n
