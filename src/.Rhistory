list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the training data set")
FluTrain <- read.table("../data/FluTrain.csv", sep = ",", header = TRUE)
str(FluTrain)
summary(FluTrain)
'org_babel_R_eoe'
FluTrain[which.max(FluTrain$ILI), ]
'org_babel_R_eoe'
FluTrain[which.max(FluTrain$Queries), ]
'org_babel_R_eoe'
FluTrend1 <- lm(log(ILI) ~ Queries, data = FluTrain)
summary(FluTrend1)
'org_babel_R_eoe'
summary(FluTrend1)
'org_babel_R_eoe'
writeLines("\n :: Relationship between R^2 and Correlation")
Correlation <- cor(log(FluTrain$ILI), FluTrain$Queries)
Correlation^2
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/FluTest.csv"

fileName <- "FluTest.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Read the testing data set")
FluTest <- read.table("../data/FluTest.csv", sep = ",", header = TRUE)
str(FluTest)
summary(FluTest)
'org_babel_R_eoe'
PredTest1 = exp(predict(FluTrend1, newdata = FluTest))
summary(PredTest1)
'org_babel_R_eoe'
writeLines("\n :: estimate for the percentage of ILI-related physician\nvisits for the week of March 11, 2012:")

FluPredictTest <- cbind(FluTest, PredTest1)
names(FluPredictTest)
FluPredictTest[which(FluPredictTest$Week == "2012-03-11 - 2012-03-17"), 4]
'org_babel_R_eoe'
stmILI <- FluPredictTest[which(FluPredictTest$Week ==
                                       "2012-03-11 - 2012-03-17"), 4]
obsILI <- FluPredictTest[which(FluPredictTest$Week ==
                                       "2012-03-11 - 2012-03-17"), 2]

writeLines("\n :: Relative error for our observation:")
relError <- (obsILI - stmILI) / obsILI
relError
'org_babel_R_eoe'
writeLines("\n :: The RMSE of the testing data set is:")
sqrt(mean((FluPredictTest$PredTest1 - FluPredictTest$ILI)^2))
'org_babel_R_eoe'
library(zoo)
'org_babel_R_eoe'
ILILag2 <- lag(zoo(FluTrain$ILI), -2, na.pad = TRUE)
FluTrain$ILILag2 <- coredata(ILILag2)
'org_babel_R_eoe'
summary(ILILag2)
'org_babel_R_eoe'
FluTrend2 <- lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
summary(FluTrend2)
'org_babel_R_eoe'
ILILag2 <- lag(zoo(FluTest$ILI), -2, na.pad = TRUE)
FluTest$ILILag2 <- coredata(ILILag2)
summary(FluTest$ILILag2)
'org_babel_R_eoe'
tail(FluTrain, 10)
head(FluTest, 10)
'org_babel_R_eoe'
writeLines("\n :: Old values for the FluTest$ILILag2 first two values:")
tail(FluTrain)
head(FluTest)

writeLines("\n :: New first two values for the FluTest$ILILag2:")
FluTest$ILILag2[1] <- FluTrain$ILI[416]
FluTest$ILILag2[2] <- FluTrain$ILI[417]
tail(FluTrain)
head(FluTest)
'org_babel_R_eoe'
PredTest2 <- exp(predict(FluTrend2, newdata = FluTest))
summary(PredTest2)
'org_babel_R_eoe'
writeLines("\n :: The RMSE of the testing data set and the new model is:")
sqrt(mean((PredTest2 - FluTest$ILI)^2))
'org_babel_R_eoe'
data(state)
statedata <- cbind(data.frame(state.x77), state.abb, state.area,
                   state.center, state.division, state.name,
                   state.region)
writeLines("\n :: data set loaded...")
'org_babel_R_eoe'
str(statedata)
'org_babel_R_eoe'
tapply(statedata$HS.Grad, statedata$state.region, mean)
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
'org_babel_R_eoe'
subset(statedata, statedata$state.region ==
                    "Northeast")[which.max(subset(statedata,
                    statedata$state.region == "Northeast")$Murder), ]
'org_babel_R_eoe'
writeLines("\n :: Regression model 1 for life expectancy:")
Life.ExpRM <- lm(Life.Exp ~ Population + Income + Illiteracy + Murder
                 + HS.Grad + Frost + Area, data = statedata)
summary(Life.ExpRM)
'org_babel_R_eoe'
writeLines("\n :: Summary of the model 1")
summary(Life.ExpRM)
'org_babel_R_eoe'
writeLines("\n :: Regression model 2 for life expectancy:")
Life.ExpRM2 <- lm(Life.Exp ~ Population + Income + Illiteracy + Murder
                 + HS.Grad + Frost, data = statedata)
summary(Life.ExpRM2)
'org_babel_R_eoe'
writeLines("\n :: Regression model 3 for life expectancy:")
Life.ExpRM3 <- lm(Life.Exp ~ Population + Income + Murder + HS.Grad +
                          Frost, data = statedata)
summary(Life.ExpRM3)
'org_babel_R_eoe'
writeLines("\n :: Regression model 4 for life expectancy:")
Life.ExpRM4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost,
                  data = statedata)
summary(Life.ExpRM4)
'org_babel_R_eoe'
writeLines("\n :: Prediction data for model 4:")
head(sort(predict(Life.ExpRM4), decreasing = FALSE))
'org_babel_R_eoe'
writeLines("\n :: The state that actually has the lowest life expectancy:")
statedata[which.min(statedata$Life.Exp), 14]
'org_babel_R_eoe'
writeLines("\n :: Prediction data for model 4:")
head(sort(predict(Life.ExpRM4), decreasing = TRUE))
'org_babel_R_eoe'
writeLines("\n :: The state that actually has the lowest life expectancy:")
statedata[which.max(statedata$Life.Exp), 14]
'org_babel_R_eoe'
head(sort(abs(Life.ExpRM4$residuals)))
'org_babel_R_eoe'
head(sort(abs(Life.ExpRM4$residuals), decreasing = TRUE))
'org_babel_R_eoe'
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
names(quality)
head(quality$PoorCare)
plot(quality$OfficeVisits, quality$Narcotics)
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
q()
n
beta0 <- -1.5; beta1 <- 3; beta2 <- -0.5;
x1 <- 1; x2 <- 5
logit <- beta0 + (beta1 * x1) + (beta2 * x2)
writeLines("\n :: The value of logit is:")
logit
'org_babel_R_eoe'
writeLines("\n :: The value of odds is:")
exp(logit)
'org_babel_R_eoe'
P <- 1 / (1 + exp(-logit))
writeLines("\n :: The probability of P(y = 1) is:")
P
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
writeLines("\n :: Install and load caTools package (Only once)")
library(caTools)

writeLines("\n :: Randomly split data")
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
head(split)
'org_babel_R_eoe'
writeLines("\n :: Create training and testing sets")
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)

writeLines("\n :: The number of observations in the training set")
nrow(qualityTrain)

writeLines("\n :: The number of observations in the testing set")
nrow(qualityTest)
'org_babel_R_eoe'
writeLines("\n :: First Logistic Regression Model")
QualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics,
                  data=qualityTrain, family = binomial)
summary(QualityLog)
'org_babel_R_eoe'
writeLines("\n :: Make predictions on training set")
predictTrain <- predict(QualityLog, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Analyze predictions")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
'org_babel_R_eoe'
writeLines("\n :: create a logistic regression model to predict PoorCare using
the independent variables StartedOnCombination and ProviderCount:")
QualityLog2 <- glm(PoorCare ~ StartedOnCombination + ProviderCount,
                   data = qualityTrain, family = binomial)
summary(QualityLog2)
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(qualityTrain$PoorCare, predictTrain > 0.5)

writeLines("\n :: Sensitivity:")
10/25

writeLines("\n :: Specificity:")
70/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.7")
table(qualityTrain$PoorCare, predictTrain > 0.7)

writeLines("\n :: Sensitivity:")
8/25

writeLines("\n :: Specificity:")
73/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2")
table(qualityTrain$PoorCare, predictTrain > 0.2)

writeLines("\n :: Sensitivity:")
16/25

writeLines("\n :: Specificity:")
54/74
'org_babel_R_eoe'
TP <- 20; TN <- 15; FP <- 10; FN <- 5;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
TP <- 15; TN <- 20; FP <- 5; FN <- 10;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

writeLines("\n :: Sensitivity:")
10/25

writeLines("\n :: Specificity:")
70/74
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

writeLines("\n :: Sensitivity:")
6 / (2 + 6)

writeLines("\n :: Specificity:")
19 / (19 + 5)
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)

writeLines("\n :: The AUC of the test set is:")
auc
'org_babel_R_eoe'
q()
n
beta0 <- -1.5; beta1 <- 3; beta2 <- -0.5;
x1 <- 1; x2 <- 5
logit <- beta0 + (beta1 * x1) + (beta2 * x2)
writeLines("\n :: The value of logit is:")
logit
'org_babel_R_eoe'
writeLines("\n :: The value of odds is:")
exp(logit)
'org_babel_R_eoe'
P <- 1 / (1 + exp(-logit))
writeLines("\n :: The probability of P(y = 1) is:")
P
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/quality.csv"

fileName <- "quality.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
quality <- read.table("../data/quality.csv", sep = ",", header = TRUE)
str(quality)
summary(quality)
'org_babel_R_eoe'
writeLines("\n :: Install and load caTools package (Only once)")
## install.packages('caTools', repos='http://cran.rstudio.com/')
library(caTools)

writeLines("\n :: Randomly split data")
set.seed(88)
split <- sample.split(quality$PoorCare, SplitRatio = 0.75)
head(split)
'org_babel_R_eoe'
writeLines("\n :: Create training and testing sets")
qualityTrain <- subset(quality, split == TRUE)
qualityTest <- subset(quality, split == FALSE)

writeLines("\n :: The number of observations in the training set")
nrow(qualityTrain)

writeLines("\n :: The number of observations in the testing set")
nrow(qualityTest)
'org_babel_R_eoe'
writeLines("\n :: First Logistic Regression Model")
QualityLog <- glm(PoorCare ~ OfficeVisits + Narcotics,
                  data=qualityTrain, family = binomial)
summary(QualityLog)
'org_babel_R_eoe'
writeLines("\n :: Make predictions on training set")
predictTrain <- predict(QualityLog, type = "response")
'org_babel_R_eoe'
writeLines("\n :: Analyze predictions")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
'org_babel_R_eoe'
writeLines("\n :: create a logistic regression model to predict PoorCare using
the independent variables StartedOnCombination and ProviderCount:")
QualityLog2 <- glm(PoorCare ~ StartedOnCombination + ProviderCount,
                   data = qualityTrain, family = binomial)
summary(QualityLog2)
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.5:")
table(qualityTrain$PoorCare, predictTrain > 0.5)

writeLines("\n :: Sensitivity:")
10/25

writeLines("\n :: Specificity:")
70/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.7")
table(qualityTrain$PoorCare, predictTrain > 0.7)

writeLines("\n :: Sensitivity:")
8/25

writeLines("\n :: Specificity:")
73/74
'org_babel_R_eoe'
writeLines("\n :: Confusion matrix for threshold of 0.2")
table(qualityTrain$PoorCare, predictTrain > 0.2)

writeLines("\n :: Sensitivity:")
16/25

writeLines("\n :: Specificity:")
54/74
'org_babel_R_eoe'
TP <- 20; TN <- 15; FP <- 10; FN <- 5;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
TP <- 15; TN <- 20; FP <- 5; FN <- 10;
writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity
'org_babel_R_eoe'
writeLines("\n :: Install package only once")
## install.packages('ROCR', repos='http://cran.rstudio.com/')
library(ROCR)

writeLines("\n :: Prediction function")
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)

writeLines("\n :: Performance function")
ROCRperf = performance(ROCRpred, "tpr", "fpr")
'org_babel_R_eoe'
predictTest <- predict(QualityLog, type = "response", newdata = qualityTest)

writeLines("\n :: Confusion matrix for threshold of 0.3:")
table(qualityTest$PoorCare, predictTest > 0.3)

TN <- 19; TP <- 6; FN <- 2; FP <- 5

writeLines("\n :: Overall accuracy:")
OverallAccuracy <- (TN + TP) / nrow(qualityTest)
OverallAccuracy

writeLines("\n :: Sensitivity:")
Sensitivity <- TP / (TP + FN)
Sensitivity

writeLines("\n :: Specificity:")
Specificity <- TN / (TN + FP)
Specificity

writeLines("\n :: Overall error rate:")
OverallErrorRate <- (FP + FN) / nrow(qualityTest)
OverallErrorRate

writeLines("\n :: False Negative Error Rate:")
FalseNegativeErrorRate <- FN / (TP + FN)
FalseNegativeErrorRate

writeLines("\n :: False Positive Error Rate:")
FalsePositiveErrorRate <- FP / ( TN + FP)
FalsePositiveErrorRate
'org_babel_R_eoe'
ROCRpredTest <- prediction(predictTest, qualityTest$PoorCare)
auc <- as.numeric(performance(ROCRpredTest, "auc")@y.values)

writeLines("\n :: The AUC of the test set is:")
auc
'org_babel_R_eoe'
q()
n
