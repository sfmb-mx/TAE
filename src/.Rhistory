
writeLines("\n :: CART model 2 DONE...")
'org_babel_R_eoe'
StevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 100)

writeLines("\n :: CART model 3 DONE...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: randomForest ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(randomForest)
writeLines("\n :: Library randomForest loaded...")
'org_babel_R_eoe'
writeLines("\n :: Build random forest model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Converting outcome to factor...")
Train$Reverse <- as.factor(Train$Reverse)
Test$Reverse <- as.factor(Test$Reverse)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Make predictions in the test set:")
PredictForest <- predict(StevensForest, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest)

writeLines("\n :: Calculate the overall accuracy:")
(40 + 74) / (40 + 37 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest2 <- predict(StevensForest2, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest2)

writeLines("\n :: Calculate the overall accuracy:")
(43 + 74) / (43 + 34 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(200)
StevensForest3 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest3 <- predict(StevensForest3, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest3)

writeLines("\n :: Calculate the overall accuracy:")
(44 + 76) / (44 + 33 + 17 + 76)
'org_babel_R_eoe'
writeLines("\n :: Install new package: Caret and e1071 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(caret)
library(e1071)
writeLines("\n :: Library Caret and e1071 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Define cross-validation experiment:")
numFolds <- trainControl( method = "cv", number = 10 )
cpGrid <- expand.grid(.cp = seq(0.01, 0.5, 0.01))
'org_babel_R_eoe'
writeLines("\n :: Perform the cross validation:")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt
      + Unconst, data = Train, method = "rpart", trControl = numFolds,
      tuneGrid = cpGrid)
'org_babel_R_eoe'
writeLines("\n :: Create a new CART model:")
StevensTreeCV <- rpart(Reverse ~ Circuit + Issue + Petitioner +
                               Respondent + LowerCourt + Unconst, data
                       = Train, method="class", cp = 0.19)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCV <- predict(StevensTreeCV, newdata = Test, type = "class")

table(Test$Reverse, PredictCV)
writeLines("\n :: Calculate the overall accuracy:")
(59 + 64)/(59 + 18 + 29 + 64)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest2 <- predict(StevensForest2, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest2)

writeLines("\n :: Calculate the overall accuracy:")
(43 + 74) / (43 + 34 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Proportion of observations of A:")
A <- 14; B <- 6;
A / (A + B)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/stevens.csv"

fileName <- "stevens.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
stevens <- read.table("../data/stevens.csv", sep = ",", header = TRUE)

str(stevens)
summary(stevens)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
library(caTools)
set.seed(3000)

spl <- sample.split(stevens$Reverse, SplitRatio = 0.7)
Train <- subset(stevens, spl == TRUE)
Test <- subset(stevens, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(Train)

writeLines("\n :: Dimensions of the testing set:")
dim(Test)
'org_babel_R_eoe'
writeLines("\n :: Install new package: rpart ...")

writeLines("\n :: NOTE: Please comment after install once...")

writeLines("\n :: Loading rpart and rpart.plot...")
library(rpart)
library(rpart.plot)

writeLines("\n :: rpart and r.part.plot libraries loaded...")
'org_babel_R_eoe'
writeLines("\n :: CART model DONE...")
StevensTree <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 25)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCART <- predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)

writeLines("\n :: Overall accuracy:")
(41+71)/(41+36+22+71)
'org_babel_R_eoe'
writeLines("\n :: ROC curve:")
library(ROCR)

PredictROC <- predict(StevensTree, newdata = Test)
head(PredictROC)

pred <- prediction(PredictROC[,2], Test$Reverse)
perf <- performance(pred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: The AUC for the CART:")
as.numeric(performance(pred, "auc")@y.values)
'org_babel_R_eoe'
StevensTree2 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 5)

writeLines("\n :: CART model 2 DONE...")
'org_babel_R_eoe'
StevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 100)

writeLines("\n :: CART model 3 DONE...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: randomForest ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(randomForest)
writeLines("\n :: Library randomForest loaded...")
'org_babel_R_eoe'
writeLines("\n :: Build random forest model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Converting outcome to factor...")
Train$Reverse <- as.factor(Train$Reverse)
Test$Reverse <- as.factor(Test$Reverse)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Make predictions in the test set:")
PredictForest <- predict(StevensForest, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest)

writeLines("\n :: Calculate the overall accuracy:")
(40 + 74) / (40 + 37 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest2 <- predict(StevensForest2, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest2)

writeLines("\n :: Calculate the overall accuracy:")
(43 + 74) / (43 + 34 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(200)
StevensForest3 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest3 <- predict(StevensForest3, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest3)

writeLines("\n :: Calculate the overall accuracy:")
(44 + 76) / (44 + 33 + 17 + 76)
'org_babel_R_eoe'
writeLines("\n :: Install new package: Caret and e1071 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(caret)
library(e1071)
writeLines("\n :: Library Caret and e1071 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Define cross-validation experiment:")
numFolds <- trainControl( method = "cv", number = 10 )
cpGrid <- expand.grid(.cp = seq(0.01, 0.5, 0.01))
'org_babel_R_eoe'
writeLines("\n :: Perform the cross validation:")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt
      + Unconst, data = Train, method = "rpart", trControl = numFolds,
      tuneGrid = cpGrid)
'org_babel_R_eoe'
writeLines("\n :: Create a new CART model:")
StevensTreeCV <- rpart(Reverse ~ Circuit + Issue + Petitioner +
                               Respondent + LowerCourt + Unconst, data
                       = Train, method="class", cp = 0.19)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCV <- predict(StevensTreeCV, newdata = Test, type = "class")

table(Test$Reverse, PredictCV)
writeLines("\n :: Calculate the overall accuracy:")
(59 + 64)/(59 + 18 + 29 + 64)
'org_babel_R_eoe'
writeLines("\n :: Proportion of observations of A:")
A <- 14; B <- 6;
A / (A + B)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/stevens.csv"

fileName <- "stevens.csv"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
stevens <- read.table("../data/stevens.csv", sep = ",", header = TRUE)

str(stevens)
summary(stevens)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
library(caTools)
set.seed(3000)

spl <- sample.split(stevens$Reverse, SplitRatio = 0.7)
Train <- subset(stevens, spl == TRUE)
Test <- subset(stevens, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(Train)

writeLines("\n :: Dimensions of the testing set:")
dim(Test)
'org_babel_R_eoe'
writeLines("\n :: Install new package: rpart ...")

writeLines("\n :: NOTE: Please comment after install once...")

writeLines("\n :: Loading rpart and rpart.plot...")
library(rpart)
library(rpart.plot)

writeLines("\n :: rpart and r.part.plot libraries loaded...")
'org_babel_R_eoe'
writeLines("\n :: CART model DONE...")
StevensTree <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 25)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCART <- predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)

writeLines("\n :: Overall accuracy:")
(41+71)/(41+36+22+71)
'org_babel_R_eoe'
writeLines("\n :: ROC curve:")
library(ROCR)

PredictROC <- predict(StevensTree, newdata = Test)
head(PredictROC)

pred <- prediction(PredictROC[,2], Test$Reverse)
perf <- performance(pred, "tpr", "fpr")
'org_babel_R_eoe'
writeLines("\n :: The AUC for the CART:")
as.numeric(performance(pred, "auc")@y.values)
'org_babel_R_eoe'
StevensTree2 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 5)

writeLines("\n :: CART model 2 DONE...")
'org_babel_R_eoe'
StevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
            Respondent + LowerCourt + Unconst, data =
            Train, method = "class", minbucket = 100)

writeLines("\n :: CART model 3 DONE...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: randomForest ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(randomForest)
writeLines("\n :: Library randomForest loaded...")
'org_babel_R_eoe'
writeLines("\n :: Build random forest model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Converting outcome to factor...")
Train$Reverse <- as.factor(Train$Reverse)
Test$Reverse <- as.factor(Test$Reverse)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
StevensForest <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )
summary(StevensForest)
'org_babel_R_eoe'
writeLines("\n :: Make predictions in the test set:")
PredictForest <- predict(StevensForest, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest)

writeLines("\n :: Calculate the overall accuracy:")
(40 + 74) / (40 + 37 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest2 <- predict(StevensForest2, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest2)

writeLines("\n :: Calculate the overall accuracy:")
(43 + 74) / (43 + 34 + 19 + 74)
'org_babel_R_eoe'
writeLines("\n :: Try again to build the RF model:")
set.seed(200)
StevensForest3 <- randomForest(Reverse ~ Circuit + Issue + Petitioner +
                                      Respondent + LowerCourt +
                              Unconst, data = Train, ntree = 200,
                              nodesize = 25 )

writeLines("\n :: Make predictions in the test set:")
PredictForest3 <- predict(StevensForest3, newdata = Test)

writeLines("\n :: Build the confusion matrix (random component in RF):")
table(Test$Reverse, PredictForest3)

writeLines("\n :: Calculate the overall accuracy:")
(44 + 76) / (44 + 33 + 17 + 76)
'org_babel_R_eoe'
writeLines("\n :: Install new package: Caret and e1071 ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(caret)
library(e1071)
writeLines("\n :: Library Caret and e1071 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Define cross-validation experiment:")
numFolds <- trainControl( method = "cv", number = 10 )
cpGrid <- expand.grid(.cp = seq(0.01, 0.5, 0.01))
'org_babel_R_eoe'
writeLines("\n :: Perform the cross validation:")
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt
      + Unconst, data = Train, method = "rpart", trControl = numFolds,
      tuneGrid = cpGrid)
'org_babel_R_eoe'
writeLines("\n :: Create a new CART model:")
StevensTreeCV <- rpart(Reverse ~ Circuit + Issue + Petitioner +
                               Respondent + LowerCourt + Unconst, data
                       = Train, method="class", cp = 0.19)
'org_babel_R_eoe'
writeLines("\n :: Make predictions:")
PredictCV <- predict(StevensTreeCV, newdata = Test, type = "class")

table(Test$Reverse, PredictCV)
writeLines("\n :: Calculate the overall accuracy:")
(59 + 64)/(59 + 18 + 29 + 64)
'org_babel_R_eoe'
q()
c
q()
y
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
        unzip("ClaimsData.csv.zip", "ClaimsData.csv")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
        unzip("ClaimsData.csv.zip", "ClaimsData.csv")
}

list.files("../data")
'org_babel_R_eoe'
ls()
list.files("../data")
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
        unzip("../data/ClaimsData.csv.zip", "../data/ClaimsData.csv")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
        unzip("../data/ClaimsData.csv.zip", "../data/ClaimsData.csv")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/ClaimsData.csv.zip"

fileName <- "ClaimsData.csv.zip"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
ClaimsData <- read.table("../data/ClaimsData.csv", sep = ",", header = TRUE)

str(ClaimsData)
summary(ClaimsData)
'org_babel_R_eoe'
q()
n
