writeLines("\n :: Any NA values:")
anyNA(eTrain$color)

writeLines("\n :: The product line:")
table(eTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
m <- table(eTrain$biddable, eTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eTrain$condition, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eTrain$condition, eTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eTrain$cellular, eTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eTrain$color, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eTrain$storage, eTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[2, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eTrain$storage, eTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eTrain$productline, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ biddable + startprice + condition + cellular +
                        carrier + color + storage + productline, data
                        = eTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ biddable + startprice + condition + storage + productline, data
                        = eTrain, family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eTest$cellular <- as.integer(eTest$cellular)
eTest$storage <- as.integer(eTest$storage)

writeLines("\n :: eTest new structure:")
str(eTest)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        storage + productline, data = eTrain, family =
                                                               binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ biddable + startprice + condition + storage +
                        productline, data = eTrain, family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: biddable:")
anyNA(eBayTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayTrain)
'org_babel_R_eoe'
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)
'org_babel_R_eoe'
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayTrain)
'org_babel_R_eoe'
eBayTrain <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayTest <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayTrain, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayTrain)
'org_babel_R_eoe'
eBayTrain$cellular <- as.integer(eBayTrain$cellular)
eBayTrain$storage <- as.integer(eBayTrain$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayTrain$sold, SplitRatio = 0.75)

eTrain <- subset(eBayTrain, spl == TRUE)
eTest <- subset(eBayTrain, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eTrain$sold)[1] / (table(eTrain$sold)[1] + table(eTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eTrain$color)

writeLines("\n :: The product line:")
table(eTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
m <- table(eTrain$biddable, eTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eTrain$condition, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eTrain$condition, eTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eTrain$cellular, eTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eTrain$color, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eTrain$storage, eTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eTrain$productline, eTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ biddable + startprice + condition + storage +
                        productline, data = eTrain, family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eTest$cellular <- as.integer(eTest$cellular)
eTest$storage <- as.integer(eTest$storage)

writeLines("\n :: eTest new structure:")
str(eTest)
'org_babel_R_eoe'
PredTest <- predict(eBayLR02, newdata = eTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
PredTest <- predict(eBayLR02, newdata = eTest, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eTest, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayTrain$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
q()
n
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayTrain$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayTrain$condition, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayTrain$condition, eBayTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayTrain$cellular, eBayTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayTrain$color, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayTrain$storage, eBayTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ biddable + startprice + condition + storage +
                        productline, data = eBayTrain, family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTest$cellular <- as.integer(eBayTest$cellular)
eBayTest$storage <- as.integer(eBayTest$storage)

writeLines("\n :: eBayTest new structure:")
str(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayTest, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: The proportion of 16GB storage sold:")
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayTrain$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayTrain$condition, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayTrain$condition, eBayTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayTrain$cellular, eBayTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayTrain$color, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayTrain$storage, eBayTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ biddable + startprice + condition + storage +
                        productline, data = eBayTrain, family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTest$cellular <- as.integer(eBayTest$cellular)
eBayTest$storage <- as.integer(eBayTest$storage)

writeLines("\n :: eBayTest new structure:")
str(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayTest, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueId + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
names(eBayTrain)
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        storage + productline, data = eBayTrain,
                family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets

library(parallel)                       # Parallel computation

library(mice)                           # Imputation library
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "storage", "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS["storage"]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
set.seed(pi)
imputed <- mice(eBaySimple)
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "storage", "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets

library(parallel)                       # Parallel computation

library(mice)                           # Imputation library
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "storage", "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayTrain$condition, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayTrain$condition, eBayTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayTrain$cellular, eBayTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayTrain$color, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayTrain$storage, eBayTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        storage + productline, data = eBayTrain,
                family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTest$cellular <- as.integer(eBayTest$cellular)
eBayTest$storage <- as.integer(eBayTest$storage)

writeLines("\n :: eBayTest new structure:")
str(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayTest, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        storage + productline, data = eBayTrain,
                family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation, type = "response")
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
          = FALSE)
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions

library(ggplot2)                        # Graphical libraries

library(caTools)                        # Partition data sets

library(parallel)                       # Parallel computation

library(mice)                           # Imputation library
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$storage <- as.integer(eBayDS$storage)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "storage", "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS, spl == TRUE)
eBayTest <- subset(eBayDS, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayTrain)
'org_babel_R_eoe'
writeLines("\n :: The baseline model:")
table(eBayTrain$sold)

writeLines("\n :: The baseline model accuracy (NOT SOLD) is:")
table(eBayTrain$sold)[1] / (table(eBayTrain$sold)[1] + table(eBayTrain$sold)[2])
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayTrain$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayTrain$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$carrier)

writeLines("\n :: The color of iPads:")
table(eBayTrain$color)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$color)

writeLines("\n :: The product line:")
table(eBayTrain$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayTrain$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayTrain$biddable, eBayTrain$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayTrain$condition, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayTrain$condition, eBayTrain$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayTrain$cellular, eBayTrain$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayTrain$color, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayTrain$storage, eBayTrain$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[1, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayTrain$productline, eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
all the independent variables:")

eBayLR01 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        cellular + carrier + color + storage +
                        productline, data = eBayTrain, family = binomial)

summary(eBayLR01)
'org_babel_R_eoe'
writeLines("\n :: Create a logistic regression model to predict sold using
the selected independent variables:")

eBayLR02 <- glm(sold ~ UniqueID + biddable + startprice + condition +
                        storage + productline, data = eBayTrain,
                family = binomial)
summary(eBayLR02)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayTest$cellular <- as.integer(eBayTest$cellular)
eBayTest$storage <- as.integer(eBayTest$storage)

writeLines("\n :: eBayTest new structure:")
str(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayTest, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayTest$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR2.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayValidation, type = "response")

summary(PredTest)
'org_babel_R_eoe'
writeLines("\n :: Converting data types in the dataframe...")

eBayValidation$cellular <- as.integer(eBayValidation$cellular)
eBayValidation$storage <- as.integer(eBayValidation$storage)

writeLines("\n :: eBayValidation new structure:")
str(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayValidation, type = "response")

summary(PredTest)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                       "condition", "storage", "productline")]
summary(eBaySimple)

set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)

writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayValidation$storage <- imputed$storage
summary(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Probabilities test vector generation:")
PredTest <- predict(eBayLR02, newdata = eBayValidation, type = "response")

summary(PredTest)
'org_babel_R_eoe'
MySubmission <- data.frame(UniqueID = eBayValidation$UniqueID, Probability1
                           = PredTest)

write.csv(MySubmission, "../data/SubmissionLR3.csv", row.names =
                                                             FALSE)

writeLines("\n :: Submission file generated...")
'org_babel_R_eoe'
q()
n
