'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Specify number of clusters k = 5...")
k <- 5

writeLines("\n :: Run k-means...")
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
'org_babel_R_eoe'
writeLines("\n :: Extract clusters:")
healthyClusters <- KMC$cluster
'org_babel_R_eoe'
writeLines("\n :: Extract clusters centers intensities:")
KMC$centers
'org_babel_R_eoe'
writeLines("\n :: Extract cluster 2 center intensity:")
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters sizes:")
KMC$size
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image. Loading the test data...")

tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorMatrix <- t(tumorMatrix)[,nrow(tumorMatrix):1]
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Install new package: flexclust ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(flexclust)
writeLines("\n :: Library flexclust loaded...")
'org_babel_R_eoe'
writeLines("\n :: Apply clusters from before to new image, using the flexclust package...")
KMC.kcca <- as.kcca(KMC, healthyVector)
'org_babel_R_eoe'
writeLines("\n :: Clustering with the testing data...")
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
8
q()
n
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/dailykos.csv"
fileName <- "dailykos.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")
if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
dailykos <- read.table("../data/dailykos.csv", sep = ",", header = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
kosDist <- dist(dailykos, method = "euclidean")

writeLines("\n :: Hierarchical clustering...")
kosHierClust <- hclust(kosDist, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Dimensions of the kosDist matrix:")
dim(kosDist)

writeLines("\n :: Summary of the kosDist matrix:")
min(kosDist)

writeLines("\n :: Dimensions of distance vector:")
n <- length(kosDist)
n

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Subsetting in 7 clusters...")
clusterGroups <- cutree(kosHierClust, k <- 7)

hcluster1 <- subset(dailykos, clusterGroups==1)
hcluster2 <- subset(dailykos, clusterGroups==2)
hcluster3 <- subset(dailykos, clusterGroups==3)
hcluster4 <- subset(dailykos, clusterGroups==4)
hcluster5 <- subset(dailykos, clusterGroups==5)
hcluster6 <- subset(dailykos, clusterGroups==6)
hcluster7 <- subset(dailykos, clusterGroups==7)
'org_babel_R_eoe'
writeLines("\n :: The cluster 3 dimensions:")
dim(hcluster3)
'org_babel_R_eoe'
writeLines("\n :: Number of observations by cluster:")
c(nrow(hcluster1), nrow(hcluster2), nrow(hcluster3), nrow(hcluster4),
  nrow(hcluster5), nrow(hcluster6), nrow(hcluster7))
'org_babel_R_eoe'
writeLines("\n :: The top 6 words in each cluster:")
tail(sort(colMeans(hcluster1)))
'org_babel_R_eoe'
writeLines("\n :: Most frequent word for cluster 1:")
tail(sort(colMeans(hcluster1)))

writeLines("\n :: Most frequent word for cluster 2:")
tail(sort(colMeans(hcluster2)))

writeLines("\n :: Most frequent word for cluster 3:")
tail(sort(colMeans(hcluster3)))

writeLines("\n :: Most frequent word for cluster 4:")
tail(sort(colMeans(hcluster4)))

writeLines("\n :: Most frequent word for cluster 5:")
tail(sort(colMeans(hcluster5)))

writeLines("\n :: Most frequent word for cluster 6:")
tail(sort(colMeans(hcluster6)))

writeLines("\n :: Most frequent word for cluster 7:")
tail(sort(colMeans(hcluster7)))
'org_babel_R_eoe'
set.seed(1000)
kosKmeans <- kmeans(dailykos, 7)
kosCluster <- kosKmeans$cluster
sort(table(kosCluster), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Subsetting each cluster content...")
kcluster1 <- subset(dailykos, kosCluster==1)
kcluster2 <- subset(dailykos, kosCluster==2)
kcluster3 <- subset(dailykos, kosCluster==3)
kcluster4 <- subset(dailykos, kosCluster==4)
kcluster5 <- subset(dailykos, kosCluster==5)
kcluster6 <- subset(dailykos, kosCluster==6)
kcluster7 <- subset(dailykos, kosCluster==7)

tail(sort(colMeans(kcluster3)))
tail(sort(colMeans(kcluster2)))
'org_babel_R_eoe'
writeLines("\n :: Most frequent word for cluster 1:")
tail(sort(colMeans(kcluster1)))

writeLines("\n :: Most frequent word for cluster 2:")
tail(sort(colMeans(kcluster2)))

writeLines("\n :: Most frequent word for cluster 3:")
tail(sort(colMeans(kcluster3)))

writeLines("\n :: Most frequent word for cluster 4:")
tail(sort(colMeans(kcluster4)))

writeLines("\n :: Most frequent word for cluster 5:")
tail(sort(colMeans(kcluster5)))

writeLines("\n :: Most frequent word for cluster 6:")
tail(sort(colMeans(kcluster6)))

writeLines("\n :: Most frequent word for cluster 7:")
tail(sort(colMeans(kcluster7)))
'org_babel_R_eoe'
table(clusterGroups, kosCluster)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/AirlinesCluster.csv"
fileName <- "AirlinesCluster.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")
if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
airlines <- read.table("../data/AirlinesCluster.csv", sep = ",",
                       header = TRUE)
summary(airlines)
'org_babel_R_eoe'
writeLines("\n :: Install new package: caret ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(caret)
writeLines("\n :: Library caret loaded...")
'org_babel_R_eoe'
writeLines("\n :: Preprocessing the data...")
preproc <- preProcess(airlines)
airlinesNorm <- predict(preproc, airlines)
summary(airlinesNorm)

writeLines("\n :: Standard deviation of each variable:")
sd(airlinesNorm$Balance)
sd(airlinesNorm$BonusMiles)
sd(airlinesNorm$BonusTrans)
sd(airlinesNorm$DaysSinceEnroll)
sd(airlinesNorm$FlightMiles)
sd(airlinesNorm$FlightTrans)
sd(airlinesNorm$QualMiles)

writeLines("\n :: Maximum value in the variable:")
data.frame(x=sort(sapply(airlinesNorm, max)))

writeLines("\n :: Minimum value in the variable:")
data.frame(x=sort(sapply(airlinesNorm, min)))
'org_babel_R_eoe'
writeLines("\n :: Clustering with the hierarchial method...")
airDist <- dist(airlinesNorm, method = "euclidean")
airHclust <- hclust(airDist, method = "ward.D")
'org_babel_R_eoe'
clusterGroups <- cutree(airHclust, k = 5)
table(clusterGroups)
'org_babel_R_eoe'
writeLines("\n :: Other way to calculate the same:")
lapply(split(airlines, clusterGroups), colMeans)
'org_babel_R_eoe'
out <- data.frame()

for (n in names(airlines)) {
  out <- rbind(out, tapply(airlines[,n], clusterGroups, mean))
}

names(out) <- 1:5
out <- data.frame(t(out))
names(out) <- names(airlines)
out
'org_babel_R_eoe'
out
'org_babel_R_eoe'
out
'org_babel_R_eoe'
out
'org_babel_R_eoe'
out
'org_babel_R_eoe'
out
'org_babel_R_eoe'
set.seed(88)
airKmeans <- kmeans(airlinesNorm, 5, iter.max = 1000)
airKclust <- airKmeans$cluster
sum(table(airKclust) > 1000)
'org_babel_R_eoe'
out2 = data.frame()
for (n in names(airlines)) {
  out2 = rbind(out2, tapply(airlines[,n], airKclust, mean))
}
names(out2) = 1:5
out2 = data.frame(t(out2))
names(out2) = names(airlines)
'org_babel_R_eoe'
writeLines("\n :: Centroids of hierarchial clustering:")
out

writeLines("\n :: Centroids of k-means clustering:")
out2
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/StocksCluster.csv"
fileName <- "StocksCluster.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")
if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}
list.files("../data/")
'org_babel_R_eoe'
writeLines("    Loading data set into their data frame...")
stocks <- read.table("../data/StocksCluster.csv", sep = ",", header = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Number of observations in the stock dataframe:")
nrow(stocks)
'org_babel_R_eoe'
writeLines("\n :: Proportion of positive returns in December:")
nrow(subset(stocks, stocks$PositiveDec == 1)) / nrow(stocks)

writeLines("\n :: Other way to calculate the proportion:")
prop.table(table(stocks$PositiveDec>0))
'org_babel_R_eoe'
writeLines("\n :: Install new package: corrplot ...")
writeLines("\n :: NOTE: Please comment after install once...")

library(corrplot)
writeLines("\n :: Library corrplot loaded...")
'org_babel_R_eoe'
head(sort(abs(cor(stocks)), decreasing = TRUE), 20)
'org_babel_R_eoe'
writeLines("\n :: Correlation between stocks features:")
cor(stocks)
'org_babel_R_eoe'
writeLines("\n :: Means by feature:")
sort(colMeans(stocks[1:11]), decreasing = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Initial logistic regression model...")
library(caTools)
set.seed(144)
spl <- sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain <- subset(stocks, spl == TRUE)
stocksTest <- subset(stocks, spl == FALSE)
'org_babel_R_eoe'
StocksModel <- glm(PositiveDec  ~ ., stocksTrain, family = "binomial")
StocksModelPred <- predict(StocksModel, stocksTrain, type = "response")
ct <- table(stocksTrain$PositiveDec, StocksModelPred >= 0.5)
(ct[1, 1] + ct[2, 2])/ nrow(stocksTrain)
'org_babel_R_eoe'
StocksModelPredTest <- predict(StocksModel, stocksTest, type = "response")
ct = table(stocksTest$PositiveDec, StocksModelPredTest >= 0.5)

writeLines("\n :: The overall accuracy un the testing set is:")
(ct[1, 1] + ct[2, 2]) / nrow(stocksTest)
'org_babel_R_eoe'
sort(table(stocksTrain$PositiveDec))
writeLines("\n :: The baseline accuracy in the testing set:")
sum(stocksTest$PositiveDec == 1) / nrow(stocksTest)
'org_babel_R_eoe'
writeLines("\n :: Cleaning the outcome feature for clustering purposes...")
limitedTrain <- stocksTrain
limitedTrain$PositiveDec = NULL

limitedTest <- stocksTest
limitedTest$PositiveDec = NULL
'org_babel_R_eoe'
writeLines("\n :: Preprocessing to normalization purposes..")
library(caret)
preproc <- preProcess(limitedTrain)
normTrain <- predict(preproc, limitedTrain)
normTest <- predict(preproc, limitedTest)
'org_babel_R_eoe'
writeLines("\n :: The mean of the ReturnJan feature in the training set:")
mean(normTrain$ReturnJan)
'org_babel_R_eoe'
writeLines("\n :: The mean of the ReturnJan feature in the testing set:")
mean(normTest$ReturnJan)
'org_babel_R_eoe'
set.seed(144)
km <- kmeans(normTrain, 3)
kmClust <- km$cluster
table(kmClust)
'org_babel_R_eoe'
library(flexclust)
km.kcca <- as.kcca(km, normTrain)
clusterTrain <- predict(km.kcca)
clusterTest <- predict(km.kcca, newdata=normTest)

writeLines("\n :: The number of observations in the cluster 2 of the testing set:")
table(clusterTest)
'org_babel_R_eoe'
stocksTrain1 <- subset(stocksTrain, clusterTrain == 1)
stocksTest1  <- subset(stocksTest,  clusterTest == 1)
stocksTrain2 <- subset(stocksTrain, clusterTrain == 2)
stocksTest2  <- subset(stocksTest,  clusterTest == 2)
stocksTrain3 <- subset(stocksTrain, clusterTrain == 3)
stocksTest3  <- subset(stocksTest,  clusterTest == 3)
sort(tapply(stocksTrain$PositiveDec, clusterTrain, mean))
'org_babel_R_eoe'
StocksModel1 <- glm(PositiveDec ~ ., stocksTrain1, family = "binomial")
StocksModel2 <- glm(PositiveDec ~ ., stocksTrain2, family = "binomial")
StocksModel3 <- glm(PositiveDec ~ ., stocksTrain3, family = "binomial")
sort( (StocksModel1$coef > 0 | StocksModel2$coef > 0 |
       StocksModel3$coef > 0) & (StocksModel1$coef < 0 |
                               StocksModel2$coef < 0 |
                               StocksModel3$coef < 0))
'org_babel_R_eoe'
writeLines("\n :: Predicting in the testing set...")
PredictTest1 <- predict(StocksModel1, stocksTest1, type="response")
PredictTest2 <- predict(StocksModel2, stocksTest2, type="response")
PredictTest3 <- predict(StocksModel3, stocksTest3, type="response")

writeLines("\n :: Overall accuracy for each model 1:")
ct1 <- table(stocksTest1$PositiveDec, PredictTest1>=0.5)
(ct1[1,1]+ct1[2,2])/nrow(stocksTest1)

writeLines("\n :: Overall accuracy for each model 2:")
ct2 <- table(stocksTest2$PositiveDec, PredictTest2>=0.5)
(ct2[1,1]+ct2[2,2])/nrow(stocksTest2)

writeLines("\n :: Overall accuracy for each model 3:")
ct3 <- table(stocksTest3$PositiveDec, PredictTest3>=0.5)
(ct3[1,1]+ct3[2,2])/nrow(stocksTest3)
'org_babel_R_eoe'
writeLines("\n :: The overall test-set accuracy of the cluster-then-predict approach:")

AllPredictions <- c(PredictTest1, PredictTest2, PredictTest3)

AllOutcomes <- c(stocksTest1$PositiveDec, stocksTest2$PositiveDec,
                 stocksTest3$PositiveDec)

ct <- table(AllOutcomes, AllPredictions >= 0.5)

(ct[1, 1] + ct[2, 2]) / length(AllPredictions)
'org_babel_R_eoe'
q()
n
q()
n
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHO.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.table("../data/WHOu7.csv", header = TRUE)
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.table("../data/WHOu7.csv", header = TRUE)
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
who <- read.csv("../data/WHOu7.csv")
str(who)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(who)
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(WHO)
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
install.packages('ggplot2', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
## install.packages('ggplot2', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Simple linear regression model to predict the percentage\n of the population under 15, using the log of the fertility rate:")
mod <- lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/WHO.csv"
fileName <- "WHOu7.csv"
dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Loading data into their data frame.")
WHO <- read.csv("../data/WHOu7.csv")
str(WHO)
'org_babel_R_eoe'
writeLines("\n :: Install new package: ggplot2 ...")
## install.packages('ggplot2', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(ggplot2)
writeLines("\n :: Library ggplot2 loaded...")
'org_babel_R_eoe'
writeLines("\n :: Simple linear regression model to predict the percentage\n of the population under 15, using the log of the fertility rate:")
mod <- lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
'org_babel_R_eoe'
q()
n
