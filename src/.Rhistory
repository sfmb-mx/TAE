eBayGBM3
'org_babel_R_eoe'
writeLines("\n :: Get predictions on your testing data:")

writeLines("\n :: Class prediction:")
predictions <- predict(object = eBayGBM3, eBayTest[, predictorsNames],
                       type = 'raw')
head(predictions)
postResample(pred = predictions, obs = as.factor(eBayTest[, outcomeName]))

writeLines("\n :: Probabilites prediction:")
predictions <- predict(object = eBayGBM3, eBayTest[, predictorsNames],
                       type = 'prob')
head(predictions)

writeLines("\n :: Test set AUC ")
auc <- roc(ifelse(eBayTest[, outcomeName] == "yes", 1, 0), predictions[[2]])
print(auc$auc)
'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilites prediction:")
predTest <- predict(object = eBayGBM3, eBayValidation2, type = 'prob')
head(predTest$yes)
myYesPredTest <- predTest$yes

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = myYesPredTest)
write.csv(MySubmission, "../data/SubmissionGBM3.csv", row.names = FALSE)

writeLines("\n :: Submission GBM3 file generated...")
'org_babel_R_eoe'
eBayDS1 <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation1 <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS1, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation1, type = "response")
'org_babel_R_eoe'
  MySubmission <- data.frame(UniqueID = eBayValidation1$UniqueID, Probability1
                             = PredTest)

  write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
            = FALSE)

rm(list = ls())                         # Remove all workspace data
'org_babel_R_eoe'
writeLines("\n :: clearing workspace...")
rm(list = ls(all = TRUE))
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
Sys.setlocale('LC_ALL','C')
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions
library(ggplot2)                        # Graphical libraries
library(caTools)                        # Partition data sets
library(parallel)                       # Parallel computation
library(mice)                           # Imputation library
library(ROCR)                           # ROCS for AUC calculation
library(randomForest)                   # Random Forest library
library(pROC)                           # ROC calculations
library(gbm)                            # gbm algorithm
library(parallel)                       # Multicore calculations
library(corrplot)                       # Correlation matrix plot
library(plyr)
library(tm)                             # Tecx minning library
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$condition <- as.factor(eBayDS$condition)
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$carrier <- as.factor(eBayDS$carrier)
eBayDS$color <- as.factor(eBayDS$color)
eBayDS$storage <- as.factor(eBayDS$storage)
eBayDS$productline <- as.factor(eBayDS$productline)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
eBayValidation$condition <- as.factor(eBayValidation$condition)
eBayValidation$cellular <- as.integer(eBayValidation$cellular)
eBayValidation$carrier <- as.factor(eBayValidation$carrier)
eBayValidation$color <- as.factor(eBayValidation$color)
eBayValidation$storage <- as.factor(eBayValidation$storage)
eBayValidation$productline <- as.factor(eBayValidation$productline)

writeLines("\n :: New structure of the original training set:")
str(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
eBayDS$cellular <- imputed$cellular
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayValidation$storage <- imputed$storage
eBayValidation$cellular <- imputed$cellular
summary(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayDS$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayDS$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$carrier)

writeLines("\n :: The color of iPads:")
table(eBayDS$color)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$color)

writeLines("\n :: The product line:")
table(eBayDS$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
m <- table(eBayDS$biddable, eBayDS$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayDS$condition, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayDS$condition, eBayDS$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayDS$cellular, eBayDS$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayDS$color, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayDS$storage, eBayDS$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[2, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayDS$productline, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Isolating the interest features:")
eBayBW <- eBayDS[, c(1, 10)]
str(eBayBW)
'org_babel_R_eoe'
writeLines("\n :: NOT SOLD articles proportion")
eBayBW$Negative <- as.factor(eBayBW$sold == 0)
m <- table(eBayBW$Negative)
m
m[2] / (m[1] + m[2])
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names:")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)
names(eBayDS2)

writeLines("\n :: Removing the features not available in the validation dataset:")
eBayDS2$productline.iPad.5 <- NULL
eBayDS2$productline.iPad.mini.Retina <- NULL
names(eBayDS2)
'org_babel_R_eoe'
writeLines("\n :: Converting sold to a meaningful representation...")
eBayDS2$sold <- ifelse(eBayDS2$sold == 1, 'yes', 'no')
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
names(eBayValidation2) <- make.names(names(eBayValidation2), unique =
                                                   FALSE, allow_ = TRUE)


print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS2$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS2, spl == TRUE)
eBayTest <- subset(eBayDS2, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: What is the proportion of your outcome variable?")
prop.table(table(eBayTrain$sold))
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'sold'
predictorsNames <- names(eBayTrain)[names(eBayTrain) != outcomeName]
predictorsNames
'org_babel_R_eoe'
writeLines("\n :: The total caret supported models:")
length(names(getModelInfo()))
'org_babel_R_eoe'
writeLines("\n :: Pick model gbm and find out what type of model it is:")
getModelInfo()$gbm$type
'org_babel_R_eoe'
writeLines("\n :: Create caret trainControl object to control the number of
    cross-validations performed...")
objControl <- trainControl(method = 'cv', number = 10, returnResamp =
                  'none', summaryFunction = twoClassSummary,
                  classProbs = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Find out model details:")
eBayGBM3
'org_babel_R_eoe'
writeLines("\n :: Get predictions on your testing data:")

writeLines("\n :: Class prediction:")
predictions <- predict(object = eBayGBM3, eBayTest[, predictorsNames],
                       type = 'raw')
head(predictions)
postResample(pred = predictions, obs = as.factor(eBayTest[, outcomeName]))

writeLines("\n :: Probabilites prediction:")
predictions <- predict(object = eBayGBM3, eBayTest[, predictorsNames],
                       type = 'prob')
head(predictions)

writeLines("\n :: Test set AUC ")
auc <- roc(ifelse(eBayTest[, outcomeName] == "yes", 1, 0), predictions[[2]])
print(auc$auc)
'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilites prediction:")
predTest <- predict(object = eBayGBM3, eBayValidation2, type = 'prob')
head(predTest$yes)
myYesPredTest <- predTest$yes

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = myYesPredTest)
write.csv(MySubmission, "../data/SubmissionGBM3.csv", row.names = FALSE)

writeLines("\n :: Submission GBM3 file generated...")
'org_babel_R_eoe'
head(eBaySparse)
dim(eBaySparse)
class(eBaySparse)
tail(eBaySparse)
str(eBayValidation)
class(eBayValidationBW)
writeLines("\n :: Isolating the interest features:")
eBayValidationBW <- eBayValidation[, 1]
str(eBayValidationBW)
'org_babel_R_eoe'
str(eBayValidation)
writeLines("\n :: Isolating the interest features:")
eBayValidationBW <- eBayValidation[, c(10, 1)]
str(eBayValidationBW)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names:")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)
names(eBayDS2)

writeLines("\n :: Removing the features not available in the validation dataset:")
eBayDS2$productline.iPad.5 <- NULL
eBayDS2$productline.iPad.mini.Retina <- NULL
names(eBayDS2)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names...")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)

writeLines("\n :: Removing the features not available in the validation dataset:")
eBayDS2$productline.iPad.5 <- NULL
eBayDS2$productline.iPad.mini.Retina <- NULL
names(eBayDS2)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names...")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)
names(eBayDS2)

'org_babel_R_eoe'
str(eBayValidation2)
str(eBayValidationBW)
str(eBayValidationSparse)
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
names(eBayValidation2) <- make.names(names(eBayValidation2), unique =
                                                   FALSE, allow_ = TRUE)

print(names(eBayValidation2))
'org_babel_R_eoe'
names(eBaySparse)
str(eBayDS2)
names(eBaySparse)
names(eBayDS2)
names(eBayDS3)
class(eBayDS3)
length(names(eBaySparse)) + length(names(eBayDS2))
writeLines("\n :: Joining all together:")
eBayDS3 <- cbind(eBaySparse, eBayDS2)
names(eBayDS3)
'org_babel_R_eoe'
writeLines("\n :: Joining all together:")
eBayDS3 <- cbind(eBaySparse, eBayDS2)
names(eBayDS3)
'org_babel_R_eoe'
writeLines("\n :: Joining all together:")
eBayDS3 <- cbind(eBaySparse, eBayDS2)

writeLines("\n :: Number of new features:")
length(names(eBayDS3))
'org_babel_R_eoe'
names(eBayValidation3)
length(names(eBayValidationSparse)) + length(names(eBayValidation2))
writeLines("\n :: Joining all together:")
eBayValidation3 <- cbind(eBayValidationSparse, eBayValidation2)

writeLines("\n :: Number of new features:")
length(names(eBayValidation3))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS3$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS3, spl == TRUE)
eBayTest <- subset(eBayDS3, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
q()
n
eBayDS1 <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation1 <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
SimpleMod <- glm(sold ~ startprice, data = eBayDS1, family = binomial)
'org_babel_R_eoe'
PredTest <- predict(SimpleMod, newdata = eBayValidation1, type = "response")
'org_babel_R_eoe'
  MySubmission <- data.frame(UniqueID = eBayValidation1$UniqueID, Probability1
                             = PredTest)

  write.csv(MySubmission, "../data/SubmissionSimpleLogV1.csv", row.names
            = FALSE)

rm(list = ls())                         # Remove all workspace data
'org_babel_R_eoe'
writeLines("\n :: clearing workspace...")
rm(list = ls(all = TRUE))
'org_babel_R_eoe'
if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <-
c("https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTest.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/eBayiPadTrain.csv",
"https://inclass.kaggle.com/c/15-071x-the-analytics-edge-summer-2015/download/SampleSubmission.csv")

fileName <- c("eBayiPadTest.csv", "eBayiPadTrain.csv", "SampleSubmission.csv")

dataPath <- "../data"

for(i in 1:3) {
        filePath <- paste(dataPath, fileName[i], sep = "/")

        if(!file.exists(filePath)) {
                download.file(fileUrl[i], destfile = filePath, method = "curl")
        }
}
writeLines("\n :: Files downloaded...")
'org_babel_R_eoe'
Sys.setlocale('LC_ALL','C')
eBayDS <- read.csv("../data/eBayiPadTrain.csv", stringsAsFactors = FALSE)
eBayValidation <- read.csv("../data/eBayiPadTest.csv", stringsAsFactors = FALSE)
'org_babel_R_eoe'
writeLines("\n :: Loading the necessary libraries...")
library(caret)                          # ML interface to many
                                        # functions
library(ggplot2)                        # Graphical libraries
library(caTools)                        # Partition data sets
library(parallel)                       # Parallel computation
library(mice)                           # Imputation library
library(ROCR)                           # ROCS for AUC calculation
library(randomForest)                   # Random Forest library
library(pROC)                           # ROC calculations
library(gbm)                            # gbm algorithm
library(parallel)                       # Multicore calculations
library(corrplot)                       # Correlation matrix plot
library(plyr)
library(tm)                             # Tecx minning library
'org_babel_R_eoe'
writeLines("    The structure of the training data set:")
str(eBayDS)
'org_babel_R_eoe'
eBayDS$condition <- as.factor(eBayDS$condition)
eBayDS$cellular <- as.integer(eBayDS$cellular)
eBayDS$carrier <- as.factor(eBayDS$carrier)
eBayDS$color <- as.factor(eBayDS$color)
eBayDS$storage <- as.factor(eBayDS$storage)
eBayDS$productline <- as.factor(eBayDS$productline)
## eBayDS$sold <- as.factor(eBayDS$sold)

writeLines("\n :: New structure of the original training set:")
str(eBayDS)
'org_babel_R_eoe'
eBayValidation$condition <- as.factor(eBayValidation$condition)
eBayValidation$cellular <- as.integer(eBayValidation$cellular)
eBayValidation$carrier <- as.factor(eBayValidation$carrier)
eBayValidation$color <- as.factor(eBayValidation$color)
eBayValidation$storage <- as.factor(eBayValidation$storage)
eBayValidation$productline <- as.factor(eBayValidation$productline)
## eBayValidation$sold <- as.factor(eBayValidation$sold)

writeLines("\n :: New structure of the original training set:")
str(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the original training data set:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayDS[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayDS$storage <- imputed$storage
eBayDS$cellular <- imputed$cellular
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: Multiple imputation")
eBaySimple <- eBayValidation[c("UniqueID", "biddable", "startprice",
                       "condition", "cellular", "storage",
                       "productline")]
summary(eBaySimple)
'org_babel_R_eoe'
set.seed(pi)
imputed <- complete(mice(eBaySimple))
summary(imputed)
'org_babel_R_eoe'
writeLines("\n :: Substitute the original values of storage with the imputed values:")
eBayValidation$storage <- imputed$storage
eBayValidation$cellular <- imputed$cellular
summary(eBayValidation)
'org_babel_R_eoe'
writeLines("\n :: Summary of the data:")
summary(eBayDS)
'org_babel_R_eoe'
writeLines("\n :: The condition feature summary:")
table(eBayDS$condition)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$condition)

writeLines("\n :: The carrier feature supplier summary:")
table(eBayDS$carrier)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$carrier)

writeLines("\n :: The color of iPads:")
table(eBayDS$color)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$color)

writeLines("\n :: The product line:")
table(eBayDS$productline)

writeLines("\n :: Any NA values:")
anyNA(eBayDS$productline)
'org_babel_R_eoe'
writeLines("\n :: Is an auction a better deal for customers?")
## biddable as rows and sold as columns
m <- table(eBayDS$biddable, eBayDS$sold)
m

writeLines("\n :: The proportion of auctions sold:")
m[2, 2] / (m[1, 2] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: The condiction of the product vs. the sold outcome:")
table(eBayDS$condition, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Proportion of used vs auction:")
table(eBayDS$condition, eBayDS$biddable)
'org_babel_R_eoe'
writeLines("\n :: Cellular feature vs. the sold outcome:")
m <- table(eBayDS$cellular, eBayDS$sold)
m

writeLines("\n :: The proportion of products with cellular feature sold is:")
m[2, 2] / (m[2, 1] + m[2, 2])
'org_babel_R_eoe'
writeLines("\n :: How much is the importance of the color?")
table(eBayDS$color, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Storage capacity vs. sold:")
m <- table(eBayDS$storage, eBayDS$sold)
m

writeLines("\n :: The proportion of 16GB storage sold:")
m[2, 2] / (m[1, 2] + m[2, 2] + m[3, 2] + m [4, 2])
'org_babel_R_eoe'
writeLines("\n :: Products sold:")
table(eBayDS$productline, eBayDS$sold)
'org_babel_R_eoe'
writeLines("\n :: Isolating the interest features:")
eBayBW <- eBayDS[, c(1, 10)]
str(eBayBW)
'org_babel_R_eoe'
writeLines("\n :: NOT SOLD articles proportion")
eBayBW$Negative <- as.factor(eBayBW$sold == 0)
m <- table(eBayBW$Negative)
m
m[2] / (m[1] + m[2])
'org_babel_R_eoe'
writeLines("\n :: Isolating the interest features:")
eBayValidationBW <- eBayValidation[, c(10, 1)]
str(eBayValidationBW)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names...")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)
names(eBayDS2)

## writeLines("\n :: Removing the features not available in the validation dataset:")
## eBayDS2$productline.iPad.5 <- NULL
## eBayDS2$productline.iPad.mini.Retina <- NULL
## names(eBayDS2)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
names(eBayValidation2) <- make.names(names(eBayValidation2), unique =
                                                   FALSE, allow_ = TRUE)

print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Joining all together:")
eBayDS3 <- cbind(eBaySparse, eBayDS2)

writeLines("\n :: Number of new features:")
length(names(eBayDS3))
'org_babel_R_eoe'
writeLines("\n :: Joining all together:")
eBayValidation3 <- cbind(eBayValidationSparse, eBayValidation2)

writeLines("\n :: Number of new features:")
length(names(eBayValidation3))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS3$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS3, spl == TRUE)
eBayTest <- subset(eBayDS3, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: What is the proportion of your outcome variable?")
prop.table(table(eBayTrain$sold))
'org_babel_R_eoe'
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'sold'
predictorsNames <- names(eBayTrain)[names(eBayTrain) != outcomeName]
predictorsNames
'org_babel_R_eoe'
writeLines("\n :: The total caret supported models:")
length(names(getModelInfo()))
'org_babel_R_eoe'
writeLines("\n :: Pick model gbm and find out what type of model it is:")
getModelInfo()$gbm$type
'org_babel_R_eoe'
writeLines("\n :: Create caret trainControl object to control the number of
    cross-validations performed...")
objControl <- trainControl(method = 'cv', number = 10, returnResamp =
                  'none', summaryFunction = twoClassSummary,
                  classProbs = TRUE)
'org_babel_R_eoe'
writeLines("\n :: Find out model details:")
eBayLR6
'org_babel_R_eoe'
writeLines("\n :: Get predictions on your testing data:")

writeLines("\n :: Class prediction:")
predictions <- predict(object = eBayLR6, eBayTest[, predictorsNames],
                       type = 'raw')
head(predictions)
postResample(pred = predictions, obs = as.factor(eBayTest[, outcomeName]))

writeLines("\n :: Probabilites prediction:")
predictions <- predict(object = eBayLR6, eBayTest[, predictorsNames],
                       type = 'prob')
head(predictions)
## postResample(pred = predictions, obs = eBayTest[, outcomeName])

writeLines("\n :: Test set AUC ")
auc <- roc(ifelse(eBayTest[, outcomeName] == "yes", 1, 0), predictions[[2]])
print(auc$auc)
'org_babel_R_eoe'
writeLines("\n :: eBayValidation new structure:")
str(eBayValidation2)
'org_babel_R_eoe'
writeLines("\n :: Probabilites prediction:")
predTest <- predict(object = eBayLR6, eBayValidation2, type = 'prob')
head(predTest$yes)
myYesPredTest <- predTest$yes

MySubmission <- data.frame(UniqueID = eBayValidation2$UniqueID, Probability1 = myYesPredTest)
write.csv(MySubmission, "../data/SubmissionLR6.csv", row.names = FALSE)

writeLines("\n :: Submission LR6 file generated...")
'org_babel_R_eoe'
names(eBaySparse)
writeLines("\n :: Dummy variables for factors/characters...")

eBayDS2 <- eBayDS[, -1]
eBayDummy <- dummyVars("~.", data = eBayDS2, fullRank = F)
eBayDS2 <- as.data.frame(predict(eBayDummy, eBayDS))
names(eBayDS2)

writeLines("\n :: Re-work the feature names...")
names(eBayDS2) <- make.names(names(eBayDS2), unique = FALSE, allow_ = TRUE)
colnames(eBayDS2)[38] <- "eBay.sold"
names(eBayDS2)
'org_babel_R_eoe'
writeLines("\n :: Dummy variables for factors/characters...")

eBayValidation2 <- eBayValidation[, -1]
eBayDummy <- dummyVars("~.", data = eBayValidation2, fullRank = F)
eBayValidation2 <- as.data.frame(predict(eBayDummy, eBayValidation))
print(names(eBayValidation2))

writeLines("\n :: Re-work the feature names:")
names(eBayValidation2) <- make.names(names(eBayValidation2), unique =
                                                   FALSE, allow_ = TRUE)

print(names(eBayValidation2))
'org_babel_R_eoe'
writeLines("\n :: Joining all together:")
eBayDS3 <- cbind(eBaySparse, eBayDS2)

writeLines("\n :: Number of new features:")
length(names(eBayDS3))
'org_babel_R_eoe'
names(eBayDS3)
(2*19) + 1
writeLines("\n :: Joining all together:")
eBayValidation3 <- cbind(eBayValidationSparse, eBayValidation2)

writeLines("\n :: Number of new features:")
length(names(eBayValidation3))
'org_babel_R_eoe'
writeLines("\n :: Split the data:")
set.seed(pi)

spl <- sample.split(eBayDS3$sold, SplitRatio = 0.75)

eBayTrain <- subset(eBayDS3, spl == TRUE)
eBayTest <- subset(eBayDS3, spl == FALSE)

writeLines("\n :: Dimensions of the training set:")
dim(eBayTrain)

writeLines("\n :: Dimensions of the testing set:")
dim(eBayTest)
'org_babel_R_eoe'
writeLines("\n :: What is the proportion of your outcome variable?")
prop.table(table(eBayTrain$sold))
table(eBayTrain$sold)
'org_babel_R_eoe'
writeLines("\n :: What is the proportion of your outcome variable?")
prop.table(table(eBayTrain$eBay.sold))
table(eBayTrain$eBay.sold)
'org_babel_R_eoe'
length(predictorsNames)
length(names(eBayDS3))
writeLines("\n :: Generalize outcome and predictor variables...")
outcomeName <- 'eBay.sold'
predictorsNames <- names(eBayTrain)[names(eBayTrain) != outcomeName]

writeLines("\n :: Number of predictors name:s")
length(predictorsNames)
'org_babel_R_eoe'
writeLines("\n :: Pick model gbm and find out what type of model it is:")
getModelInfo()$glm$type
'org_babel_R_eoe'
writeLines("\n :: Pick model glm and find out what type of model it is:")
getModelInfo()$glm$type
'org_babel_R_eoe'
writeLines("\n :: Create caret trainControl object to control the number of
    cross-validations performed...")
objControl <- trainControl(method = 'cv', number = 10, returnResamp =
                  'none', summaryFunction = twoClassSummary,
                  classProbs = TRUE)
'org_babel_R_eoe'
predictorsNames
q()
n
