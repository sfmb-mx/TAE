names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
          c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/flower.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/healthy.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tumor.csv")

  fileName <- c("flower.csv", "healthy.csv", "tumor.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Reading the flower dataset:")
flower <- read.csv("../data/flower.csv", header = FALSE)
str(flower)
'org_babel_R_eoe'
writeLines("\n :: Change the data type to matrix:")
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector <- as.vector(flowerMatrix)
head(str(flowerVector))
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector2 <- as.vector(flower)
head(str(flowerVector2))
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distance <- dist(flowerVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterIntensity <- hclust(distance, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
writeLines("\n :: Find mean intensity values:")
tapply(flowerVector, flowerClusters, mean)
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
q()
n
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering of the MRI image:")
healthyVector <- as.vector(healthyMatrix)
distance <- dist(healthyVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("healthy.csv", header=FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header=FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636
(n*(n - 1)) / 2
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
ls()
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
          c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/flower.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/healthy.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tumor.csv")

  fileName <- c("flower.csv", "healthy.csv", "tumor.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Reading the flower dataset:")
flower <- read.csv("../data/flower.csv", header = FALSE)
str(flower)
'org_babel_R_eoe'
writeLines("\n :: Change the data type to matrix:")
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector <- as.vector(flowerMatrix)
head(str(flowerVector))
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector2 <- as.vector(flower)
head(str(flowerVector2))
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distance <- dist(flowerVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterIntensity <- hclust(distance, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
writeLines("\n :: Find mean intensity values:")
tapply(flowerVector, flowerClusters, mean)
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Specify number of clusters k = 5...")
k <- 5

writeLines("\n :: Run k-means...")
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
'org_babel_R_eoe'
writeLines("\n :: Extract clusters:")
healthyClusters <- KMC$cluster
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters centers intensities:")
KMC$centers
'org_babel_R_eoe'
writeLines("\n :: Extract cluster 2 center intensity:")
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters sizes:")
KMC$size
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image:")
 
tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image. Loading the test data...")
 
tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Install new package: flexclust ...")
install.packages('flexclust', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(flexclust)
writeLines("\n :: Library flexclust loaded...")
'org_babel_R_eoe'
writeLines("\n :: Apply clusters from before to new image, using the flexclust package:")
KMC.kcca <- as.kcca(KMC, healthyVector)
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
writeLines("\n :: Clustering with the testing data...")
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
image(tumorMatrix, axes = FALSE)
q()
n
q()
n
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
          c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/flower.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/healthy.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tumor.csv")

  fileName <- c("flower.csv", "healthy.csv", "tumor.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Reading the flower dataset:")
flower <- read.csv("../data/flower.csv", header = FALSE)
str(flower)
'org_babel_R_eoe'
writeLines("\n :: Change the data type to matrix:")
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector <- as.vector(flowerMatrix)
head(str(flowerVector))
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector2 <- as.vector(flower)
head(str(flowerVector2))
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distance <- dist(flowerVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterIntensity <- hclust(distance, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
writeLines("\n :: Find mean intensity values:")
tapply(flowerVector, flowerClusters, mean)
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)
## distance = dist(healthyVector, method = "euclidean")

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Specify number of clusters k = 5...")
k <- 5

writeLines("\n :: Run k-means...")
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
'org_babel_R_eoe'
writeLines("\n :: Extract clusters:")
healthyClusters <- KMC$cluster
'org_babel_R_eoe'
writeLines("\n :: Extract clusters centers intensities:")
KMC$centers
'org_babel_R_eoe'
writeLines("\n :: Extract cluster 2 center intensity:")
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters sizes:")
KMC$size
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image. Loading the test data...")

tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Install new package: flexclust ...")
## install.packages('flexclust', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(flexclust)
writeLines("\n :: Library flexclust loaded...")
'org_babel_R_eoe'
writeLines("\n :: Apply clusters from before to new image, using the flexclust package...")
KMC.kcca <- as.kcca(KMC, healthyVector)
'org_babel_R_eoe'
writeLines("\n :: Clustering with the testing data...")
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
          c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/flower.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/healthy.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tumor.csv")

  fileName <- c("flower.csv", "healthy.csv", "tumor.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Reading the flower dataset:")
flower <- read.csv("../data/flower.csv", header = FALSE)
str(flower)
'org_babel_R_eoe'
writeLines("\n :: Change the data type to matrix:")
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector <- as.vector(flowerMatrix)
head(str(flowerVector))
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector2 <- as.vector(flower)
head(str(flowerVector2))
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distance <- dist(flowerVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterIntensity <- hclust(distance, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
writeLines("\n :: Find mean intensity values:")
tapply(flowerVector, flowerClusters, mean)
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)
## distance = dist(healthyVector, method = "euclidean")

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Specify number of clusters k = 5...")
k <- 5

writeLines("\n :: Run k-means...")
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
'org_babel_R_eoe'
writeLines("\n :: Extract clusters:")
healthyClusters <- KMC$cluster
'org_babel_R_eoe'
writeLines("\n :: Extract clusters centers intensities:")
KMC$centers
'org_babel_R_eoe'
writeLines("\n :: Extract cluster 2 center intensity:")
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters sizes:")
KMC$size
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image. Loading the test data...")

tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorMatrix <- t(tumorMatrix)
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Install new package: flexclust ...")
## install.packages('flexclust', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(flexclust)
writeLines("\n :: Library flexclust loaded...")
'org_babel_R_eoe'
writeLines("\n :: Apply clusters from before to new image, using the flexclust package...")
KMC.kcca <- as.kcca(KMC, healthyVector)
'org_babel_R_eoe'
writeLines("\n :: Clustering with the testing data...")
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
writeLines("\n :: Euclidean distance:")
v1 <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
v2 <- c(0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
d <- sqrt(sum((v1 - v2)^2))
d
'org_babel_R_eoe'
library(parallel)

if(!file.exists("../data")) {
        dir.create("../data")
}

fileUrl <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"

fileName <- "movieLens.txt"

dataPath <- "../data"

filePath <- paste(dataPath, fileName, sep = "/")

if(!file.exists(filePath)) {
        download.file(fileUrl, destfile = filePath, method = "curl")
}

list.files("../data")
'org_babel_R_eoe'
writeLines("    Loading data into their data frames.")
movies <- read.table("../data/movieLens.txt", header = FALSE,
                     sep = "|", quote = "\"")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Add column names:")
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate",
                     "IMDB", "Unknown", "Action", "Adventure",
                     "Animation", "Childrens", "Comedy", "Crime",
                     "Documentary", "Drama", "Fantasy", "FilmNoir",
                     "Horror", "Musical", "Mystery", "Romance",
                     "SciFi", "Thriller", "War", "Western")

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove unnecessary variables:")
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL

names(movies)
'org_babel_R_eoe'
writeLines("\n :: Remove duplicates:")
movies = unique(movies)

writeLines("\n :: Take a look at our data again:")
str(movies)
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as comedy:")
nrow(subset(movies, movies$Comedy == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Western:")
nrow(subset(movies, movies$Western == 1))
'org_babel_R_eoe'
writeLines("\n :: Number of movies classified as Romance and Drama:")
nrow(subset(movies, movies$Romance == 1 & movies$Drama == 1))

writeLines("\n :: Other way to answer this question:")
nrow(movies[movies$Romance == 1 & movies$Drama == 1, ])
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distances <- dist(movies[2:20], method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterMovies <- hclust(distances, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups <- cutree(clusterMovies, k = 10)
'org_babel_R_eoe'
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
'org_babel_R_eoe'
writeLines("\n :: Id of the movie:")
subset(movies, Title == "Men in Black (1997)")

writeLines("\n :: Find which cluster Men in Black is in:")
clusterGroups[257]
'org_babel_R_eoe'
writeLines("\n :: Create a new data set with just the movies from cluster 2:")
cluster2 <- subset(movies, clusterGroups == 2)

writeLines("\n :: Look at the first 10 titles in this cluster:")
cluster2$Title[1:10]
'org_babel_R_eoe'
writeLines("\n :: Assign points to clusters...")
clusterGroups2 <- cutree(clusterMovies, k = 2)

spl = split(movies[2:20], clusterGroups2)

writeLines("\n :: Percentage of movies in each cluster:")
lapply(spl, colMeans)
'org_babel_R_eoe'
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <-
          c("https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/flower.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/healthy.csv",
"https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/tumor.csv")

  fileName <- c("flower.csv", "healthy.csv", "tumor.csv")

  dataPath <- "../data"

  for(i in 1:3) {
          filePath <- paste(dataPath, fileName[i], sep = "/")

          if(!file.exists(filePath)) {
                  download.file(fileUrl[i], destfile = filePath, method = "curl")
          }
  }
  list.files("../data")
'org_babel_R_eoe'
writeLines("\n :: Reading the flower dataset:")
flower <- read.csv("../data/flower.csv", header = FALSE)
str(flower)
'org_babel_R_eoe'
writeLines("\n :: Change the data type to matrix:")
flowerMatrix <- as.matrix(flower)
str(flowerMatrix)
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector <- as.vector(flowerMatrix)
head(str(flowerVector))
'org_babel_R_eoe'
writeLines("\n :: Turn matrix into a vector:")
flowerVector2 <- as.vector(flower)
head(str(flowerVector2))
'org_babel_R_eoe'
writeLines("\n :: Compute distances...")
distance <- dist(flowerVector, method = "euclidean")
'org_babel_R_eoe'
writeLines("\n :: Hierarchical clustering...")
clusterIntensity <- hclust(distance, method = "ward.D")
'org_babel_R_eoe'
writeLines("\n :: Summary of the flowerClusters vector:")
str(flowerClusters)
'org_babel_R_eoe'
writeLines("\n :: Find mean intensity values:")
tapply(flowerVector, flowerClusters, mean)
'org_babel_R_eoe'
writeLines("\n :: Let's try this with an MRI image of the brain:")

healthy <- read.csv("../data/healthy.csv", header = FALSE)
healthyMatrix <- as.matrix(healthy)
str(healthyMatrix)
'org_babel_R_eoe'
writeLines("\n :: Hierarchial clustering (Memory error)")
healthyVector <- as.vector(healthyMatrix)
## distance = dist(healthyVector, method = "euclidean")

writeLines("\n :: Search for memory alternative, run on Ithaca!")
'org_babel_R_eoe'
writeLines("\n :: We have an error - why?")
str(healthyVector)
'org_babel_R_eoe'
n <- 365636

writeLines("\n :: The number of calculations:")
(n*(n - 1)) / 2
'org_babel_R_eoe'
writeLines("\n :: Specify number of clusters k = 5...")
k <- 5

writeLines("\n :: Run k-means...")
set.seed(1)
KMC <- kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
'org_babel_R_eoe'
writeLines("\n :: Extract clusters:")
healthyClusters <- KMC$cluster
'org_babel_R_eoe'
writeLines("\n :: Extract clusters centers intensities:")
KMC$centers
'org_babel_R_eoe'
writeLines("\n :: Extract cluster 2 center intensity:")
KMC$centers[2]
'org_babel_R_eoe'
writeLines("\n :: Extract clusters sizes:")
KMC$size
'org_babel_R_eoe'
writeLines("\n :: Apply to a test image. Loading the test data...")

tumor <- read.csv("../data/tumor.csv", header = FALSE)
tumorMatrix <- as.matrix(tumor)
tumorMatrix <- t(tumorMatrix)[,nrow(tumorMatrix):1]
tumorVector <- as.vector(tumorMatrix)
'org_babel_R_eoe'
writeLines("\n :: Install new package: flexclust ...")
## install.packages('flexclust', repos='http://cran.rstudio.com/')
writeLines("\n :: NOTE: Please comment after install once...")

library(flexclust)
writeLines("\n :: Library flexclust loaded...")
'org_babel_R_eoe'
writeLines("\n :: Apply clusters from before to new image, using the flexclust package...")
KMC.kcca <- as.kcca(KMC, healthyVector)
'org_babel_R_eoe'
writeLines("\n :: Clustering with the testing data...")
tumorClusters <- predict(KMC.kcca, newdata = tumorVector)
'org_babel_R_eoe'
q()
n
