#+TITLE:         Week 4. Classification and Regression Trees
#+AUTHOR:        Sergio-Feliciano Mendoza-Barrera
#+DRAWERS:       sfmb
#+EMAIL:         smendoza.barrera@gmail.com
#+DATE:          30/06/2015
#+DESCRIPTION:   The random forest and regression trees methods for more interpretable models
#+KEYWORDS:      R, data science, emacs, ESS, org-mode, random forest, classification and regression trees
#+LANGUAGE:      en
#+OPTIONS:       H:10 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t d:HIDDEN
#+OPTIONS:       TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:       LaTeX:dvipng
#+INFOJS_OPT:    view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="dft.css"/>

#+LaTeX_CLASS: IEEEtran
#+LATEX_CLASS_OPTIONS: [letterpaper, 9pt, onecolumn, twoside, technote, final]
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{makeidx}

#+LATEX_HEADER: \usepackage[lining,tabular]{fbb} % so math uses tabular lining figures
#+LATEX_HEADER: \usepackage[scaled=.95,type1]{cabin} % sans serif in style of Gill Sans
#+LATEX_HEADER: \usepackage[varqu,varl]{zi4}% inconsolata typewriter
#+LATEX_HEADER: \usepackage[T1]{fontenc} % LY1 also works
#+LATEX_HEADER: \usepackage[libertine,bigdelims]{newtxmath}
#+LATEX_HEADER: \usepackage[cal=boondoxo,bb=boondox,frak=boondox]{mathalfa}
#+LATEX_HEADER: \useosf % change normal text to use proportional oldstyle figures

#+LATEX_HEADER: \markboth{Classification and regression trees and random forest methods}%
#+LATEX_HEADER: {Sergio-Feliciano Mendoza-Barrera}

#+LATEX_HEADER: \newcommand{\degC}{$^\circ$C{}}

#+STYLE: <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>

#+ATTR_HTML: width="500px"

# -*- mode: org; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>

#+BEGIN_ABSTRACT
Regression trees and Random forest are more interpretable methods used
in binary (clustering) applications.
#+END_ABSTRACT

* Judge, Jury, and Classifier: An Introduction to Trees

/Sources/

The images in this video of the Scales of Justice, the United States
Supreme Court Building, and the United States Supreme Court Justices
all come from Wikimedia Commons.

*Introduction*

This seems like a very unconventional use of analytics, but in 2002 a
group of political science and law academics decided to test if a
model can do better than a group of experts at predicting the
decisions of the Supreme Court. In this case, a very interpretable
analytics method was used, called classification and regression
trees.

[[../graphs/AmericanLegalSystem.png]]

Cases start at the district courts, where an initial decision is made
about the case. The circuit courts hear appeals from the district
courts, and can change the decision that was made. The Supreme Court
is the highest level in the American legal system and makes the final
decision on cases.

[[../graphs/SupremeCourt.png]]

This image shows the nine Supreme Court justices from the time period
1994 through 2005. This was the longest period of time with the same
set of justices in over 180 years.

There have been many significant and groundbreaking decisions made by
the Supreme Court. These are a few notable decisions that were made.

[[../graphs/SCOTUS.png]]

In *1942*, the Supreme Court decided on the *Wickard v. Filburn*
case. This case recognized the power of the federal government to
regulate economic activity.

Filburn was a farmer, who was growing wheat for on-farm
consumption. However, the US had established limits on wheat
production, and Filburn was exceeding those limits. So even though the
extra wheat he was producing was for his own use and he had no
intention of selling it, he was forced to destroy it.

In *1973*, the Supreme Court decided on the *Roe v. Wade* case, one of the
most well-known cases to this day. They decided to legalize abortion,
and by doing this, prompted a national debate that continues today
about the legality of abortion.

In *2000*, the Supreme Court actually decided the outcome of the
presidential election. The race was so close in the state of Florida,
that a recount of the ballots was required. But the Florida Secretary
of State certified that President Bush was the winner before the
recount could be completed.

The case then went to the Supreme Court where it was ruled that all
ballots needed to be recounted. But since this could not be done
before the winner had to be declared, President Bush won the state of
Florida, and thus, the presidency.

A very recent case from *2012* dealt with the *Patient Protection and
Affordable Care Act*, commonly called ObamaCare, which requires most
Americans to have health insurance. The Supreme Court upheld this
requirement.

[[../graphs/PredictingSCOTUS.png]]

Since non-profits, voters, and anybody interested in long-term
planning can benefit from knowing the outcomes of the Supreme Court
cases before they happen, legal academics and political scientists
regularly make predictions of Supreme Court decisions from detailed
studies of the cases and individual justices.

They wanted to see if an analytical model could outperform the
expertise and intuition of a large group of experts. Martin used a
method called classification and regression trees, or CART. In this
case, the outcome is binary.

[[../graphs/PredictingSCOTUS02.png]]

** Quick Question (1 point possible)

How much data do you think Andrew Martin should use to build his
model?

*** Answer

- [X] Information from all cases with the same set of justices as
  those he is trying to predict. Data from cases where the justices
  were different might just add noise to our problem.

- [ ] Only information from the most recent year. Since the justices
  change every year, only this information would be useful.

*Explanation*

Andrew Martin should use all data from the cases with the same set of
justices. The justices do not change every year, and typically you
want to use as much data as you have available.

** Video 2: CART

To predict the outcomes of the Supreme Court, Martin used cases from
1994 through 2001. He chose this period of time because the Supreme
Court was composed of the same nine justices that were justices when
he made his predictions in 2002.

[[../graphs/DataSCOTUS.png]]

This was a very rare data set, since as I mentioned earlier, this was
the longest period of time with the same set of justices in over 180
years. This allowed Martin to use a larger data set then might have
been available if he was doing this experiment at a different time.

[[../graphs/VariablesSCOTUS.png]]

- The *circuit court of origin* is the circuit or lower court where the
  case came from. There are 13 different circuit courts in the United
  States. The 1st through 11th and Washington, DC courts are defined
  by region. And the federal court is defined by the subject matter of
  the case.

- The *issue area of the case* gives each case a category, like civil
  rights or federal taxation.

- The *type of petitioner and type of respondent* define two parties
  in the case. Some examples are the United States, an employer, or an
  employee.

- The *ideological direction of the lower court decision* describes
  whether the lower court made what was considered a liberal or a
  conservative decision.

- The last variable indicates *whether or not the petitioner argued
  that a law or practice was unconstitutional*.

To collect this data, Martin and his colleagues read through all of
the cases and coded the information. Some of it, like the circuit
court, is straightforward. But other information required a judgment
call, like the ideological direction of the lower court.

*** Logistic regression interpretation issues

Now that we have our data and variables, we are ready to predict the
decisions of Justice Stevens.

[[../graphs/LRStevens.png]]

We can use logistic regression, and we get a model where some of the
most significant variables are:

whether or not the case is from the 2nd circuit court, with a
coefficient of 1.66; whether or not the case is from the 4th circuit
court, with a coefficient of 2.82; and whether or not the lower court
decision was liberal, with a coefficient of (negative) -1.22.

While this tells us that the case being from the 2nd or 4th circuit
courts is predictive of Justice Stevens reversing the case, and the
lower court decision being liberal is predictive of Justice Stevens
affirming the case, it's difficult to understand which factors are
more important due to things like the scales of the variables, and the
possibility of multicollinearity.

It's also difficult to quickly evaluate what the prediction would be
for a new case. So instead of logistic regression, Martin and his
colleagues used a method called *classification and regression trees*,
or *CART*.

*** CART

[[../graphs/CARTDef.png]]

This method builds what is called a tree by splitting on the values of
the independent variables. To predict the outcome for a new
observation or case, you can follow the splits in the tree and at the
end, you predict the most frequent outcome in the training set that
followed the same path.

Some advantages of CART are that it does not assume a linear model,
like logistic regression or linear regression, and it's a very
interpretable model.

*** Example

[[../graphs/CARTexample.png]]

This plot shows sample data for two independent variables, x and y,
and each data point is colored by the outcome variable, red or gray.

CART tries to split this data into subsets so that each subset is as
pure or homogeneous as possible. The first three splits that CART
would create are shown here. *Then the standard prediction made by a
CART model is just the majority in each subset*.

If a new observation fell into one of these two subsets (RED), then we
would predict red, since the majority of the observations in those
subsets are red.

However, if a new observation fell into one of these two subsets
(GRAY), we would predict gray, since the majority of the observations
in those two subsets are gray.

[[../graphs/CARTtreeExample.png]]

A CART model is represented by what we call a tree. The tree for the
splits we just generated is shown on the right. The first split tests
whether the variable x is less than 60.

If yes, the model says to predict red, and if no, the model moves on
to the next split. Then, the second split checks whether or not the
variable y is less than 20.

If no, the model says to predict gray, but if yes, the model moves on
to the next split. The third split checks whether or not the variable
x is less than 85.

If yes, then the model says to predict red, and if no, the model says
to predict gray. There are a couple things to keep in mind when
reading trees.

*Important*

There are a couple things to keep in mind when reading trees. In this
tree, and for the trees we'll generate in R, a yes response is always
to the left and a no response is always to the right. Also, make sure
you always start at the top of the tree. The x less than 85 split only
counts for observations for which x is greater than 60 and y is less
than 20.

** Quick Question (2 points possible)

Suppose that you have the following CART tree:

[[../graphs/QQ2_SupremeCourt.png]]

*** Question a

How many splits are in this tree?

**** Answer

*3 splits*.

*** Question b

For which data observations should we predict "Red", according to this
tree? Select all that apply.

**** Answer

- [X] If X is less than 60, and Y is any value.

- [ ] If X is greater than or equal to 60, and Y is greater than or
  equal to 20.

- [ ] If X is greater than or equal to 85, and Y is less than 20.

- [X] If X is greater than or equal to 60 and less than 85, and Y is
  less than 20.

*Explanation*

- This tree has three splits.

- The first split says to predict "Red" if X is less than 60,
  regardless of the value of Y.

- Otherwise, we move to the second split. The second split says to
  check the value of Y

    + if it is greater than or equal to 20, predict "Gray".

- Otherwise, we move to the third split. This split checks the value
  of X again.

    + If X is less than 85 (and greater than or equal to 60 by
       the first split) and Y is less than 20, then we predict
       "Red". Otherwise, we predict "Gray".

** Video 3: Splitting and Predictions

[[../graphs/NumberSplitsCART.png]]

In R, this is called the *minbucket* parameter, for the minimum number
of observations in each bucket or subset.

The smaller minbucket is, the more splits will be generated. But if
it's too small, overfitting will occur. This means that CART will fit
the training set almost perfectly. But this is bad because then the
model will probably not perform well on test set data or new data.

On the other hand, if the minbucket parameter is too large, the model
will be too simple and the accuracy will be poor.

*We will learn about a nice method for selecting the stopping
 parameter*.

[[../graphs/PredictionsCART.png]]

In the Supreme Court case, we'll be classifying observations as either
affirm or reverse. Instead of just taking the majority outcome to be
the prediction, we can compute the percentage of data in a subset of
each type of outcome.

As an example, if we have a subset with 10 affirms and two reverses,
then 87% of the data is affirm. Then, just like in logistic
regression, we can use a threshold value to obtain our prediction.

For this example, we would predict affirm with a threshold of 0.5
since the majority is affirm. But if we increase that threshold to
0.9, we would predict reverse for this example.

Then by varying the threshold value, we can compute an ROC curve and
compute an AUC value to evaluate our model.

[[../graphs/ROC-CART.png]]

**  Quick Question (1 point possible)

Suppose you have a subset of 20 observations, where 14 have outcome A
and 6 have outcome B. What proportion of observations have outcome A?

#+begin_src R :session :results output :exports all
  writeLines("\n :: Proportion of observations of A:")
  A <- 14; B <- 6;
  A / (A + B)
#+end_src

#+RESULTS:
:
:  :: Proportion of observations of A:
: [1] 0.7

*** Answer

*Explanation*

The fraction of observations that have outcome A is

$$
\frac{14}{14 + 6} = 0.7.
$$

** Quick Question (3 points possible)

The following questions ask about the subset of 20 observations from
the previous question.

*** Question

If we set the threshold to 0.25 when computing predictions of outcome
A, will we predict A or B for these observations?

**** Answer

- [X] A
- [ ] B

*** Question

If we set the threshold to 0.5 when computing predictions of outcome
A, will we predict A or B for these observations?

**** Answer

- [X] A
- [ ] B

*** Question

If we set the threshold to 0.75 when computing predictions of outcome
A, will we predict A or B for these observations?

**** Answer

- [ ] A
- [X] B

** Video 4: CART in R

In the next few videos, we'll be using the dataset [[https://courses.edx.org/asset-v1:MITx%2B15.071x_2a%2B2T2015%2Btype@asset%2Bblock/stevens.csv][stevens.csv]] to
build trees in R. Please download the dataset to follow along. This
data comes from the [[http://wusct.wustl.edu/data.php][Supreme Court Forecasting Project]] website.

An R script file with all of the R commands used in this lecture can
be downloaded [[https://courses.edx.org/asset-v1:MITx%2B15.071x_2a%2B2T2015%2Btype@asset%2Bblock/Unit4_SupremeCourt.R][here]].

*** Download the data sets

In this part we can download the data

#+BEGIN_SRC R :session :results output :exports all
  library(parallel)

  if(!file.exists("../data")) {
          dir.create("../data")
  }

  fileUrl <- "https://courses.edx.org/asset-v1:MITx+15.071x_2a+2T2015+type@asset+block/stevens.csv"

  fileName <- "stevens.csv"

  dataPath <- "../data"

  filePath <- paste(dataPath, fileName, sep = "/")

  if(!file.exists(filePath)) {
          download.file(fileUrl, destfile = filePath, method = "curl")
  }

  list.files("../data")
#+END_SRC

#+RESULTS:
#+begin_example
 [1] "AnonymityPoll.csv"       "BoeingStock.csv"
 [3] "CPSData.csv"             "CocaColaStock.csv"
 [5] "CountryCodes.csv"        "FluTest.csv"
 [7] "FluTrain.csv"            "GEStock.csv"
 [9] "IBMStock.csv"            "MetroAreaCodes.csv"
[11] "NBA_test.csv"            "NBA_train.csv"
[13] "PollingData.csv"         "PollingData_Imputed.csv"
[15] "ProcterGambleStock.csv"  "README.md"
[17] "USDA.csv"                "WHO.csv"
[19] "WHO_Europe.csv"          "baseball.csv"
[21] "climate_change.csv"      "framingham.csv"
[23] "loans.csv"               "loans_imputed.csv"
[25] "mvtWeek1.csv"            "parole.csv"
[27] "pisa2009test.csv"        "pisa2009train.csv"
[29] "quality.csv"             "songs.csv"
[31] "stevens.csv"             "wine.csv"
[33] "wine_test.csv"
#+end_example

*** Load the data set

#+BEGIN_SRC R :session :results output :exports all
  writeLines("    Loading data into their data frames.")
  stevens <- read.table("../data/stevens.csv", sep = ",", header = TRUE)

  str(stevens)
  summary(stevens)
#+END_SRC

#+RESULTS:
#+begin_example
    Loading data into their data frames.
'data.frame':	566 obs. of  9 variables:
 $ Docket    : Factor w/ 566 levels "00-1011","00-1045",..: 63 69 70 145 97 181 242 289 334 436 ...
 $ Term      : int  1994 1994 1994 1994 1995 1995 1996 1997 1997 1999 ...
 $ Circuit   : Factor w/ 13 levels "10th","11th",..: 4 11 7 3 9 11 13 11 12 2 ...
 $ Issue     : Factor w/ 11 levels "Attorneys","CivilRights",..: 5 5 5 5 9 5 5 5 5 3 ...
 $ Petitioner: Factor w/ 12 levels "AMERICAN.INDIAN",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ Respondent: Factor w/ 12 levels "AMERICAN.INDIAN",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ LowerCourt: Factor w/ 2 levels "conser","liberal": 2 2 2 1 1 1 1 1 1 1 ...
 $ Unconst   : int  0 0 0 0 0 1 0 1 0 0 ...
 $ Reverse   : int  1 1 1 1 1 0 1 1 1 1 ...
     Docket         Term         Circuit                  Issue
 00-1011:  1   Min.   :1994   9th    :122   CriminalProcedure:132
 00-1045:  1   1st Qu.:1995   5th    : 53   JudicialPower    :102
 00-1072:  1   Median :1997   11th   : 49   EconomicActivity : 98
 00-1073:  1   Mean   :1997   7th    : 47   CivilRights      : 74
 00-1089:  1   3rd Qu.:1999   4th    : 46   DueProcess       : 43
 00-121 :  1   Max.   :2001   8th    : 44   FirstAmendment   : 39
 (Other):560                  (Other):205   (Other)          : 78
               Petitioner               Respondent    LowerCourt
 OTHER              :175   OTHER             :177   conser :293
 CRIMINAL.DEFENDENT : 89   BUSINESS          : 80   liberal:273
 BUSINESS           : 79   US                : 69
 STATE              : 48   CRIMINAL.DEFENDENT: 58
 US                 : 48   STATE             : 56
 GOVERNMENT.OFFICIAL: 38   EMPLOYEE          : 28
 (Other)            : 89   (Other)           : 98
    Unconst          Reverse
 Min.   :0.0000   Min.   :0.0000
 1st Qu.:0.0000   1st Qu.:0.0000
 Median :0.0000   Median :1.0000
 Mean   :0.2473   Mean   :0.5459
 3rd Qu.:0.0000   3rd Qu.:1.0000
 Max.   :1.0000   Max.   :1.0000
#+end_example

Now, let's take a look at our data using the ~str~ function. We have
566 observations, or Supreme Court cases, and nine different
variables.

*Docket* is just a unique identifier for each case, and *Term* is the
year of the case. Then we have our six independent variables: the *Circuit*
court of origin, the *Issue* area of the case, the type of
*Petitioner*, the type of *Respondent*, the lower court *LowerCourt*
direction, and whether or not the petitioner argued that a law or
practice was unconstitutional *Unconst*. The last variable is our
dependent variable, whether or not Justice Stevens voted to *reverse*
the case: 1 for reverse, and 0 for affirm.

Now before building models, we need to split our data into a training
set and a testing set.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Split the data:")
  library(caTools)
  set.seed(3000)

  spl <- sample.split(stevens$Reverse, SplitRatio = 0.7)
  Train <- subset(stevens, spl == TRUE)
  Test <- subset(stevens, spl == FALSE)

  writeLines("\n :: Dimensions of the training set:")
  dim(Train)

  writeLines("\n :: Dimensions of the testing set:")
  dim(Test)
#+end_src

#+RESULTS:
:
:  :: Split the data:
:
:  :: Dimensions of the training set:
: [1] 396   9
:
:  :: Dimensions of the testing set:
: [1] 170   9

Now, we're ready to build our *CART* model. First we need to install and
load the ~rpart~ package and the ~rpart~ plotting package.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Install new package: rpart ...")
  ## install.packages('rpart', repos='http://cran.rstudio.com/')

  ## writeLines("\n :: Install new package: rpart.plot ...")
  ## install.packages('rpart.plot', repos='http://cran.rstudio.com/')
  writeLines("\n :: NOTE: Please comment after install once...")

  writeLines("\n :: Loading rpart and rpart.plot...")
  library(rpart)
  library(rpart.plot)

  writeLines("\n :: rpart and r.part.plot libraries loaded...")
#+end_src

#+RESULTS:
:
:  :: Install new package: rpart ...
:
:  :: NOTE: Please comment after install once...
:
:  :: Loading rpart and rpart.plot...
:
:  :: rpart and r.part.plot libraries loaded...

*** Building the CART model

Now we can create our CART model using the rpart function.

#+begin_src R :session :results output :exports all
  writeLines("\n :: CART model DONE...")
  StevensTree <- rpart(Reverse ~ Circuit + Issue + Petitioner +
              Respondent + LowerCourt + Unconst, data =
              Train, method = "class", minbucket = 25)
#+end_src

#+RESULTS:
:
:  :: CART model DONE...

#+BEGIN_SRC R :var basename="CARTcourtModel" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  prp(StevensTree)
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION: CART model for the Stevens prediction.
#+NAME:   fig:CARTcourtModel
#+ATTR_LaTeX: placement: [H]
[[../graphs/CARTcourtModel.png]]

The last argument we'll give is ~minbucket = 25~. This limits the tree
so that it doesn't overfit to our training set. We selected a value of
25, but we could pick a smaller or larger value.

If you're not sure what the abbreviations are, you could create a
table of the variable to see all of the possible values.

*** Making predictions in the testing set

Comparing this to a logistic regression model, we can see that it's
very interpretable. A CART tree is a series of decision rules which
can easily be explained. Now let's see how well our CART model does at
making predictions for the test set.

And we'll add a third argument here, which is ~type = "class"~. We
need to give this argument when making predictions for our CART model
if we want the majority class predictions. This is like using a
threshold of $0.5$.

We'll see in a few minutes how we can leave this argument out and
still get probabilities from our CART model.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Make predictions:")
  PredictCART <- predict(StevensTree, newdata = Test, type = "class")
  table(Test$Reverse, PredictCART)

  writeLines("\n :: Overall accuracy:")
  (41+71)/(41+36+22+71)
#+end_src

#+RESULTS:
:
:  :: Make predictions:
:    PredictCART
:      0  1
:   0 41 36
:   1 22 71
:
:  :: Overall accuracy:
: [1] 0.6588235

Now let's compute the accuracy of our model by building a confusion
matrix. So we'll use the table function, and first give the true
outcome values-- ~Test$Reverse~, and then our predictions,
~PredictCART~.

So the accuracy of our CART model is $0.659$.

If you were to build a logistic regression model, you would get an
accuracy of 0.665 and a baseline model that always predicts Reverse,
the most common outcome, has an accuracy of 0.547. So our CART model
significantly beats the baseline and is competitive with logistic
regression.

Lastly, to evaluate our model, let's generate an ROC curve for our
CART model using the ROCR package.

#+begin_src R :session :results output :exports all
  writeLines("\n :: ROC curve:")
  library(ROCR)

  PredictROC <- predict(StevensTree, newdata = Test)
  head(PredictROC)

  pred <- prediction(PredictROC[,2], Test$Reverse)
  perf <- performance(pred, "tpr", "fpr")
#+end_src

#+RESULTS:
#+begin_example

 :: ROC curve:
Loading required package: gplots

Attaching package: 'gplots'

The following object is masked from 'package:stats':

    lowess
           0         1
1  0.3035714 0.6964286
3  0.3035714 0.6964286
4  0.4000000 0.6000000
6  0.4000000 0.6000000
8  0.4000000 0.6000000
21 0.3035714 0.6964286
#+end_example

*PredictROC*

For each observation in the test set, it gives two numbers which can
be thought of as the probability of outcome 0 and the probability of
outcome 1. More concretely, each test set observation is classified
into a subset, or bucket, of our CART tree.

These numbers give the percentage of training set data in that subset
with outcome 0 and the percentage of data in the training set in that
subset with outcome 1.

Now we need to use the performance function, where the first argument
is the outcome of the prediction function, and then the next two
arguments are true positive rate and false positive rate, what we want
on the x and y-axes of our ROC curve.

#+BEGIN_SRC R :var basename="ROCtestingStevens" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  plot(perf)
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION: The ROC curve for the justice Stevens.
#+NAME:   fig:ROCtestingStevens
#+ATTR_LaTeX: placement: [H]
[[../graphs/ROCtestingStevens.png]]

** Quick Question (3 points possible)

*** Question a

Compute the AUC of the CART model from the previous video, using the
following command in your R console:

#+begin_src R :session :results output :exports all
  writeLines("\n :: The AUC for the CART:")
  as.numeric(performance(pred, "auc")@y.values)
#+end_src

#+RESULTS:
:
:  :: The AUC for the CART:
: [1] 0.6927105

What is the AUC?

*The AUC for the CART = 0.6927105*.

*** Question b

Now, recall that in Video 4, our tree had 7 splits. Let's see how this
changes if we change the value of minbucket.

First build a CART model that is similar to the one we built in Video
4, except change the minbucket parameter to 5. Plot the tree.

#+begin_src R :session :results output :exports all
  StevensTree2 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
              Respondent + LowerCourt + Unconst, data =
              Train, method = "class", minbucket = 5)

  writeLines("\n :: CART model 2 DONE...")
#+end_src

#+RESULTS:
:
:  :: CART model 2 DONE...

#+BEGIN_SRC R :var basename="CARTcourtModel2" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  prp(StevensTree2)
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION: CART court model with a minbucket of 5.
#+NAME:   fig:CARTcourtModel2
#+ATTR_LaTeX: placement: [H]
[[../graphs/CARTcourtModel2.png]]

How many splits does the tree have?

**** Answer

*The tree have 16 splits*.

*** Question c

Now build a CART model that is similar to the one we built in Video 4,
except change the minbucket parameter to 100. Plot the tree.

#+begin_src R :session :results output :exports all
  StevensTree3 <- rpart(Reverse ~ Circuit + Issue + Petitioner +
              Respondent + LowerCourt + Unconst, data =
              Train, method = "class", minbucket = 100)

  writeLines("\n :: CART model 3 DONE...")
#+end_src

#+RESULTS:
: null device
:           1
:
:  :: CART model 3 DONE...

#+BEGIN_SRC R :var basename="CARTcourtModel3" :session :results none silent :exports none
  filename <- paste("../graphs/", basename, ".png", sep = "")

  png(filename = filename, bg = "white", width = 640, height = 480, units = "px")

  ## ----- Plot code begin here
  prp(StevensTree3)
  ## ----- Plot code ends here

  ## Close the PNG device and plots
  dev.off()
#+END_SRC

#+CAPTION: CART court model with a minbucket of 5.
#+NAME:   fig:CARTcourtModel3
#+ATTR_LaTeX: placement: [H]
[[../graphs/CARTcourtModel3.png]]


How many splits does the tree have?

**** Answer

*This tree have only 1 split*.

** Video 5: Random Forests

Important Note: In this video, we install the package
*randomForest*. If you get an installation warning that says:

"Warning: cannot remove prior installation of packages
'randomForest'", please try quitting and re-starting R.

#+begin_src R :session :results output :exports all
  writeLines("\n :: Install new package: randomForest ...")
  ## install.packages('randomForest', repos='http://cran.rstudio.com/')
  writeLines("\n :: NOTE: Please comment after install once...")

  library(randomForest)
  writeLines("\n :: Library randomForest loaded...")
#+end_src

#+RESULTS:
:
:  :: Install new package: randomForest ...
:
:  :: NOTE: Please comment after install once...
:
:  :: Library randomForest loaded...

We'll introduce a method that is similar to CART called random
forests. This method was designed to improve the prediction accuracy
of CART and works by building a large number of CART
trees. Unfortunately, this makes the method less interpretable than
CART, so often you need to decide if you value the interpretability or
the increase in accuracy more.

To make a prediction for a new observation, each tree in the forest
votes on the outcome and we pick the outcome that receives the
majority of the votes.

[[../graphs/RandomForest.png]]

So how does random forests build many CART trees?

Random forests only allows each tree to split on a random subset of
the available independent variables, and each tree is built from what
we call a bagged or bootstrapped sample of the data. This just means
that the data used as the training data for each tree is selected
randomly with replacement.
